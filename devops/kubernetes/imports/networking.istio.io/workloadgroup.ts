// generated by cdk8s
import { ApiObject } from 'cdk8s';
import { Construct } from 'constructs';

/**
 * 
 *
 * @schema WorkloadGroup
 */
export class WorkloadGroup extends ApiObject {
  /**
   * Defines a "WorkloadGroup" API object
   * @param scope the scope in which to define this object
   * @param name a scope-local name for the object
   * @param options configuration options
   */
  public constructor(scope: Construct, name: string, options: WorkloadGroupOptions = {}) {
    super(scope, name, {
      ...options,
      kind: 'WorkloadGroup',
      apiVersion: 'networking.istio.io/v1alpha3',
    });
  }
}

/**
 * @schema WorkloadGroup
 */
export interface WorkloadGroupOptions {
  /**
   * Describes a collection of workload instances. See more details at: https://istio.io/docs/reference/config/networking/workload-group.html
   *
   * @schema WorkloadGroup#spec
   */
  readonly spec?: WorkloadGroupSpec;

}

/**
 * Describes a collection of workload instances. See more details at: https://istio.io/docs/reference/config/networking/workload-group.html
 *
 * @schema WorkloadGroupSpec
 */
export interface WorkloadGroupSpec {
  /**
   * Metadata that will be used for all corresponding `WorkloadEntries`.
   *
   * @schema WorkloadGroupSpec#metadata
   */
  readonly metadata?: WorkloadGroupSpecMetadata;

  /**
   * `ReadinessProbe` describes the configuration the user must provide for healthchecking on their workload.
   *
   * @schema WorkloadGroupSpec#probe
   */
  readonly probe?: WorkloadGroupSpecProbe;

  /**
   * Template to be used for the generation of `WorkloadEntry` resources that belong to this `WorkloadGroup`.
   *
   * @schema WorkloadGroupSpec#template
   */
  readonly template?: WorkloadGroupSpecTemplate;

}

/**
 * Metadata that will be used for all corresponding `WorkloadEntries`.
 *
 * @schema WorkloadGroupSpecMetadata
 */
export interface WorkloadGroupSpecMetadata {
  /**
   * @schema WorkloadGroupSpecMetadata#annotations
   */
  readonly annotations?: { [key: string]: string };

  /**
   * @schema WorkloadGroupSpecMetadata#labels
   */
  readonly labels?: { [key: string]: string };

}

/**
 * `ReadinessProbe` describes the configuration the user must provide for healthchecking on their workload.
 *
 * @schema WorkloadGroupSpecProbe
 */
export interface WorkloadGroupSpecProbe {
  /**
   * health is determined by how the command that is executed exited.
   *
   * @schema WorkloadGroupSpecProbe#exec
   */
  readonly exec?: WorkloadGroupSpecProbeExec;

  /**
   * Minimum consecutive failures for the probe to be considered failed after having succeeded.
   *
   * @schema WorkloadGroupSpecProbe#failureThreshold
   */
  readonly failureThreshold?: number;

  /**
   * @schema WorkloadGroupSpecProbe#httpGet
   */
  readonly httpGet?: WorkloadGroupSpecProbeHttpGet;

  /**
   * Number of seconds after the container has started before readiness probes are initiated.
   *
   * @schema WorkloadGroupSpecProbe#initialDelaySeconds
   */
  readonly initialDelaySeconds?: number;

  /**
   * How often (in seconds) to perform the probe.
   *
   * @schema WorkloadGroupSpecProbe#periodSeconds
   */
  readonly periodSeconds?: number;

  /**
   * Minimum consecutive successes for the probe to be considered successful after having failed.
   *
   * @schema WorkloadGroupSpecProbe#successThreshold
   */
  readonly successThreshold?: number;

  /**
   * health is determined by if the proxy is able to connect.
   *
   * @schema WorkloadGroupSpecProbe#tcpSocket
   */
  readonly tcpSocket?: WorkloadGroupSpecProbeTcpSocket;

  /**
   * Number of seconds after which the probe times out.
   *
   * @schema WorkloadGroupSpecProbe#timeoutSeconds
   */
  readonly timeoutSeconds?: number;

}

/**
 * Template to be used for the generation of `WorkloadEntry` resources that belong to this `WorkloadGroup`.
 *
 * @schema WorkloadGroupSpecTemplate
 */
export interface WorkloadGroupSpecTemplate {
  /**
   * @schema WorkloadGroupSpecTemplate#address
   */
  readonly address?: string;

  /**
   * One or more labels associated with the endpoint.
   *
   * @schema WorkloadGroupSpecTemplate#labels
   */
  readonly labels?: { [key: string]: string };

  /**
   * The locality associated with the endpoint.
   *
   * @schema WorkloadGroupSpecTemplate#locality
   */
  readonly locality?: string;

  /**
   * @schema WorkloadGroupSpecTemplate#network
   */
  readonly network?: string;

  /**
   * Set of ports associated with the endpoint.
   *
   * @schema WorkloadGroupSpecTemplate#ports
   */
  readonly ports?: { [key: string]: number };

  /**
   * @schema WorkloadGroupSpecTemplate#serviceAccount
   */
  readonly serviceAccount?: string;

  /**
   * The load balancing weight associated with the endpoint.
   *
   * @schema WorkloadGroupSpecTemplate#weight
   */
  readonly weight?: number;

}

/**
 * health is determined by how the command that is executed exited.
 *
 * @schema WorkloadGroupSpecProbeExec
 */
export interface WorkloadGroupSpecProbeExec {
  /**
   * command to run.
   *
   * @schema WorkloadGroupSpecProbeExec#command
   */
  readonly command?: string[];

}

/**
 * @schema WorkloadGroupSpecProbeHttpGet
 */
export interface WorkloadGroupSpecProbeHttpGet {
  /**
   * Host name to connect to, defaults to the pod IP.
   *
   * @schema WorkloadGroupSpecProbeHttpGet#host
   */
  readonly host?: string;

  /**
   * headers the proxy will pass on to make the request.
   *
   * @schema WorkloadGroupSpecProbeHttpGet#httpHeaders
   */
  readonly httpHeaders?: WorkloadGroupSpecProbeHttpGetHttpHeaders[];

  /**
   * Path to access on the HTTP server.
   *
   * @schema WorkloadGroupSpecProbeHttpGet#path
   */
  readonly path?: string;

  /**
   * port on which the endpoint lives.
   *
   * @schema WorkloadGroupSpecProbeHttpGet#port
   */
  readonly port?: number;

  /**
   * @schema WorkloadGroupSpecProbeHttpGet#scheme
   */
  readonly scheme?: string;

}

/**
 * health is determined by if the proxy is able to connect.
 *
 * @schema WorkloadGroupSpecProbeTcpSocket
 */
export interface WorkloadGroupSpecProbeTcpSocket {
  /**
   * @schema WorkloadGroupSpecProbeTcpSocket#host
   */
  readonly host?: string;

  /**
   * @schema WorkloadGroupSpecProbeTcpSocket#port
   */
  readonly port?: number;

}

/**
 * @schema WorkloadGroupSpecProbeHttpGetHttpHeaders
 */
export interface WorkloadGroupSpecProbeHttpGetHttpHeaders {
  /**
   * @schema WorkloadGroupSpecProbeHttpGetHttpHeaders#name
   */
  readonly name?: string;

  /**
   * @schema WorkloadGroupSpecProbeHttpGetHttpHeaders#value
   */
  readonly value?: string;

}

