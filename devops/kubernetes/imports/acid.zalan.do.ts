// generated by cdk8s
import { ApiObject, GroupVersionKind } from "cdk8s";
import { Construct } from "constructs";

/**
 *
 *
 * @schema OperatorConfiguration
 */
export class OperatorConfiguration extends ApiObject {
	/**
	 * Returns the apiVersion and kind for "OperatorConfiguration"
	 */
	public static readonly GVK: GroupVersionKind = {
		apiVersion: "acid.zalan.do/v1",
		kind: "OperatorConfiguration",
	};

	/**
	 * Renders a Kubernetes manifest for "OperatorConfiguration".
	 *
	 * This can be used to inline resource manifests inside other objects (e.g. as templates).
	 *
	 * @param props initialization props
	 */
	public static manifest(props: OperatorConfigurationProps): any {
		return {
			...OperatorConfiguration.GVK,
			...props,
		};
	}

	/**
	 * Defines a "OperatorConfiguration" API object
	 * @param scope the scope in which to define this object
	 * @param id a scope-local name for the object
	 * @param props initialization props
	 */
	public constructor(
		scope: Construct,
		id: string,
		props: OperatorConfigurationProps
	) {
		super(scope, id, OperatorConfiguration.manifest(props));
	}
}

/**
 * @schema OperatorConfiguration
 */
export interface OperatorConfigurationProps {
	/**
	 * @schema OperatorConfiguration#configuration
	 */
	readonly configuration: OperatorConfigurationConfiguration;
}

/**
 * @schema OperatorConfigurationConfiguration
 */
export interface OperatorConfigurationConfiguration {
	/**
	 * @schema OperatorConfigurationConfiguration#sidecars
	 */
	readonly sidecars?: any[];

	/**
	 * @schema OperatorConfigurationConfiguration#workers
	 */
	readonly workers?: number;

	/**
	 * @schema OperatorConfigurationConfiguration#users
	 */
	readonly users?: OperatorConfigurationConfigurationUsers;

	/**
	 * @schema OperatorConfigurationConfiguration#kubernetes
	 */
	readonly kubernetes?: OperatorConfigurationConfigurationKubernetes;

	/**
	 * @schema OperatorConfigurationConfiguration#timeouts
	 */
	readonly timeouts?: OperatorConfigurationConfigurationTimeouts;

	/**
	 * @schema OperatorConfigurationConfiguration#debug
	 */
	readonly debug?: OperatorConfigurationConfigurationDebug;

	/**
	 * @schema OperatorConfigurationConfiguration#scalyr
	 */
	readonly scalyr?: OperatorConfigurationConfigurationScalyr;
}

/**
 * @schema OperatorConfigurationConfigurationUsers
 */
export interface OperatorConfigurationConfigurationUsers {}

/**
 * @schema OperatorConfigurationConfigurationKubernetes
 */
export interface OperatorConfigurationConfigurationKubernetes {
	/**
	 * @schema OperatorConfigurationConfigurationKubernetes#toleration
	 */
	readonly toleration?: { [key: string]: string };
}

/**
 * @schema OperatorConfigurationConfigurationTimeouts
 */
export interface OperatorConfigurationConfigurationTimeouts {}

/**
 * @schema OperatorConfigurationConfigurationDebug
 */
export interface OperatorConfigurationConfigurationDebug {}

/**
 * @schema OperatorConfigurationConfigurationScalyr
 */
export interface OperatorConfigurationConfigurationScalyr {}

/**
 *
 *
 * @schema postgresql
 */
export class Postgresql extends ApiObject {
	/**
	 * Returns the apiVersion and kind for "postgresql"
	 */
	public static readonly GVK: GroupVersionKind = {
		apiVersion: "acid.zalan.do/v1",
		kind: "postgresql",
	};

	/**
	 * Renders a Kubernetes manifest for "postgresql".
	 *
	 * This can be used to inline resource manifests inside other objects (e.g. as templates).
	 *
	 * @param props initialization props
	 */
	public static manifest(props: PostgresqlProps): any {
		return {
			...Postgresql.GVK,
			...props,
		};
	}

	/**
	 * Defines a "postgresql" API object
	 * @param scope the scope in which to define this object
	 * @param id a scope-local name for the object
	 * @param props initialization props
	 */
	public constructor(scope: Construct, id: string, props: PostgresqlProps) {
		super(scope, id, Postgresql.manifest(props));
	}
}

/**
 * @schema postgresql
 */
export interface PostgresqlProps {
	/**
	 * @schema postgresql#spec
	 */
	readonly spec: PostgresqlSpec;
}

/**
 * @schema PostgresqlSpec
 */
export interface PostgresqlSpec {
	/**
	 * @schema PostgresqlSpec#additionalVolumes
	 */
	readonly additionalVolumes?: PostgresqlSpecAdditionalVolumes[];

	/**
	 * @schema PostgresqlSpec#allowedSourceRanges
	 */
	readonly allowedSourceRanges?: string[];

	/**
	 * @schema PostgresqlSpec#clone
	 */
	readonly clone?: PostgresqlSpecClone;

	/**
	 * @schema PostgresqlSpec#connectionPooler
	 */
	readonly connectionPooler?: PostgresqlSpecConnectionPooler;

	/**
	 * @schema PostgresqlSpec#databases
	 */
	readonly databases?: { [key: string]: string };

	/**
	 * @schema PostgresqlSpec#dockerImage
	 */
	readonly dockerImage?: string;

	/**
	 * @schema PostgresqlSpec#enableConnectionPooler
	 */
	readonly enableConnectionPooler?: boolean;

	/**
	 * @schema PostgresqlSpec#enableReplicaConnectionPooler
	 */
	readonly enableReplicaConnectionPooler?: boolean;

	/**
	 * @schema PostgresqlSpec#enableLogicalBackup
	 */
	readonly enableLogicalBackup?: boolean;

	/**
	 * @schema PostgresqlSpec#enableMasterLoadBalancer
	 */
	readonly enableMasterLoadBalancer?: boolean;

	/**
	 * @schema PostgresqlSpec#enableReplicaLoadBalancer
	 */
	readonly enableReplicaLoadBalancer?: boolean;

	/**
	 * @schema PostgresqlSpec#enableShmVolume
	 */
	readonly enableShmVolume?: boolean;

	/**
	 * @schema PostgresqlSpec#initContainers
	 */
	readonly initContainers?: any[];

	/**
	 * @schema PostgresqlSpec#logicalBackupSchedule
	 */
	readonly logicalBackupSchedule?: string;

	/**
	 * @schema PostgresqlSpec#maintenanceWindows
	 */
	readonly maintenanceWindows?: string[];

	/**
	 * @schema PostgresqlSpec#numberOfInstances
	 */
	readonly numberOfInstances: number;

	/**
	 * @schema PostgresqlSpec#patroni
	 */
	readonly patroni?: PostgresqlSpecPatroni;

	/**
	 * @schema PostgresqlSpec#podAnnotations
	 */
	readonly podAnnotations?: { [key: string]: string };

	/**
	 * @schema PostgresqlSpec#podPriorityClassName
	 */
	readonly podPriorityClassName?: string;

	/**
	 * @schema PostgresqlSpec#postgresql
	 */
	readonly postgresql: PostgresqlSpecPostgresql;

	/**
	 * @schema PostgresqlSpec#preparedDatabases
	 */
	readonly preparedDatabases?: {
		[key: string]: PostgresqlSpecPreparedDatabases;
	};

	/**
	 * @schema PostgresqlSpec#replicaLoadBalancer
	 */
	readonly replicaLoadBalancer?: boolean;

	/**
	 * @schema PostgresqlSpec#resources
	 */
	readonly resources?: PostgresqlSpecResources;

	/**
	 * @schema PostgresqlSpec#schedulerName
	 */
	readonly schedulerName?: string;

	/**
	 * @schema PostgresqlSpec#serviceAnnotations
	 */
	readonly serviceAnnotations?: { [key: string]: string };

	/**
	 * @schema PostgresqlSpec#sidecars
	 */
	readonly sidecars?: any[];

	/**
	 * @schema PostgresqlSpec#spiloRunAsUser
	 */
	readonly spiloRunAsUser?: number;

	/**
	 * @schema PostgresqlSpec#spiloRunAsGroup
	 */
	readonly spiloRunAsGroup?: number;

	/**
	 * @schema PostgresqlSpec#spiloFSGroup
	 */
	readonly spiloFSGroup?: number;

	/**
	 * @schema PostgresqlSpec#standby
	 */
	readonly standby?: PostgresqlSpecStandby;

	/**
	 * @schema PostgresqlSpec#teamId
	 */
	readonly teamId: string;

	/**
	 * @schema PostgresqlSpec#tls
	 */
	readonly tls?: PostgresqlSpecTls;

	/**
	 * @schema PostgresqlSpec#nodeAffinity
	 */
	readonly nodeAffinity?: PostgresqlSpecNodeAffinity;

	/**
	 * @schema PostgresqlSpec#tolerations
	 */
	readonly tolerations?: PostgresqlSpecTolerations[];

	/**
	 * @schema PostgresqlSpec#useLoadBalancer
	 */
	readonly useLoadBalancer?: boolean;

	/**
	 * @schema PostgresqlSpec#users
	 */
	readonly users?: { [key: string]: PostgresqlSpecUsers[] };

	/**
	 * @schema PostgresqlSpec#volume
	 */
	readonly volume: PostgresqlSpecVolume;
}

/**
 * @schema PostgresqlSpecAdditionalVolumes
 */
export interface PostgresqlSpecAdditionalVolumes {
	/**
	 * @schema PostgresqlSpecAdditionalVolumes#name
	 */
	readonly name: string;

	/**
	 * @schema PostgresqlSpecAdditionalVolumes#mountPath
	 */
	readonly mountPath: string;

	/**
	 * @schema PostgresqlSpecAdditionalVolumes#targetContainers
	 */
	readonly targetContainers?: string[];

	/**
	 * @schema PostgresqlSpecAdditionalVolumes#volumeSource
	 */
	readonly volumeSource: any;

	/**
	 * @schema PostgresqlSpecAdditionalVolumes#subPath
	 */
	readonly subPath?: string;
}

/**
 * @schema PostgresqlSpecClone
 */
export interface PostgresqlSpecClone {
	/**
	 * @schema PostgresqlSpecClone#cluster
	 */
	readonly cluster: string;

	/**
	 * @schema PostgresqlSpecClone#timestamp
	 */
	readonly timestamp?: string;

	/**
	 * @schema PostgresqlSpecClone#uid
	 */
	readonly uid?: string;
}

/**
 * @schema PostgresqlSpecConnectionPooler
 */
export interface PostgresqlSpecConnectionPooler {
	/**
	 * @schema PostgresqlSpecConnectionPooler#dockerImage
	 */
	readonly dockerImage?: string;

	/**
	 * @schema PostgresqlSpecConnectionPooler#maxDBConnections
	 */
	readonly maxDBConnections?: number;

	/**
	 * @schema PostgresqlSpecConnectionPooler#mode
	 */
	readonly mode?: PostgresqlSpecConnectionPoolerMode;

	/**
	 * @schema PostgresqlSpecConnectionPooler#numberOfInstances
	 */
	readonly numberOfInstances?: number;

	/**
	 * @schema PostgresqlSpecConnectionPooler#resources
	 */
	readonly resources?: PostgresqlSpecConnectionPoolerResources;

	/**
	 * @schema PostgresqlSpecConnectionPooler#schema
	 */
	readonly schema?: string;

	/**
	 * @schema PostgresqlSpecConnectionPooler#user
	 */
	readonly user?: string;
}

/**
 * @schema PostgresqlSpecPatroni
 */
export interface PostgresqlSpecPatroni {
	/**
	 * @schema PostgresqlSpecPatroni#initdb
	 */
	readonly initdb?: { [key: string]: string };

	/**
	 * @schema PostgresqlSpecPatroni#slots
	 */
	readonly slots?: { [key: string]: { [key: string]: string } };

	/**
	 * @schema PostgresqlSpecPatroni#ttl
	 */
	readonly ttl?: number;
}

/**
 * @schema PostgresqlSpecPostgresql
 */
export interface PostgresqlSpecPostgresql {
	/**
	 * @schema PostgresqlSpecPostgresql#version
	 */
	readonly version: PostgresqlSpecPostgresqlVersion;

	/**
	 * @schema PostgresqlSpecPostgresql#parameters
	 */
	readonly parameters?: { [key: string]: string };
}

/**
 * @schema PostgresqlSpecPreparedDatabases
 */
export interface PostgresqlSpecPreparedDatabases {
	/**
	 * @schema PostgresqlSpecPreparedDatabases#defaultUsers
	 */
	readonly defaultUsers?: boolean;

	/**
	 * @schema PostgresqlSpecPreparedDatabases#extensions
	 */
	readonly extensions?: { [key: string]: string };

	/**
	 * @schema PostgresqlSpecPreparedDatabases#schemas
	 */
	readonly schemas?: {
		[key: string]: PostgresqlSpecPreparedDatabasesSchemas;
	};
}

/**
 * @schema PostgresqlSpecResources
 */
export interface PostgresqlSpecResources {
	/**
	 * @schema PostgresqlSpecResources#limits
	 */
	readonly limits: PostgresqlSpecResourcesLimits;

	/**
	 * @schema PostgresqlSpecResources#requests
	 */
	readonly requests: PostgresqlSpecResourcesRequests;
}

/**
 * @schema PostgresqlSpecStandby
 */
export interface PostgresqlSpecStandby {}

/**
 * @schema PostgresqlSpecTls
 */
export interface PostgresqlSpecTls {
	/**
	 * @schema PostgresqlSpecTls#secretName
	 */
	readonly secretName: string;

	/**
	 * @schema PostgresqlSpecTls#certificateFile
	 */
	readonly certificateFile?: string;

	/**
	 * @schema PostgresqlSpecTls#privateKeyFile
	 */
	readonly privateKeyFile?: string;

	/**
	 * @schema PostgresqlSpecTls#caFile
	 */
	readonly caFile?: string;

	/**
	 * @schema PostgresqlSpecTls#caSecretName
	 */
	readonly caSecretName?: string;
}

/**
 * @schema PostgresqlSpecNodeAffinity
 */
export interface PostgresqlSpecNodeAffinity {
	/**
	 * @schema PostgresqlSpecNodeAffinity#preferredDuringSchedulingIgnoredDuringExecution
	 */
	readonly preferredDuringSchedulingIgnoredDuringExecution?: PostgresqlSpecNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution[];

	/**
	 * @schema PostgresqlSpecNodeAffinity#requiredDuringSchedulingIgnoredDuringExecution
	 */
	readonly requiredDuringSchedulingIgnoredDuringExecution?: PostgresqlSpecNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution;
}

/**
 * @schema PostgresqlSpecTolerations
 */
export interface PostgresqlSpecTolerations {
	/**
	 * @schema PostgresqlSpecTolerations#key
	 */
	readonly key: string;

	/**
	 * @schema PostgresqlSpecTolerations#operator
	 */
	readonly operator: PostgresqlSpecTolerationsOperator;

	/**
	 * @schema PostgresqlSpecTolerations#value
	 */
	readonly value?: string;

	/**
	 * @schema PostgresqlSpecTolerations#effect
	 */
	readonly effect: PostgresqlSpecTolerationsEffect;

	/**
	 * @schema PostgresqlSpecTolerations#tolerationSeconds
	 */
	readonly tolerationSeconds?: number;
}

/**
 * @schema PostgresqlSpecUsers
 */
export enum PostgresqlSpecUsers {
	/** bypassrls */
	/** BYPASSRLS */
	BYPASSRLS = "BYPASSRLS",
	/** nobypassrls */
	/** NOBYPASSRLS */
	NOBYPASSRLS = "NOBYPASSRLS",
	/** createdb */
	/** CREATEDB */
	CREATEDB = "CREATEDB",
	/** nocreatedb */
	/** NOCREATEDB */
	NOCREATEDB = "NOCREATEDB",
	/** createrole */
	/** CREATEROLE */
	CREATEROLE = "CREATEROLE",
	/** nocreaterole */
	/** NOCREATEROLE */
	NOCREATEROLE = "NOCREATEROLE",
	/** inherit */
	/** INHERIT */
	INHERIT = "INHERIT",
	/** noinherit */
	/** NOINHERIT */
	NOINHERIT = "NOINHERIT",
	/** login */
	/** LOGIN */
	LOGIN = "LOGIN",
	/** nologin */
	/** NOLOGIN */
	NOLOGIN = "NOLOGIN",
	/** replication */
	/** REPLICATION */
	REPLICATION = "REPLICATION",
	/** noreplication */
	/** NOREPLICATION */
	NOREPLICATION = "NOREPLICATION",
	/** superuser */
	/** SUPERUSER */
	SUPERUSER = "SUPERUSER",
	/** nosuperuser */
	/** NOSUPERUSER */
	NOSUPERUSER = "NOSUPERUSER",
}

/**
 * @schema PostgresqlSpecVolume
 */
export interface PostgresqlSpecVolume {
	/**
	 * @schema PostgresqlSpecVolume#iops
	 */
	readonly iops?: number;

	/**
	 * @schema PostgresqlSpecVolume#size
	 */
	readonly size: string;

	/**
	 * @schema PostgresqlSpecVolume#storageClass
	 */
	readonly storageClass?: string;

	/**
	 * @schema PostgresqlSpecVolume#subPath
	 */
	readonly subPath?: string;

	/**
	 * @schema PostgresqlSpecVolume#throughput
	 */
	readonly throughput?: number;
}

/**
 * @schema PostgresqlSpecConnectionPoolerMode
 */
export enum PostgresqlSpecConnectionPoolerMode {
	/** session */
	SESSION = "session",
	/** transaction */
	TRANSACTION = "transaction",
}

/**
 * @schema PostgresqlSpecConnectionPoolerResources
 */
export interface PostgresqlSpecConnectionPoolerResources {
	/**
	 * @schema PostgresqlSpecConnectionPoolerResources#limits
	 */
	readonly limits: PostgresqlSpecConnectionPoolerResourcesLimits;

	/**
	 * @schema PostgresqlSpecConnectionPoolerResources#requests
	 */
	readonly requests: PostgresqlSpecConnectionPoolerResourcesRequests;
}

/**
 * @schema PostgresqlSpecPostgresqlVersion
 */
export enum PostgresqlSpecPostgresqlVersion {
	/** 9.3 */
	"9_3" = "9.3",
	/** 9.4 */
	"9_4" = "9.4",
	/** 9.5 */
	"9_5" = "9.5",
	/** 9.6 */
	"9_6" = "9.6",
	/** 10 */
	"010" = "10",
	/** 11 */
	"011" = "11",
	/** 12 */
	"012" = "12",
	/** 13 */
	"013" = "13",
}

/**
 * @schema PostgresqlSpecPreparedDatabasesSchemas
 */
export interface PostgresqlSpecPreparedDatabasesSchemas {
	/**
	 * @schema PostgresqlSpecPreparedDatabasesSchemas#defaultUsers
	 */
	readonly defaultUsers?: boolean;

	/**
	 * @schema PostgresqlSpecPreparedDatabasesSchemas#defaultRoles
	 */
	readonly defaultRoles?: boolean;
}

/**
 * @schema PostgresqlSpecResourcesLimits
 */
export interface PostgresqlSpecResourcesLimits {
	/**
	 * @schema PostgresqlSpecResourcesLimits#cpu
	 */
	readonly cpu: string;

	/**
	 * @schema PostgresqlSpecResourcesLimits#memory
	 */
	readonly memory: string;
}

/**
 * @schema PostgresqlSpecResourcesRequests
 */
export interface PostgresqlSpecResourcesRequests {
	/**
	 * @schema PostgresqlSpecResourcesRequests#cpu
	 */
	readonly cpu: string;

	/**
	 * @schema PostgresqlSpecResourcesRequests#memory
	 */
	readonly memory: string;
}

/**
 * @schema PostgresqlSpecNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution
 */
export interface PostgresqlSpecNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution {
	/**
	 * @schema PostgresqlSpecNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution#preference
	 */
	readonly preference: PostgresqlSpecNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference;

	/**
	 * @schema PostgresqlSpecNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution#weight
	 */
	readonly weight: number;
}

/**
 * @schema PostgresqlSpecNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution
 */
export interface PostgresqlSpecNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution {
	/**
	 * @schema PostgresqlSpecNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution#nodeSelectorTerms
	 */
	readonly nodeSelectorTerms: PostgresqlSpecNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms[];
}

/**
 * @schema PostgresqlSpecTolerationsOperator
 */
export enum PostgresqlSpecTolerationsOperator {
	/** Equal */
	EQUAL = "Equal",
	/** Exists */
	EXISTS = "Exists",
}

/**
 * @schema PostgresqlSpecTolerationsEffect
 */
export enum PostgresqlSpecTolerationsEffect {
	/** NoExecute */
	NO_EXECUTE = "NoExecute",
	/** NoSchedule */
	NO_SCHEDULE = "NoSchedule",
	/** PreferNoSchedule */
	PREFER_NO_SCHEDULE = "PreferNoSchedule",
}

/**
 * @schema PostgresqlSpecConnectionPoolerResourcesLimits
 */
export interface PostgresqlSpecConnectionPoolerResourcesLimits {
	/**
	 * @schema PostgresqlSpecConnectionPoolerResourcesLimits#cpu
	 */
	readonly cpu: string;

	/**
	 * @schema PostgresqlSpecConnectionPoolerResourcesLimits#memory
	 */
	readonly memory: string;
}

/**
 * @schema PostgresqlSpecConnectionPoolerResourcesRequests
 */
export interface PostgresqlSpecConnectionPoolerResourcesRequests {
	/**
	 * @schema PostgresqlSpecConnectionPoolerResourcesRequests#cpu
	 */
	readonly cpu: string;

	/**
	 * @schema PostgresqlSpecConnectionPoolerResourcesRequests#memory
	 */
	readonly memory: string;
}

/**
 * @schema PostgresqlSpecNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference
 */
export interface PostgresqlSpecNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference {
	/**
	 * @schema PostgresqlSpecNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference#matchExpressions
	 */
	readonly matchExpressions?: PostgresqlSpecNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions[];

	/**
	 * @schema PostgresqlSpecNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference#matchFields
	 */
	readonly matchFields?: PostgresqlSpecNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields[];
}

/**
 * @schema PostgresqlSpecNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms
 */
export interface PostgresqlSpecNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms {
	/**
	 * @schema PostgresqlSpecNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms#matchExpressions
	 */
	readonly matchExpressions?: PostgresqlSpecNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions[];

	/**
	 * @schema PostgresqlSpecNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms#matchFields
	 */
	readonly matchFields?: PostgresqlSpecNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields[];
}

/**
 * @schema PostgresqlSpecNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions
 */
export interface PostgresqlSpecNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions {
	/**
	 * @schema PostgresqlSpecNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions#key
	 */
	readonly key: string;

	/**
	 * @schema PostgresqlSpecNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions#operator
	 */
	readonly operator: string;

	/**
	 * @schema PostgresqlSpecNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions#values
	 */
	readonly values?: string[];
}

/**
 * @schema PostgresqlSpecNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields
 */
export interface PostgresqlSpecNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields {
	/**
	 * @schema PostgresqlSpecNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields#key
	 */
	readonly key: string;

	/**
	 * @schema PostgresqlSpecNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields#operator
	 */
	readonly operator: string;

	/**
	 * @schema PostgresqlSpecNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields#values
	 */
	readonly values?: string[];
}

/**
 * @schema PostgresqlSpecNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions
 */
export interface PostgresqlSpecNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions {
	/**
	 * @schema PostgresqlSpecNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions#key
	 */
	readonly key: string;

	/**
	 * @schema PostgresqlSpecNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions#operator
	 */
	readonly operator: string;

	/**
	 * @schema PostgresqlSpecNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions#values
	 */
	readonly values?: string[];
}

/**
 * @schema PostgresqlSpecNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields
 */
export interface PostgresqlSpecNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields {
	/**
	 * @schema PostgresqlSpecNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields#key
	 */
	readonly key: string;

	/**
	 * @schema PostgresqlSpecNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields#operator
	 */
	readonly operator: string;

	/**
	 * @schema PostgresqlSpecNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields#values
	 */
	readonly values?: string[];
}

/**
 *
 *
 * @schema PostgresTeam
 */
export class PostgresTeam extends ApiObject {
	/**
	 * Returns the apiVersion and kind for "PostgresTeam"
	 */
	public static readonly GVK: GroupVersionKind = {
		apiVersion: "acid.zalan.do/v1",
		kind: "PostgresTeam",
	};

	/**
	 * Renders a Kubernetes manifest for "PostgresTeam".
	 *
	 * This can be used to inline resource manifests inside other objects (e.g. as templates).
	 *
	 * @param props initialization props
	 */
	public static manifest(props: PostgresTeamProps): any {
		return {
			...PostgresTeam.GVK,
			...props,
		};
	}

	/**
	 * Defines a "PostgresTeam" API object
	 * @param scope the scope in which to define this object
	 * @param id a scope-local name for the object
	 * @param props initialization props
	 */
	public constructor(scope: Construct, id: string, props: PostgresTeamProps) {
		super(scope, id, PostgresTeam.manifest(props));
	}
}

/**
 * @schema PostgresTeam
 */
export interface PostgresTeamProps {
	/**
	 * @schema PostgresTeam#spec
	 */
	readonly spec: PostgresTeamSpec;
}

/**
 * @schema PostgresTeamSpec
 */
export interface PostgresTeamSpec {
	/**
	 * Map for teamId and associated additional superuser teams
	 *
	 * @schema PostgresTeamSpec#additionalSuperuserTeams
	 */
	readonly additionalSuperuserTeams?: { [key: string]: string[] };

	/**
	 * Map for teamId and associated additional teams
	 *
	 * @schema PostgresTeamSpec#additionalTeams
	 */
	readonly additionalTeams?: { [key: string]: string[] };

	/**
	 * Map for teamId and associated additional users
	 *
	 * @schema PostgresTeamSpec#additionalMembers
	 */
	readonly additionalMembers?: { [key: string]: string[] };
}
