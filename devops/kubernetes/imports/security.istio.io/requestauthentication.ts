// generated by cdk8s
import { ApiObject } from 'cdk8s';
import { Construct } from 'constructs';

/**
 * 
 *
 * @schema RequestAuthentication
 */
export class RequestAuthentication extends ApiObject {
  /**
   * Defines a "RequestAuthentication" API object
   * @param scope the scope in which to define this object
   * @param name a scope-local name for the object
   * @param options configuration options
   */
  public constructor(scope: Construct, name: string, options: RequestAuthenticationOptions = {}) {
    super(scope, name, {
      ...options,
      kind: 'RequestAuthentication',
      apiVersion: 'security.istio.io/v1beta1',
    });
  }
}

/**
 * @schema RequestAuthentication
 */
export interface RequestAuthenticationOptions {
  /**
   * RequestAuthentication defines what request authentication methods are supported by a workload.
   *
   * @schema RequestAuthentication#spec
   */
  readonly spec?: RequestAuthenticationSpec;

}

/**
 * RequestAuthentication defines what request authentication methods are supported by a workload.
 *
 * @schema RequestAuthenticationSpec
 */
export interface RequestAuthenticationSpec {
  /**
   * Define the list of JWTs that can be validated at the selected workloads' proxy.
   *
   * @schema RequestAuthenticationSpec#jwtRules
   */
  readonly jwtRules?: RequestAuthenticationSpecJwtRules[];

  /**
   * The selector determines the workloads to apply the RequestAuthentication on.
   *
   * @schema RequestAuthenticationSpec#selector
   */
  readonly selector?: RequestAuthenticationSpecSelector;

}

/**
 * @schema RequestAuthenticationSpecJwtRules
 */
export interface RequestAuthenticationSpecJwtRules {
  /**
   * @schema RequestAuthenticationSpecJwtRules#audiences
   */
  readonly audiences?: string[];

  /**
   * If set to true, the orginal token will be kept for the ustream request.
   *
   * @schema RequestAuthenticationSpecJwtRules#forwardOriginalToken
   */
  readonly forwardOriginalToken?: boolean;

  /**
   * List of header locations from which JWT is expected.
   *
   * @schema RequestAuthenticationSpecJwtRules#fromHeaders
   */
  readonly fromHeaders?: RequestAuthenticationSpecJwtRulesFromHeaders[];

  /**
   * List of query parameters from which JWT is expected.
   *
   * @schema RequestAuthenticationSpecJwtRules#fromParams
   */
  readonly fromParams?: string[];

  /**
   * Identifies the issuer that issued the JWT.
   *
   * @schema RequestAuthenticationSpecJwtRules#issuer
   */
  readonly issuer?: string;

  /**
   * JSON Web Key Set of public keys to validate signature of the JWT.
   *
   * @schema RequestAuthenticationSpecJwtRules#jwks
   */
  readonly jwks?: string;

  /**
   * @schema RequestAuthenticationSpecJwtRules#jwksUri
   */
  readonly jwksUri?: string;

  /**
   * @schema RequestAuthenticationSpecJwtRules#outputPayloadToHeader
   */
  readonly outputPayloadToHeader?: string;

}

/**
 * The selector determines the workloads to apply the RequestAuthentication on.
 *
 * @schema RequestAuthenticationSpecSelector
 */
export interface RequestAuthenticationSpecSelector {
  /**
   * @schema RequestAuthenticationSpecSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

}

/**
 * @schema RequestAuthenticationSpecJwtRulesFromHeaders
 */
export interface RequestAuthenticationSpecJwtRulesFromHeaders {
  /**
   * The HTTP header name.
   *
   * @schema RequestAuthenticationSpecJwtRulesFromHeaders#name
   */
  readonly name?: string;

  /**
   * The prefix that should be stripped before decoding the token.
   *
   * @schema RequestAuthenticationSpecJwtRulesFromHeaders#prefix
   */
  readonly prefix?: string;

}

