// generated by cdk8s
import { ApiObject } from 'cdk8s';
import { Construct } from 'constructs';

/**
 * CertificateRequest is a type to represent a Certificate Signing Request
 *
 * @schema CertificateRequest
 */
export class CertificateRequest extends ApiObject {
  /**
   * Defines a "CertificateRequest" API object
   * @param scope the scope in which to define this object
   * @param name a scope-local name for the object
   * @param options configuration options
   */
  public constructor(scope: Construct, name: string, options: CertificateRequestOptions = {}) {
    super(scope, name, {
      ...options,
      kind: 'CertificateRequest',
      apiVersion: 'cert-manager.io/v1alpha2',
    });
  }
}

/**
 * CertificateRequest is a type to represent a Certificate Signing Request
 *
 * @schema CertificateRequest
 */
export interface CertificateRequestOptions {
  /**
   * @schema CertificateRequest#metadata
   */
  readonly metadata?: any;

  /**
   * CertificateRequestSpec defines the desired state of CertificateRequest
   *
   * @schema CertificateRequest#spec
   */
  readonly spec?: CertificateRequestSpec;

}

/**
 * CertificateRequestSpec defines the desired state of CertificateRequest
 *
 * @schema CertificateRequestSpec
 */
export interface CertificateRequestSpec {
  /**
   * Byte slice containing the PEM encoded CertificateSigningRequest
   *
   * @schema CertificateRequestSpec#csr
   */
  readonly csr: string;

  /**
   * Requested certificate default Duration
   *
   * @schema CertificateRequestSpec#duration
   */
  readonly duration?: string;

  /**
   * IsCA will mark the resulting certificate as valid for signing. This implies that the 'cert sign' usage is set
   *
   * @schema CertificateRequestSpec#isCA
   */
  readonly isCA?: boolean;

  /**
   * IssuerRef is a reference to the issuer for this CertificateRequest.  If the 'kind' field is not set, or set to 'Issuer', an Issuer resource with the given name in the same namespace as the CertificateRequest will be used.  If the 'kind' field is set to 'ClusterIssuer', a ClusterIssuer with the provided name will be used. The 'name' field in this stanza is required at all times. The group field refers to the API group of the issuer which defaults to 'cert-manager.io' if empty.
   *
   * @schema CertificateRequestSpec#issuerRef
   */
  readonly issuerRef: CertificateRequestSpecIssuerRef;

  /**
   * Usages is the set of x509 actions that are enabled for a given key. Defaults are ('digital signature', 'key encipherment') if empty
   *
   * @schema CertificateRequestSpec#usages
   */
  readonly usages?: CertificateRequestSpecUsages[];

}

/**
 * IssuerRef is a reference to the issuer for this CertificateRequest.  If the 'kind' field is not set, or set to 'Issuer', an Issuer resource with the given name in the same namespace as the CertificateRequest will be used.  If the 'kind' field is set to 'ClusterIssuer', a ClusterIssuer with the provided name will be used. The 'name' field in this stanza is required at all times. The group field refers to the API group of the issuer which defaults to 'cert-manager.io' if empty.
 *
 * @schema CertificateRequestSpecIssuerRef
 */
export interface CertificateRequestSpecIssuerRef {
  /**
   * @schema CertificateRequestSpecIssuerRef#group
   */
  readonly group?: string;

  /**
   * @schema CertificateRequestSpecIssuerRef#kind
   */
  readonly kind?: string;

  /**
   * @schema CertificateRequestSpecIssuerRef#name
   */
  readonly name: string;

}

/**
 * KeyUsage specifies valid usage contexts for keys. See: https://tools.ietf.org/html/rfc5280#section-4.2.1.3      https://tools.ietf.org/html/rfc5280#section-4.2.1.12 Valid KeyUsage values are as follows: "signing", "digital signature", "content commitment", "key encipherment", "key agreement", "data encipherment", "cert sign", "crl sign", "encipher only", "decipher only", "any", "server auth", "client auth", "code signing", "email protection", "s/mime", "ipsec end system", "ipsec tunnel", "ipsec user", "timestamping", "ocsp signing", "microsoft sgc", "netscape sgc"
 *
 * @schema CertificateRequestSpecUsages
 */
export enum CertificateRequestSpecUsages {
  /** signing */
  SIGNING = "signing",
  /** digital signature */
  DIGITAL_SIGNATURE = "digital signature",
  /** content commitment */
  CONTENT_COMMITMENT = "content commitment",
  /** key encipherment */
  KEY_ENCIPHERMENT = "key encipherment",
  /** key agreement */
  KEY_AGREEMENT = "key agreement",
  /** data encipherment */
  DATA_ENCIPHERMENT = "data encipherment",
  /** cert sign */
  CERT_SIGN = "cert sign",
  /** crl sign */
  CRL_SIGN = "crl sign",
  /** encipher only */
  ENCIPHER_ONLY = "encipher only",
  /** decipher only */
  DECIPHER_ONLY = "decipher only",
  /** any */
  ANY = "any",
  /** server auth */
  SERVER_AUTH = "server auth",
  /** client auth */
  CLIENT_AUTH = "client auth",
  /** code signing */
  CODE_SIGNING = "code signing",
  /** email protection */
  EMAIL_PROTECTION = "email protection",
  /** s/mime */
  S_MIME = "s/mime",
  /** ipsec end system */
  IPSEC_END_SYSTEM = "ipsec end system",
  /** ipsec tunnel */
  IPSEC_TUNNEL = "ipsec tunnel",
  /** ipsec user */
  IPSEC_USER = "ipsec user",
  /** timestamping */
  TIMESTAMPING = "timestamping",
  /** ocsp signing */
  OCSP_SIGNING = "ocsp signing",
  /** microsoft sgc */
  MICROSOFT_SGC = "microsoft sgc",
  /** netscape sgc */
  NETSCAPE_SGC = "netscape sgc",
}

