// generated by cdk8s
import { ApiObject } from 'cdk8s';
import { Construct } from 'constructs';

/**
 * 
 *
 * @schema handler
 */
export class handler extends ApiObject {
  /**
   * Defines a "handler" API object
   * @param scope the scope in which to define this object
   * @param name a scope-local name for the object
   * @param options configuration options
   */
  public constructor(scope: Construct, name: string, options: handlerOptions = {}) {
    super(scope, name, {
      ...options,
      kind: 'handler',
      apiVersion: 'config.istio.io/v1alpha2',
    });
  }
}

/**
 * @schema handler
 */
export interface handlerOptions {
  /**
   * Handler allows the operator to configure a specific adapter implementation.
   *
   * @schema handler#spec
   */
  readonly spec?: HandlerSpec;

}

/**
 * Handler allows the operator to configure a specific adapter implementation.
 *
 * @schema HandlerSpec
 */
export interface HandlerSpec {
  /**
   * The name of a specific adapter implementation.
   *
   * @schema HandlerSpec#adapter
   */
  readonly adapter?: string;

  /**
   * The name of the compiled in adapter this handler instantiates.
   *
   * @schema HandlerSpec#compiledAdapter
   */
  readonly compiledAdapter?: string;

  /**
   * Information on how to connect to the out-of-process adapter.
   *
   * @schema HandlerSpec#connection
   */
  readonly connection?: HandlerSpecConnection;

  /**
   * Must be unique in the entire Mixer configuration.
   *
   * @schema HandlerSpec#name
   */
  readonly name?: string;

  /**
   * Depends on adapter implementation.
   *
   * @schema HandlerSpec#params
   */
  readonly params?: any;

}

/**
 * Information on how to connect to the out-of-process adapter.
 *
 * @schema HandlerSpecConnection
 */
export interface HandlerSpecConnection {
  /**
   * The address of the backend.
   *
   * @schema HandlerSpecConnection#address
   */
  readonly address?: string;

  /**
   * Auth config for the connection to the backend.
   *
   * @schema HandlerSpecConnection#authentication
   */
  readonly authentication?: HandlerSpecConnectionAuthentication;

  /**
   * Timeout for remote calls to the backend.
   *
   * @schema HandlerSpecConnection#timeout
   */
  readonly timeout?: string;

}

/**
 * Auth config for the connection to the backend.
 *
 * @schema HandlerSpecConnectionAuthentication
 */
export interface HandlerSpecConnectionAuthentication {
  /**
   * @schema HandlerSpecConnectionAuthentication#mutual
   */
  readonly mutual?: HandlerSpecConnectionAuthenticationMutual;

  /**
   * @schema HandlerSpecConnectionAuthentication#tls
   */
  readonly tls?: HandlerSpecConnectionAuthenticationTls;

}

/**
 * @schema HandlerSpecConnectionAuthenticationMutual
 */
export interface HandlerSpecConnectionAuthenticationMutual {
  /**
   * @schema HandlerSpecConnectionAuthenticationMutual#caCertificates
   */
  readonly caCertificates?: string;

  /**
   * The path to the file holding client certificate for mutual TLS.
   *
   * @schema HandlerSpecConnectionAuthenticationMutual#clientCertificate
   */
  readonly clientCertificate?: string;

  /**
   * The path to the file holding the private key for mutual TLS.
   *
   * @schema HandlerSpecConnectionAuthenticationMutual#privateKey
   */
  readonly privateKey?: string;

  /**
   * Used to configure mixer mutual TLS client to supply server name for SNI.
   *
   * @schema HandlerSpecConnectionAuthenticationMutual#serverName
   */
  readonly serverName?: string;

}

/**
 * @schema HandlerSpecConnectionAuthenticationTls
 */
export interface HandlerSpecConnectionAuthenticationTls {
  /**
   * Access token is passed as authorization header.
   *
   * @schema HandlerSpecConnectionAuthenticationTls#authHeader
   */
  readonly authHeader?: HandlerSpecConnectionAuthenticationTlsAuthHeader;

  /**
   * @schema HandlerSpecConnectionAuthenticationTls#caCertificates
   */
  readonly caCertificates?: string;

  /**
   * Customized header key to hold access token, e.g.
   *
   * @schema HandlerSpecConnectionAuthenticationTls#customHeader
   */
  readonly customHeader?: string;

  /**
   * Oauth config to fetch access token from auth provider.
   *
   * @schema HandlerSpecConnectionAuthenticationTls#oauth
   */
  readonly oauth?: HandlerSpecConnectionAuthenticationTlsOauth;

  /**
   * @schema HandlerSpecConnectionAuthenticationTls#serverName
   */
  readonly serverName?: string;

  /**
   * @schema HandlerSpecConnectionAuthenticationTls#tokenPath
   */
  readonly tokenPath?: string;

}

/**
 * Access token is passed as authorization header.
 *
 * @schema HandlerSpecConnectionAuthenticationTlsAuthHeader
 */
export enum HandlerSpecConnectionAuthenticationTlsAuthHeader {
  /** PLAIN */
  PLAIN = "PLAIN",
  /** BEARER */
  BEARER = "BEARER",
}

/**
 * Oauth config to fetch access token from auth provider.
 *
 * @schema HandlerSpecConnectionAuthenticationTlsOauth
 */
export interface HandlerSpecConnectionAuthenticationTlsOauth {
  /**
   * OAuth client id for mixer.
   *
   * @schema HandlerSpecConnectionAuthenticationTlsOauth#clientId
   */
  readonly clientId?: string;

  /**
   * The path to the file holding the client secret for oauth.
   *
   * @schema HandlerSpecConnectionAuthenticationTlsOauth#clientSecret
   */
  readonly clientSecret?: string;

  /**
   * Additional parameters for requests to the token endpoint.
   *
   * @schema HandlerSpecConnectionAuthenticationTlsOauth#endpointParams
   */
  readonly endpointParams?: { [key: string]: string };

  /**
   * List of requested permissions.
   *
   * @schema HandlerSpecConnectionAuthenticationTlsOauth#scopes
   */
  readonly scopes?: string[];

  /**
   * The Resource server's token endpoint URL.
   *
   * @schema HandlerSpecConnectionAuthenticationTlsOauth#tokenUrl
   */
  readonly tokenUrl?: string;

}

