// generated by cdk8s
import { ApiObject } from 'cdk8s';
import { Construct } from 'constructs';

/**
 * 
 *
 * @schema instance
 */
export class instance extends ApiObject {
  /**
   * Defines a "instance" API object
   * @param scope the scope in which to define this object
   * @param name a scope-local name for the object
   * @param options configuration options
   */
  public constructor(scope: Construct, name: string, options: instanceOptions = {}) {
    super(scope, name, {
      ...options,
      kind: 'instance',
      apiVersion: 'config.istio.io/v1alpha2',
    });
  }
}

/**
 * @schema instance
 */
export interface instanceOptions {
  /**
   * An Instance tells Mixer how to create instances for particular template.
   *
   * @schema instance#spec
   */
  readonly spec?: InstanceSpec;

}

/**
 * An Instance tells Mixer how to create instances for particular template.
 *
 * @schema InstanceSpec
 */
export interface InstanceSpec {
  /**
   * @schema InstanceSpec#attributeBindings
   */
  readonly attributeBindings?: { [key: string]: string };

  /**
   * The name of the compiled in template this instance creates instances for.
   *
   * @schema InstanceSpec#compiledTemplate
   */
  readonly compiledTemplate?: string;

  /**
   * @schema InstanceSpec#name
   */
  readonly name?: string;

  /**
   * Depends on referenced template.
   *
   * @schema InstanceSpec#params
   */
  readonly params?: any;

  /**
   * The name of the template this instance creates instances for.
   *
   * @schema InstanceSpec#template
   */
  readonly template?: string;

}

