// generated by cdk8s
import { ApiObject, GroupVersionKind } from 'cdk8s';
import { Construct } from 'constructs';

/**
 * A Certificate resource should be created to ensure an up to date and signed x509 certificate is stored in the Kubernetes Secret resource named in `spec.secretName`. 
 The stored certificate will be renewed before it expires (as configured by `spec.renewBefore`).
 *
 * @schema Certificate
 */
export class Certificate extends ApiObject {
  /**
   * Returns the apiVersion and kind for "Certificate"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'cert-manager.io/v1alpha2',
    kind: 'Certificate',
  }

  /**
   * Renders a Kubernetes manifest for "Certificate".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: CertificateProps = {}): any {
    return {
      ...Certificate.GVK,
      ...props,
    };
  }

  /**
   * Defines a "Certificate" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: CertificateProps = {}) {
    super(scope, id, Certificate.manifest(props));
  }
}

/**
 * A Certificate resource should be created to ensure an up to date and signed x509 certificate is stored in the Kubernetes Secret resource named in `spec.secretName`. 
 The stored certificate will be renewed before it expires (as configured by `spec.renewBefore`).
 *
 * @schema Certificate
 */
export interface CertificateProps {
  /**
   * @schema Certificate#metadata
   */
  readonly metadata?: any;

  /**
   * Desired state of the Certificate resource.
   *
   * @schema Certificate#spec
   */
  readonly spec?: CertificateSpec;

}

/**
 * Desired state of the Certificate resource.
 *
 * @schema CertificateSpec
 */
export interface CertificateSpec {
  /**
   * CommonName is a common name to be used on the Certificate. The CommonName should have a length of 64 characters or fewer to avoid generating invalid CSRs. This value is ignored by TLS clients when any subject alt name is set. This is x509 behaviour: https://tools.ietf.org/html/rfc6125#section-6.4.4
   *
   * @schema CertificateSpec#commonName
   */
  readonly commonName?: string;

  /**
   * DNSNames is a list of DNS subjectAltNames to be set on the Certificate.
   *
   * @schema CertificateSpec#dnsNames
   */
  readonly dnsNames?: string[];

  /**
   * The requested 'duration' (i.e. lifetime) of the Certificate. This option may be ignored/overridden by some issuer types. If overridden and `renewBefore` is greater than the actual certificate duration, the certificate will be automatically renewed 2/3rds of the way through the certificate's duration.
   *
   * @schema CertificateSpec#duration
   */
  readonly duration?: string;

  /**
   * EmailSANs is a list of email subjectAltNames to be set on the Certificate.
   *
   * @schema CertificateSpec#emailSANs
   */
  readonly emailSANs?: string[];

  /**
   * EncodeUsagesInRequest controls whether key usages should be present in the CertificateRequest
   *
   * @schema CertificateSpec#encodeUsagesInRequest
   */
  readonly encodeUsagesInRequest?: boolean;

  /**
   * IPAddresses is a list of IP address subjectAltNames to be set on the Certificate.
   *
   * @schema CertificateSpec#ipAddresses
   */
  readonly ipAddresses?: string[];

  /**
   * IsCA will mark this Certificate as valid for certificate signing. This will automatically add the `cert sign` usage to the list of `usages`.
   *
   * @schema CertificateSpec#isCA
   */
  readonly isCA?: boolean;

  /**
   * IssuerRef is a reference to the issuer for this certificate. If the 'kind' field is not set, or set to 'Issuer', an Issuer resource with the given name in the same namespace as the Certificate will be used. If the 'kind' field is set to 'ClusterIssuer', a ClusterIssuer with the provided name will be used. The 'name' field in this stanza is required at all times.
   *
   * @schema CertificateSpec#issuerRef
   */
  readonly issuerRef: CertificateSpecIssuerRef;

  /**
   * KeyAlgorithm is the private key algorithm of the corresponding private key for this certificate. If provided, allowed values are either "rsa" or "ecdsa" If `keyAlgorithm` is specified and `keySize` is not provided, key size of 256 will be used for "ecdsa" key algorithm and key size of 2048 will be used for "rsa" key algorithm.
   *
   * @schema CertificateSpec#keyAlgorithm
   */
  readonly keyAlgorithm?: CertificateSpecKeyAlgorithm;

  /**
   * KeyEncoding is the private key cryptography standards (PKCS) for this certificate's private key to be encoded in. If provided, allowed values are "pkcs1" and "pkcs8" standing for PKCS#1 and PKCS#8, respectively. If KeyEncoding is not specified, then PKCS#1 will be used by default.
   *
   * @schema CertificateSpec#keyEncoding
   */
  readonly keyEncoding?: CertificateSpecKeyEncoding;

  /**
   * KeySize is the key bit size of the corresponding private key for this certificate. If `keyAlgorithm` is set to `RSA`, valid values are `2048`, `4096` or `8192`, and will default to `2048` if not specified. If `keyAlgorithm` is set to `ECDSA`, valid values are `256`, `384` or `521`, and will default to `256` if not specified. No other values are allowed.
   *
   * @schema CertificateSpec#keySize
   */
  readonly keySize?: number;

  /**
   * Keystores configures additional keystore output formats stored in the `secretName` Secret resource.
   *
   * @schema CertificateSpec#keystores
   */
  readonly keystores?: CertificateSpecKeystores;

  /**
   * Organization is a list of organizations to be used on the Certificate.
   *
   * @schema CertificateSpec#organization
   */
  readonly organization?: string[];

  /**
   * Options to control private keys used for the Certificate.
   *
   * @schema CertificateSpec#privateKey
   */
  readonly privateKey?: CertificateSpecPrivateKey;

  /**
   * The amount of time before the currently issued certificate's `notAfter` time that cert-manager will begin to attempt to renew the certificate. If this value is greater than the total duration of the certificate (i.e. notAfter - notBefore), it will be automatically renewed 2/3rds of the way through the certificate's duration.
   *
   * @schema CertificateSpec#renewBefore
   */
  readonly renewBefore?: string;

  /**
   * SecretName is the name of the secret resource that will be automatically created and managed by this Certificate resource. It will be populated with a private key and certificate, signed by the denoted issuer.
   *
   * @schema CertificateSpec#secretName
   */
  readonly secretName: string;

  /**
   * Full X509 name specification (https://golang.org/pkg/crypto/x509/pkix/#Name).
   *
   * @schema CertificateSpec#subject
   */
  readonly subject?: CertificateSpecSubject;

  /**
   * URISANs is a list of URI subjectAltNames to be set on the Certificate.
   *
   * @schema CertificateSpec#uriSANs
   */
  readonly uriSANs?: string[];

  /**
   * Usages is the set of x509 usages that are requested for the certificate. Defaults to `digital signature` and `key encipherment` if not specified.
   *
   * @default digital signature` and `key encipherment` if not specified.
   * @schema CertificateSpec#usages
   */
  readonly usages?: CertificateSpecUsages[];

}

/**
 * IssuerRef is a reference to the issuer for this certificate. If the 'kind' field is not set, or set to 'Issuer', an Issuer resource with the given name in the same namespace as the Certificate will be used. If the 'kind' field is set to 'ClusterIssuer', a ClusterIssuer with the provided name will be used. The 'name' field in this stanza is required at all times.
 *
 * @schema CertificateSpecIssuerRef
 */
export interface CertificateSpecIssuerRef {
  /**
   * Group of the resource being referred to.
   *
   * @schema CertificateSpecIssuerRef#group
   */
  readonly group?: string;

  /**
   * Kind of the resource being referred to.
   *
   * @schema CertificateSpecIssuerRef#kind
   */
  readonly kind?: string;

  /**
   * Name of the resource being referred to.
   *
   * @schema CertificateSpecIssuerRef#name
   */
  readonly name: string;

}

/**
 * KeyAlgorithm is the private key algorithm of the corresponding private key for this certificate. If provided, allowed values are either "rsa" or "ecdsa" If `keyAlgorithm` is specified and `keySize` is not provided, key size of 256 will be used for "ecdsa" key algorithm and key size of 2048 will be used for "rsa" key algorithm.
 *
 * @schema CertificateSpecKeyAlgorithm
 */
export enum CertificateSpecKeyAlgorithm {
  /** rsa */
  RSA = "rsa",
  /** ecdsa */
  ECDSA = "ecdsa",
}

/**
 * KeyEncoding is the private key cryptography standards (PKCS) for this certificate's private key to be encoded in. If provided, allowed values are "pkcs1" and "pkcs8" standing for PKCS#1 and PKCS#8, respectively. If KeyEncoding is not specified, then PKCS#1 will be used by default.
 *
 * @schema CertificateSpecKeyEncoding
 */
export enum CertificateSpecKeyEncoding {
  /** pkcs1 */
  PKCS1 = "pkcs1",
  /** pkcs8 */
  PKCS8 = "pkcs8",
}

/**
 * Keystores configures additional keystore output formats stored in the `secretName` Secret resource.
 *
 * @schema CertificateSpecKeystores
 */
export interface CertificateSpecKeystores {
  /**
   * JKS configures options for storing a JKS keystore in the `spec.secretName` Secret resource.
   *
   * @schema CertificateSpecKeystores#jks
   */
  readonly jks?: CertificateSpecKeystoresJks;

  /**
   * PKCS12 configures options for storing a PKCS12 keystore in the `spec.secretName` Secret resource.
   *
   * @schema CertificateSpecKeystores#pkcs12
   */
  readonly pkcs12?: CertificateSpecKeystoresPkcs12;

}

/**
 * Options to control private keys used for the Certificate.
 *
 * @schema CertificateSpecPrivateKey
 */
export interface CertificateSpecPrivateKey {
  /**
   * RotationPolicy controls how private keys should be regenerated when a re-issuance is being processed. If set to Never, a private key will only be generated if one does not already exist in the target `spec.secretName`. If one does exists but it does not have the correct algorithm or size, a warning will be raised to await user intervention. If set to Always, a private key matching the specified requirements will be generated whenever a re-issuance occurs. Default is 'Never' for backward compatibility.
   *
   * @default Never' for backward compatibility.
   * @schema CertificateSpecPrivateKey#rotationPolicy
   */
  readonly rotationPolicy?: string;

}

/**
 * Full X509 name specification (https://golang.org/pkg/crypto/x509/pkix/#Name).
 *
 * @schema CertificateSpecSubject
 */
export interface CertificateSpecSubject {
  /**
   * Countries to be used on the Certificate.
   *
   * @schema CertificateSpecSubject#countries
   */
  readonly countries?: string[];

  /**
   * Cities to be used on the Certificate.
   *
   * @schema CertificateSpecSubject#localities
   */
  readonly localities?: string[];

  /**
   * Organizational Units to be used on the Certificate.
   *
   * @schema CertificateSpecSubject#organizationalUnits
   */
  readonly organizationalUnits?: string[];

  /**
   * Postal codes to be used on the Certificate.
   *
   * @schema CertificateSpecSubject#postalCodes
   */
  readonly postalCodes?: string[];

  /**
   * State/Provinces to be used on the Certificate.
   *
   * @schema CertificateSpecSubject#provinces
   */
  readonly provinces?: string[];

  /**
   * Serial number to be used on the Certificate.
   *
   * @schema CertificateSpecSubject#serialNumber
   */
  readonly serialNumber?: string;

  /**
   * Street addresses to be used on the Certificate.
   *
   * @schema CertificateSpecSubject#streetAddresses
   */
  readonly streetAddresses?: string[];

}

/**
 * KeyUsage specifies valid usage contexts for keys. See: https://tools.ietf.org/html/rfc5280#section-4.2.1.3      https://tools.ietf.org/html/rfc5280#section-4.2.1.12 Valid KeyUsage values are as follows: "signing", "digital signature", "content commitment", "key encipherment", "key agreement", "data encipherment", "cert sign", "crl sign", "encipher only", "decipher only", "any", "server auth", "client auth", "code signing", "email protection", "s/mime", "ipsec end system", "ipsec tunnel", "ipsec user", "timestamping", "ocsp signing", "microsoft sgc", "netscape sgc"
 *
 * @schema CertificateSpecUsages
 */
export enum CertificateSpecUsages {
  /** signing */
  SIGNING = "signing",
  /** digital signature */
  DIGITAL_SIGNATURE = "digital signature",
  /** content commitment */
  CONTENT_COMMITMENT = "content commitment",
  /** key encipherment */
  KEY_ENCIPHERMENT = "key encipherment",
  /** key agreement */
  KEY_AGREEMENT = "key agreement",
  /** data encipherment */
  DATA_ENCIPHERMENT = "data encipherment",
  /** cert sign */
  CERT_SIGN = "cert sign",
  /** crl sign */
  CRL_SIGN = "crl sign",
  /** encipher only */
  ENCIPHER_ONLY = "encipher only",
  /** decipher only */
  DECIPHER_ONLY = "decipher only",
  /** any */
  ANY = "any",
  /** server auth */
  SERVER_AUTH = "server auth",
  /** client auth */
  CLIENT_AUTH = "client auth",
  /** code signing */
  CODE_SIGNING = "code signing",
  /** email protection */
  EMAIL_PROTECTION = "email protection",
  /** s/mime */
  S_MIME = "s/mime",
  /** ipsec end system */
  IPSEC_END_SYSTEM = "ipsec end system",
  /** ipsec tunnel */
  IPSEC_TUNNEL = "ipsec tunnel",
  /** ipsec user */
  IPSEC_USER = "ipsec user",
  /** timestamping */
  TIMESTAMPING = "timestamping",
  /** ocsp signing */
  OCSP_SIGNING = "ocsp signing",
  /** microsoft sgc */
  MICROSOFT_SGC = "microsoft sgc",
  /** netscape sgc */
  NETSCAPE_SGC = "netscape sgc",
}

/**
 * JKS configures options for storing a JKS keystore in the `spec.secretName` Secret resource.
 *
 * @schema CertificateSpecKeystoresJks
 */
export interface CertificateSpecKeystoresJks {
  /**
   * Create enables JKS keystore creation for the Certificate. If true, a file named `keystore.jks` will be created in the target Secret resource, encrypted using the password stored in `passwordSecretRef`. The keystore file will only be updated upon re-issuance.
   *
   * @schema CertificateSpecKeystoresJks#create
   */
  readonly create: boolean;

  /**
   * PasswordSecretRef is a reference to a key in a Secret resource containing the password used to encrypt the JKS keystore.
   *
   * @schema CertificateSpecKeystoresJks#passwordSecretRef
   */
  readonly passwordSecretRef: CertificateSpecKeystoresJksPasswordSecretRef;

}

/**
 * PKCS12 configures options for storing a PKCS12 keystore in the `spec.secretName` Secret resource.
 *
 * @schema CertificateSpecKeystoresPkcs12
 */
export interface CertificateSpecKeystoresPkcs12 {
  /**
   * Create enables PKCS12 keystore creation for the Certificate. If true, a file named `keystore.p12` will be created in the target Secret resource, encrypted using the password stored in `passwordSecretRef`. The keystore file will only be updated upon re-issuance.
   *
   * @schema CertificateSpecKeystoresPkcs12#create
   */
  readonly create: boolean;

  /**
   * PasswordSecretRef is a reference to a key in a Secret resource containing the password used to encrypt the PKCS12 keystore.
   *
   * @schema CertificateSpecKeystoresPkcs12#passwordSecretRef
   */
  readonly passwordSecretRef: CertificateSpecKeystoresPkcs12PasswordSecretRef;

}

/**
 * PasswordSecretRef is a reference to a key in a Secret resource containing the password used to encrypt the JKS keystore.
 *
 * @schema CertificateSpecKeystoresJksPasswordSecretRef
 */
export interface CertificateSpecKeystoresJksPasswordSecretRef {
  /**
   * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
   *
   * @schema CertificateSpecKeystoresJksPasswordSecretRef#key
   */
  readonly key?: string;

  /**
   * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema CertificateSpecKeystoresJksPasswordSecretRef#name
   */
  readonly name: string;

}

/**
 * PasswordSecretRef is a reference to a key in a Secret resource containing the password used to encrypt the PKCS12 keystore.
 *
 * @schema CertificateSpecKeystoresPkcs12PasswordSecretRef
 */
export interface CertificateSpecKeystoresPkcs12PasswordSecretRef {
  /**
   * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
   *
   * @schema CertificateSpecKeystoresPkcs12PasswordSecretRef#key
   */
  readonly key?: string;

  /**
   * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema CertificateSpecKeystoresPkcs12PasswordSecretRef#name
   */
  readonly name: string;

}

/**
 * A CertificateRequest is used to request a signed certificate from one of the configured issuers. 
 All fields within the CertificateRequest's `spec` are immutable after creation. A CertificateRequest will either succeed or fail, as denoted by its `status.state` field. 
 A CertificateRequest is a 'one-shot' resource, meaning it represents a single point in time request for a certificate and cannot be re-used.
 *
 * @schema CertificateRequest
 */
export class CertificateRequest extends ApiObject {
  /**
   * Returns the apiVersion and kind for "CertificateRequest"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'cert-manager.io/v1alpha2',
    kind: 'CertificateRequest',
  }

  /**
   * Renders a Kubernetes manifest for "CertificateRequest".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: CertificateRequestProps = {}): any {
    return {
      ...CertificateRequest.GVK,
      ...props,
    };
  }

  /**
   * Defines a "CertificateRequest" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: CertificateRequestProps = {}) {
    super(scope, id, CertificateRequest.manifest(props));
  }
}

/**
 * A CertificateRequest is used to request a signed certificate from one of the configured issuers. 
 All fields within the CertificateRequest's `spec` are immutable after creation. A CertificateRequest will either succeed or fail, as denoted by its `status.state` field. 
 A CertificateRequest is a 'one-shot' resource, meaning it represents a single point in time request for a certificate and cannot be re-used.
 *
 * @schema CertificateRequest
 */
export interface CertificateRequestProps {
  /**
   * @schema CertificateRequest#metadata
   */
  readonly metadata?: any;

  /**
   * Desired state of the CertificateRequest resource.
   *
   * @schema CertificateRequest#spec
   */
  readonly spec?: CertificateRequestSpec;

}

/**
 * Desired state of the CertificateRequest resource.
 *
 * @schema CertificateRequestSpec
 */
export interface CertificateRequestSpec {
  /**
   * The PEM-encoded x509 certificate signing request to be submitted to the CA for signing.
   *
   * @schema CertificateRequestSpec#csr
   */
  readonly csr: string;

  /**
   * The requested 'duration' (i.e. lifetime) of the Certificate. This option may be ignored/overridden by some issuer types.
   *
   * @schema CertificateRequestSpec#duration
   */
  readonly duration?: string;

  /**
   * IsCA will request to mark the certificate as valid for certificate signing when submitting to the issuer. This will automatically add the `cert sign` usage to the list of `usages`.
   *
   * @schema CertificateRequestSpec#isCA
   */
  readonly isCA?: boolean;

  /**
   * IssuerRef is a reference to the issuer for this CertificateRequest.  If the 'kind' field is not set, or set to 'Issuer', an Issuer resource with the given name in the same namespace as the CertificateRequest will be used.  If the 'kind' field is set to 'ClusterIssuer', a ClusterIssuer with the provided name will be used. The 'name' field in this stanza is required at all times. The group field refers to the API group of the issuer which defaults to 'cert-manager.io' if empty.
   *
   * @schema CertificateRequestSpec#issuerRef
   */
  readonly issuerRef: CertificateRequestSpecIssuerRef;

  /**
   * Usages is the set of x509 usages that are requested for the certificate. Defaults to `digital signature` and `key encipherment` if not specified.
   *
   * @default digital signature` and `key encipherment` if not specified.
   * @schema CertificateRequestSpec#usages
   */
  readonly usages?: CertificateRequestSpecUsages[];

}

/**
 * IssuerRef is a reference to the issuer for this CertificateRequest.  If the 'kind' field is not set, or set to 'Issuer', an Issuer resource with the given name in the same namespace as the CertificateRequest will be used.  If the 'kind' field is set to 'ClusterIssuer', a ClusterIssuer with the provided name will be used. The 'name' field in this stanza is required at all times. The group field refers to the API group of the issuer which defaults to 'cert-manager.io' if empty.
 *
 * @schema CertificateRequestSpecIssuerRef
 */
export interface CertificateRequestSpecIssuerRef {
  /**
   * Group of the resource being referred to.
   *
   * @schema CertificateRequestSpecIssuerRef#group
   */
  readonly group?: string;

  /**
   * Kind of the resource being referred to.
   *
   * @schema CertificateRequestSpecIssuerRef#kind
   */
  readonly kind?: string;

  /**
   * Name of the resource being referred to.
   *
   * @schema CertificateRequestSpecIssuerRef#name
   */
  readonly name: string;

}

/**
 * KeyUsage specifies valid usage contexts for keys. See: https://tools.ietf.org/html/rfc5280#section-4.2.1.3      https://tools.ietf.org/html/rfc5280#section-4.2.1.12 Valid KeyUsage values are as follows: "signing", "digital signature", "content commitment", "key encipherment", "key agreement", "data encipherment", "cert sign", "crl sign", "encipher only", "decipher only", "any", "server auth", "client auth", "code signing", "email protection", "s/mime", "ipsec end system", "ipsec tunnel", "ipsec user", "timestamping", "ocsp signing", "microsoft sgc", "netscape sgc"
 *
 * @schema CertificateRequestSpecUsages
 */
export enum CertificateRequestSpecUsages {
  /** signing */
  SIGNING = "signing",
  /** digital signature */
  DIGITAL_SIGNATURE = "digital signature",
  /** content commitment */
  CONTENT_COMMITMENT = "content commitment",
  /** key encipherment */
  KEY_ENCIPHERMENT = "key encipherment",
  /** key agreement */
  KEY_AGREEMENT = "key agreement",
  /** data encipherment */
  DATA_ENCIPHERMENT = "data encipherment",
  /** cert sign */
  CERT_SIGN = "cert sign",
  /** crl sign */
  CRL_SIGN = "crl sign",
  /** encipher only */
  ENCIPHER_ONLY = "encipher only",
  /** decipher only */
  DECIPHER_ONLY = "decipher only",
  /** any */
  ANY = "any",
  /** server auth */
  SERVER_AUTH = "server auth",
  /** client auth */
  CLIENT_AUTH = "client auth",
  /** code signing */
  CODE_SIGNING = "code signing",
  /** email protection */
  EMAIL_PROTECTION = "email protection",
  /** s/mime */
  S_MIME = "s/mime",
  /** ipsec end system */
  IPSEC_END_SYSTEM = "ipsec end system",
  /** ipsec tunnel */
  IPSEC_TUNNEL = "ipsec tunnel",
  /** ipsec user */
  IPSEC_USER = "ipsec user",
  /** timestamping */
  TIMESTAMPING = "timestamping",
  /** ocsp signing */
  OCSP_SIGNING = "ocsp signing",
  /** microsoft sgc */
  MICROSOFT_SGC = "microsoft sgc",
  /** netscape sgc */
  NETSCAPE_SGC = "netscape sgc",
}

/**
 * A ClusterIssuer represents a certificate issuing authority which can be referenced as part of `issuerRef` fields. It is similar to an Issuer, however it is cluster-scoped and therefore can be referenced by resources that exist in *any* namespace, not just the same namespace as the referent.
 *
 * @schema ClusterIssuer
 */
export class ClusterIssuer extends ApiObject {
  /**
   * Returns the apiVersion and kind for "ClusterIssuer"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'cert-manager.io/v1alpha2',
    kind: 'ClusterIssuer',
  }

  /**
   * Renders a Kubernetes manifest for "ClusterIssuer".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: ClusterIssuerProps = {}): any {
    return {
      ...ClusterIssuer.GVK,
      ...props,
    };
  }

  /**
   * Defines a "ClusterIssuer" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: ClusterIssuerProps = {}) {
    super(scope, id, ClusterIssuer.manifest(props));
  }
}

/**
 * A ClusterIssuer represents a certificate issuing authority which can be referenced as part of `issuerRef` fields. It is similar to an Issuer, however it is cluster-scoped and therefore can be referenced by resources that exist in *any* namespace, not just the same namespace as the referent.
 *
 * @schema ClusterIssuer
 */
export interface ClusterIssuerProps {
  /**
   * @schema ClusterIssuer#metadata
   */
  readonly metadata?: any;

  /**
   * Desired state of the ClusterIssuer resource.
   *
   * @schema ClusterIssuer#spec
   */
  readonly spec?: ClusterIssuerSpec;

}

/**
 * Desired state of the ClusterIssuer resource.
 *
 * @schema ClusterIssuerSpec
 */
export interface ClusterIssuerSpec {
  /**
   * ACME configures this issuer to communicate with a RFC8555 (ACME) server to obtain signed x509 certificates.
   *
   * @schema ClusterIssuerSpec#acme
   */
  readonly acme?: ClusterIssuerSpecAcme;

  /**
   * CA configures this issuer to sign certificates using a signing CA keypair stored in a Secret resource. This is used to build internal PKIs that are managed by cert-manager.
   *
   * @schema ClusterIssuerSpec#ca
   */
  readonly ca?: ClusterIssuerSpecCa;

  /**
   * SelfSigned configures this issuer to 'self sign' certificates using the private key used to create the CertificateRequest object.
   *
   * @schema ClusterIssuerSpec#selfSigned
   */
  readonly selfSigned?: ClusterIssuerSpecSelfSigned;

  /**
   * Vault configures this issuer to sign certificates using a HashiCorp Vault PKI backend.
   *
   * @schema ClusterIssuerSpec#vault
   */
  readonly vault?: ClusterIssuerSpecVault;

  /**
   * Venafi configures this issuer to sign certificates using a Venafi TPP or Venafi Cloud policy zone.
   *
   * @schema ClusterIssuerSpec#venafi
   */
  readonly venafi?: ClusterIssuerSpecVenafi;

}

/**
 * ACME configures this issuer to communicate with a RFC8555 (ACME) server to obtain signed x509 certificates.
 *
 * @schema ClusterIssuerSpecAcme
 */
export interface ClusterIssuerSpecAcme {
  /**
   * Enables or disables generating a new ACME account key. If true, the Issuer resource will *not* request a new account but will expect the account key to be supplied via an existing secret. If false, the cert-manager system will generate a new ACME account key for the Issuer. Defaults to false.
   *
   * @default false.
   * @schema ClusterIssuerSpecAcme#disableAccountKeyGeneration
   */
  readonly disableAccountKeyGeneration?: boolean;

  /**
   * Email is the email address to be associated with the ACME account. This field is optional, but it is strongly recommended to be set. It will be used to contact you in case of issues with your account or certificates, including expiry notification emails. This field may be updated after the account is initially registered.
   *
   * @schema ClusterIssuerSpecAcme#email
   */
  readonly email?: string;

  /**
   * Enables requesting a Not After date on certificates that matches the duration of the certificate. This is not supported by all ACME servers like Let's Encrypt. If set to true when the ACME server does not support it it will create an error on the Order. Defaults to false.
   *
   * @default false.
   * @schema ClusterIssuerSpecAcme#enableDurationFeature
   */
  readonly enableDurationFeature?: boolean;

  /**
   * ExternalAccountBinding is a reference to a CA external account of the ACME server. If set, upon registration cert-manager will attempt to associate the given external account credentials with the registered ACME account.
   *
   * @schema ClusterIssuerSpecAcme#externalAccountBinding
   */
  readonly externalAccountBinding?: ClusterIssuerSpecAcmeExternalAccountBinding;

  /**
   * PreferredChain is the chain to use if the ACME server outputs multiple. PreferredChain is no guarantee that this one gets delivered by the ACME endpoint. For example, for Let's Encrypt's DST crosssign you would use: "DST Root CA X3" or "ISRG Root X1" for the newer Let's Encrypt root CA. This value picks the first certificate bundle in the ACME alternative chains that has a certificate with this value as its issuer's CN
   *
   * @schema ClusterIssuerSpecAcme#preferredChain
   */
  readonly preferredChain?: string;

  /**
   * PrivateKey is the name of a Kubernetes Secret resource that will be used to store the automatically generated ACME account private key. Optionally, a `key` may be specified to select a specific entry within the named Secret resource. If `key` is not specified, a default of `tls.key` will be used.
   *
   * @schema ClusterIssuerSpecAcme#privateKeySecretRef
   */
  readonly privateKeySecretRef: ClusterIssuerSpecAcmePrivateKeySecretRef;

  /**
   * Server is the URL used to access the ACME server's 'directory' endpoint. For example, for Let's Encrypt's staging endpoint, you would use: "https://acme-staging-v02.api.letsencrypt.org/directory". Only ACME v2 endpoints (i.e. RFC 8555) are supported.
   *
   * @schema ClusterIssuerSpecAcme#server
   */
  readonly server: string;

  /**
   * Enables or disables validation of the ACME server TLS certificate. If true, requests to the ACME server will not have their TLS certificate validated (i.e. insecure connections will be allowed). Only enable this option in development environments. The cert-manager system installed roots will be used to verify connections to the ACME server if this is false. Defaults to false.
   *
   * @default false.
   * @schema ClusterIssuerSpecAcme#skipTLSVerify
   */
  readonly skipTLSVerify?: boolean;

  /**
   * Solvers is a list of challenge solvers that will be used to solve ACME challenges for the matching domains. Solver configurations must be provided in order to obtain certificates from an ACME server. For more information, see: https://cert-manager.io/docs/configuration/acme/
   *
   * @schema ClusterIssuerSpecAcme#solvers
   */
  readonly solvers?: ClusterIssuerSpecAcmeSolvers[];

}

/**
 * CA configures this issuer to sign certificates using a signing CA keypair stored in a Secret resource. This is used to build internal PKIs that are managed by cert-manager.
 *
 * @schema ClusterIssuerSpecCa
 */
export interface ClusterIssuerSpecCa {
  /**
   * The CRL distribution points is an X.509 v3 certificate extension which identifies the location of the CRL from which the revocation of this certificate can be checked. If not set, certificates will be issued without distribution points set.
   *
   * @schema ClusterIssuerSpecCa#crlDistributionPoints
   */
  readonly crlDistributionPoints?: string[];

  /**
   * SecretName is the name of the secret used to sign Certificates issued by this Issuer.
   *
   * @schema ClusterIssuerSpecCa#secretName
   */
  readonly secretName: string;

}

/**
 * SelfSigned configures this issuer to 'self sign' certificates using the private key used to create the CertificateRequest object.
 *
 * @schema ClusterIssuerSpecSelfSigned
 */
export interface ClusterIssuerSpecSelfSigned {
  /**
   * The CRL distribution points is an X.509 v3 certificate extension which identifies the location of the CRL from which the revocation of this certificate can be checked. If not set certificate will be issued without CDP. Values are strings.
   *
   * @schema ClusterIssuerSpecSelfSigned#crlDistributionPoints
   */
  readonly crlDistributionPoints?: string[];

}

/**
 * Vault configures this issuer to sign certificates using a HashiCorp Vault PKI backend.
 *
 * @schema ClusterIssuerSpecVault
 */
export interface ClusterIssuerSpecVault {
  /**
   * Auth configures how cert-manager authenticates with the Vault server.
   *
   * @schema ClusterIssuerSpecVault#auth
   */
  readonly auth: ClusterIssuerSpecVaultAuth;

  /**
   * PEM encoded CA bundle used to validate Vault server certificate. Only used if the Server URL is using HTTPS protocol. This parameter is ignored for plain HTTP protocol connection. If not set the system root certificates are used to validate the TLS connection.
   *
   * @schema ClusterIssuerSpecVault#caBundle
   */
  readonly caBundle?: string;

  /**
   * Name of the vault namespace. Namespaces is a set of features within Vault Enterprise that allows Vault environments to support Secure Multi-tenancy. e.g: "ns1" More about namespaces can be found here https://www.vaultproject.io/docs/enterprise/namespaces
   *
   * @schema ClusterIssuerSpecVault#namespace
   */
  readonly namespace?: string;

  /**
   * Path is the mount path of the Vault PKI backend's `sign` endpoint, e.g: "my_pki_mount/sign/my-role-name".
   *
   * @schema ClusterIssuerSpecVault#path
   */
  readonly path: string;

  /**
   * Server is the connection address for the Vault server, e.g: "https://vault.example.com:8200".
   *
   * @schema ClusterIssuerSpecVault#server
   */
  readonly server: string;

}

/**
 * Venafi configures this issuer to sign certificates using a Venafi TPP or Venafi Cloud policy zone.
 *
 * @schema ClusterIssuerSpecVenafi
 */
export interface ClusterIssuerSpecVenafi {
  /**
   * Cloud specifies the Venafi cloud configuration settings. Only one of TPP or Cloud may be specified.
   *
   * @schema ClusterIssuerSpecVenafi#cloud
   */
  readonly cloud?: ClusterIssuerSpecVenafiCloud;

  /**
   * TPP specifies Trust Protection Platform configuration settings. Only one of TPP or Cloud may be specified.
   *
   * @schema ClusterIssuerSpecVenafi#tpp
   */
  readonly tpp?: ClusterIssuerSpecVenafiTpp;

  /**
   * Zone is the Venafi Policy Zone to use for this issuer. All requests made to the Venafi platform will be restricted by the named zone policy. This field is required.
   *
   * @schema ClusterIssuerSpecVenafi#zone
   */
  readonly zone: string;

}

/**
 * ExternalAccountBinding is a reference to a CA external account of the ACME server. If set, upon registration cert-manager will attempt to associate the given external account credentials with the registered ACME account.
 *
 * @schema ClusterIssuerSpecAcmeExternalAccountBinding
 */
export interface ClusterIssuerSpecAcmeExternalAccountBinding {
  /**
   * keyAlgorithm is the MAC key algorithm that the key is used for. Valid values are "HS256", "HS384" and "HS512".
   *
   * @schema ClusterIssuerSpecAcmeExternalAccountBinding#keyAlgorithm
   */
  readonly keyAlgorithm: ClusterIssuerSpecAcmeExternalAccountBindingKeyAlgorithm;

  /**
   * keyID is the ID of the CA key that the External Account is bound to.
   *
   * @schema ClusterIssuerSpecAcmeExternalAccountBinding#keyID
   */
  readonly keyID: string;

  /**
   * keySecretRef is a Secret Key Selector referencing a data item in a Kubernetes Secret which holds the symmetric MAC key of the External Account Binding. The `key` is the index string that is paired with the key data in the Secret and should not be confused with the key data itself, or indeed with the External Account Binding keyID above. The secret key stored in the Secret **must** be un-padded, base64 URL encoded data.
   *
   * @schema ClusterIssuerSpecAcmeExternalAccountBinding#keySecretRef
   */
  readonly keySecretRef: ClusterIssuerSpecAcmeExternalAccountBindingKeySecretRef;

}

/**
 * PrivateKey is the name of a Kubernetes Secret resource that will be used to store the automatically generated ACME account private key. Optionally, a `key` may be specified to select a specific entry within the named Secret resource. If `key` is not specified, a default of `tls.key` will be used.
 *
 * @schema ClusterIssuerSpecAcmePrivateKeySecretRef
 */
export interface ClusterIssuerSpecAcmePrivateKeySecretRef {
  /**
   * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
   *
   * @schema ClusterIssuerSpecAcmePrivateKeySecretRef#key
   */
  readonly key?: string;

  /**
   * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema ClusterIssuerSpecAcmePrivateKeySecretRef#name
   */
  readonly name: string;

}

/**
 * Configures an issuer to solve challenges using the specified options. Only one of HTTP01 or DNS01 may be provided.
 *
 * @schema ClusterIssuerSpecAcmeSolvers
 */
export interface ClusterIssuerSpecAcmeSolvers {
  /**
   * Configures cert-manager to attempt to complete authorizations by performing the DNS01 challenge flow.
   *
   * @schema ClusterIssuerSpecAcmeSolvers#dns01
   */
  readonly dns01?: ClusterIssuerSpecAcmeSolversDns01;

  /**
   * Configures cert-manager to attempt to complete authorizations by performing the HTTP01 challenge flow. It is not possible to obtain certificates for wildcard domain names (e.g. `*.example.com`) using the HTTP01 challenge mechanism.
   *
   * @schema ClusterIssuerSpecAcmeSolvers#http01
   */
  readonly http01?: ClusterIssuerSpecAcmeSolversHttp01;

  /**
   * Selector selects a set of DNSNames on the Certificate resource that should be solved using this challenge solver. If not specified, the solver will be treated as the 'default' solver with the lowest priority, i.e. if any other solver has a more specific match, it will be used instead.
   *
   * @schema ClusterIssuerSpecAcmeSolvers#selector
   */
  readonly selector?: ClusterIssuerSpecAcmeSolversSelector;

}

/**
 * Auth configures how cert-manager authenticates with the Vault server.
 *
 * @schema ClusterIssuerSpecVaultAuth
 */
export interface ClusterIssuerSpecVaultAuth {
  /**
   * AppRole authenticates with Vault using the App Role auth mechanism, with the role and secret stored in a Kubernetes Secret resource.
   *
   * @schema ClusterIssuerSpecVaultAuth#appRole
   */
  readonly appRole?: ClusterIssuerSpecVaultAuthAppRole;

  /**
   * Kubernetes authenticates with Vault by passing the ServiceAccount token stored in the named Secret resource to the Vault server.
   *
   * @schema ClusterIssuerSpecVaultAuth#kubernetes
   */
  readonly kubernetes?: ClusterIssuerSpecVaultAuthKubernetes;

  /**
   * TokenSecretRef authenticates with Vault by presenting a token.
   *
   * @schema ClusterIssuerSpecVaultAuth#tokenSecretRef
   */
  readonly tokenSecretRef?: ClusterIssuerSpecVaultAuthTokenSecretRef;

}

/**
 * Cloud specifies the Venafi cloud configuration settings. Only one of TPP or Cloud may be specified.
 *
 * @schema ClusterIssuerSpecVenafiCloud
 */
export interface ClusterIssuerSpecVenafiCloud {
  /**
   * APITokenSecretRef is a secret key selector for the Venafi Cloud API token.
   *
   * @schema ClusterIssuerSpecVenafiCloud#apiTokenSecretRef
   */
  readonly apiTokenSecretRef: ClusterIssuerSpecVenafiCloudApiTokenSecretRef;

  /**
   * URL is the base URL for Venafi Cloud. Defaults to "https://api.venafi.cloud/v1".
   *
   * @default https://api.venafi.cloud/v1".
   * @schema ClusterIssuerSpecVenafiCloud#url
   */
  readonly url?: string;

}

/**
 * TPP specifies Trust Protection Platform configuration settings. Only one of TPP or Cloud may be specified.
 *
 * @schema ClusterIssuerSpecVenafiTpp
 */
export interface ClusterIssuerSpecVenafiTpp {
  /**
   * CABundle is a PEM encoded TLS certificate to use to verify connections to the TPP instance. If specified, system roots will not be used and the issuing CA for the TPP instance must be verifiable using the provided root. If not specified, the connection will be verified using the cert-manager system root certificates.
   *
   * @schema ClusterIssuerSpecVenafiTpp#caBundle
   */
  readonly caBundle?: string;

  /**
   * CredentialsRef is a reference to a Secret containing the username and password for the TPP server. The secret must contain two keys, 'username' and 'password'.
   *
   * @schema ClusterIssuerSpecVenafiTpp#credentialsRef
   */
  readonly credentialsRef: ClusterIssuerSpecVenafiTppCredentialsRef;

  /**
   * URL is the base URL for the vedsdk endpoint of the Venafi TPP instance, for example: "https://tpp.example.com/vedsdk".
   *
   * @schema ClusterIssuerSpecVenafiTpp#url
   */
  readonly url: string;

}

/**
 * keyAlgorithm is the MAC key algorithm that the key is used for. Valid values are "HS256", "HS384" and "HS512".
 *
 * @schema ClusterIssuerSpecAcmeExternalAccountBindingKeyAlgorithm
 */
export enum ClusterIssuerSpecAcmeExternalAccountBindingKeyAlgorithm {
  /** HS256 */
  HS256 = "HS256",
  /** HS384 */
  HS384 = "HS384",
  /** HS512 */
  HS512 = "HS512",
}

/**
 * keySecretRef is a Secret Key Selector referencing a data item in a Kubernetes Secret which holds the symmetric MAC key of the External Account Binding. The `key` is the index string that is paired with the key data in the Secret and should not be confused with the key data itself, or indeed with the External Account Binding keyID above. The secret key stored in the Secret **must** be un-padded, base64 URL encoded data.
 *
 * @schema ClusterIssuerSpecAcmeExternalAccountBindingKeySecretRef
 */
export interface ClusterIssuerSpecAcmeExternalAccountBindingKeySecretRef {
  /**
   * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
   *
   * @schema ClusterIssuerSpecAcmeExternalAccountBindingKeySecretRef#key
   */
  readonly key?: string;

  /**
   * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema ClusterIssuerSpecAcmeExternalAccountBindingKeySecretRef#name
   */
  readonly name: string;

}

/**
 * Configures cert-manager to attempt to complete authorizations by performing the DNS01 challenge flow.
 *
 * @schema ClusterIssuerSpecAcmeSolversDns01
 */
export interface ClusterIssuerSpecAcmeSolversDns01 {
  /**
   * Use the 'ACME DNS' (https://github.com/joohoi/acme-dns) API to manage DNS01 challenge records.
   *
   * @schema ClusterIssuerSpecAcmeSolversDns01#acmedns
   */
  readonly acmedns?: ClusterIssuerSpecAcmeSolversDns01Acmedns;

  /**
   * Use the Akamai DNS zone management API to manage DNS01 challenge records.
   *
   * @schema ClusterIssuerSpecAcmeSolversDns01#akamai
   */
  readonly akamai?: ClusterIssuerSpecAcmeSolversDns01Akamai;

  /**
   * Use the Microsoft Azure DNS API to manage DNS01 challenge records.
   *
   * @schema ClusterIssuerSpecAcmeSolversDns01#azuredns
   */
  readonly azuredns?: ClusterIssuerSpecAcmeSolversDns01Azuredns;

  /**
   * Use the Google Cloud DNS API to manage DNS01 challenge records.
   *
   * @schema ClusterIssuerSpecAcmeSolversDns01#clouddns
   */
  readonly clouddns?: ClusterIssuerSpecAcmeSolversDns01Clouddns;

  /**
   * Use the Cloudflare API to manage DNS01 challenge records.
   *
   * @schema ClusterIssuerSpecAcmeSolversDns01#cloudflare
   */
  readonly cloudflare?: ClusterIssuerSpecAcmeSolversDns01Cloudflare;

  /**
   * CNAMEStrategy configures how the DNS01 provider should handle CNAME records when found in DNS zones.
   *
   * @schema ClusterIssuerSpecAcmeSolversDns01#cnameStrategy
   */
  readonly cnameStrategy?: ClusterIssuerSpecAcmeSolversDns01CnameStrategy;

  /**
   * Use the DigitalOcean DNS API to manage DNS01 challenge records.
   *
   * @schema ClusterIssuerSpecAcmeSolversDns01#digitalocean
   */
  readonly digitalocean?: ClusterIssuerSpecAcmeSolversDns01Digitalocean;

  /**
   * Use RFC2136 ("Dynamic Updates in the Domain Name System") (https://datatracker.ietf.org/doc/rfc2136/) to manage DNS01 challenge records.
   *
   * @schema ClusterIssuerSpecAcmeSolversDns01#rfc2136
   */
  readonly rfc2136?: ClusterIssuerSpecAcmeSolversDns01Rfc2136;

  /**
   * Use the AWS Route53 API to manage DNS01 challenge records.
   *
   * @schema ClusterIssuerSpecAcmeSolversDns01#route53
   */
  readonly route53?: ClusterIssuerSpecAcmeSolversDns01Route53;

  /**
   * Configure an external webhook based DNS01 challenge solver to manage DNS01 challenge records.
   *
   * @schema ClusterIssuerSpecAcmeSolversDns01#webhook
   */
  readonly webhook?: ClusterIssuerSpecAcmeSolversDns01Webhook;

}

/**
 * Configures cert-manager to attempt to complete authorizations by performing the HTTP01 challenge flow. It is not possible to obtain certificates for wildcard domain names (e.g. `*.example.com`) using the HTTP01 challenge mechanism.
 *
 * @schema ClusterIssuerSpecAcmeSolversHttp01
 */
export interface ClusterIssuerSpecAcmeSolversHttp01 {
  /**
   * The ingress based HTTP01 challenge solver will solve challenges by creating or modifying Ingress resources in order to route requests for '/.well-known/acme-challenge/XYZ' to 'challenge solver' pods that are provisioned by cert-manager for each Challenge to be completed.
   *
   * @schema ClusterIssuerSpecAcmeSolversHttp01#ingress
   */
  readonly ingress?: ClusterIssuerSpecAcmeSolversHttp01Ingress;

}

/**
 * Selector selects a set of DNSNames on the Certificate resource that should be solved using this challenge solver. If not specified, the solver will be treated as the 'default' solver with the lowest priority, i.e. if any other solver has a more specific match, it will be used instead.
 *
 * @schema ClusterIssuerSpecAcmeSolversSelector
 */
export interface ClusterIssuerSpecAcmeSolversSelector {
  /**
   * List of DNSNames that this solver will be used to solve. If specified and a match is found, a dnsNames selector will take precedence over a dnsZones selector. If multiple solvers match with the same dnsNames value, the solver with the most matching labels in matchLabels will be selected. If neither has more matches, the solver defined earlier in the list will be selected.
   *
   * @schema ClusterIssuerSpecAcmeSolversSelector#dnsNames
   */
  readonly dnsNames?: string[];

  /**
   * List of DNSZones that this solver will be used to solve. The most specific DNS zone match specified here will take precedence over other DNS zone matches, so a solver specifying sys.example.com will be selected over one specifying example.com for the domain www.sys.example.com. If multiple solvers match with the same dnsZones value, the solver with the most matching labels in matchLabels will be selected. If neither has more matches, the solver defined earlier in the list will be selected.
   *
   * @schema ClusterIssuerSpecAcmeSolversSelector#dnsZones
   */
  readonly dnsZones?: string[];

  /**
   * A label selector that is used to refine the set of certificate's that this challenge solver will apply to.
   *
   * @schema ClusterIssuerSpecAcmeSolversSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

}

/**
 * AppRole authenticates with Vault using the App Role auth mechanism, with the role and secret stored in a Kubernetes Secret resource.
 *
 * @schema ClusterIssuerSpecVaultAuthAppRole
 */
export interface ClusterIssuerSpecVaultAuthAppRole {
  /**
   * Path where the App Role authentication backend is mounted in Vault, e.g: "approle"
   *
   * @schema ClusterIssuerSpecVaultAuthAppRole#path
   */
  readonly path: string;

  /**
   * RoleID configured in the App Role authentication backend when setting up the authentication backend in Vault.
   *
   * @schema ClusterIssuerSpecVaultAuthAppRole#roleId
   */
  readonly roleId: string;

  /**
   * Reference to a key in a Secret that contains the App Role secret used to authenticate with Vault. The `key` field must be specified and denotes which entry within the Secret resource is used as the app role secret.
   *
   * @schema ClusterIssuerSpecVaultAuthAppRole#secretRef
   */
  readonly secretRef: ClusterIssuerSpecVaultAuthAppRoleSecretRef;

}

/**
 * Kubernetes authenticates with Vault by passing the ServiceAccount token stored in the named Secret resource to the Vault server.
 *
 * @schema ClusterIssuerSpecVaultAuthKubernetes
 */
export interface ClusterIssuerSpecVaultAuthKubernetes {
  /**
   * The Vault mountPath here is the mount path to use when authenticating with Vault. For example, setting a value to `/v1/auth/foo`, will use the path `/v1/auth/foo/login` to authenticate with Vault. If unspecified, the default value "/v1/auth/kubernetes" will be used.
   *
   * @schema ClusterIssuerSpecVaultAuthKubernetes#mountPath
   */
  readonly mountPath?: string;

  /**
   * A required field containing the Vault Role to assume. A Role binds a Kubernetes ServiceAccount with a set of Vault policies.
   *
   * @schema ClusterIssuerSpecVaultAuthKubernetes#role
   */
  readonly role: string;

  /**
   * The required Secret field containing a Kubernetes ServiceAccount JWT used for authenticating with Vault. Use of 'ambient credentials' is not supported.
   *
   * @schema ClusterIssuerSpecVaultAuthKubernetes#secretRef
   */
  readonly secretRef: ClusterIssuerSpecVaultAuthKubernetesSecretRef;

}

/**
 * TokenSecretRef authenticates with Vault by presenting a token.
 *
 * @schema ClusterIssuerSpecVaultAuthTokenSecretRef
 */
export interface ClusterIssuerSpecVaultAuthTokenSecretRef {
  /**
   * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
   *
   * @schema ClusterIssuerSpecVaultAuthTokenSecretRef#key
   */
  readonly key?: string;

  /**
   * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema ClusterIssuerSpecVaultAuthTokenSecretRef#name
   */
  readonly name: string;

}

/**
 * APITokenSecretRef is a secret key selector for the Venafi Cloud API token.
 *
 * @schema ClusterIssuerSpecVenafiCloudApiTokenSecretRef
 */
export interface ClusterIssuerSpecVenafiCloudApiTokenSecretRef {
  /**
   * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
   *
   * @schema ClusterIssuerSpecVenafiCloudApiTokenSecretRef#key
   */
  readonly key?: string;

  /**
   * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema ClusterIssuerSpecVenafiCloudApiTokenSecretRef#name
   */
  readonly name: string;

}

/**
 * CredentialsRef is a reference to a Secret containing the username and password for the TPP server. The secret must contain two keys, 'username' and 'password'.
 *
 * @schema ClusterIssuerSpecVenafiTppCredentialsRef
 */
export interface ClusterIssuerSpecVenafiTppCredentialsRef {
  /**
   * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema ClusterIssuerSpecVenafiTppCredentialsRef#name
   */
  readonly name: string;

}

/**
 * Use the 'ACME DNS' (https://github.com/joohoi/acme-dns) API to manage DNS01 challenge records.
 *
 * @schema ClusterIssuerSpecAcmeSolversDns01Acmedns
 */
export interface ClusterIssuerSpecAcmeSolversDns01Acmedns {
  /**
   * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
   *
   * @schema ClusterIssuerSpecAcmeSolversDns01Acmedns#accountSecretRef
   */
  readonly accountSecretRef: ClusterIssuerSpecAcmeSolversDns01AcmednsAccountSecretRef;

  /**
   * @schema ClusterIssuerSpecAcmeSolversDns01Acmedns#host
   */
  readonly host: string;

}

/**
 * Use the Akamai DNS zone management API to manage DNS01 challenge records.
 *
 * @schema ClusterIssuerSpecAcmeSolversDns01Akamai
 */
export interface ClusterIssuerSpecAcmeSolversDns01Akamai {
  /**
   * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
   *
   * @schema ClusterIssuerSpecAcmeSolversDns01Akamai#accessTokenSecretRef
   */
  readonly accessTokenSecretRef: ClusterIssuerSpecAcmeSolversDns01AkamaiAccessTokenSecretRef;

  /**
   * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
   *
   * @schema ClusterIssuerSpecAcmeSolversDns01Akamai#clientSecretSecretRef
   */
  readonly clientSecretSecretRef: ClusterIssuerSpecAcmeSolversDns01AkamaiClientSecretSecretRef;

  /**
   * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
   *
   * @schema ClusterIssuerSpecAcmeSolversDns01Akamai#clientTokenSecretRef
   */
  readonly clientTokenSecretRef: ClusterIssuerSpecAcmeSolversDns01AkamaiClientTokenSecretRef;

  /**
   * @schema ClusterIssuerSpecAcmeSolversDns01Akamai#serviceConsumerDomain
   */
  readonly serviceConsumerDomain: string;

}

/**
 * Use the Microsoft Azure DNS API to manage DNS01 challenge records.
 *
 * @schema ClusterIssuerSpecAcmeSolversDns01Azuredns
 */
export interface ClusterIssuerSpecAcmeSolversDns01Azuredns {
  /**
   * if both this and ClientSecret are left unset MSI will be used
   *
   * @schema ClusterIssuerSpecAcmeSolversDns01Azuredns#clientID
   */
  readonly clientID?: string;

  /**
   * if both this and ClientID are left unset MSI will be used
   *
   * @schema ClusterIssuerSpecAcmeSolversDns01Azuredns#clientSecretSecretRef
   */
  readonly clientSecretSecretRef?: ClusterIssuerSpecAcmeSolversDns01AzurednsClientSecretSecretRef;

  /**
   * @schema ClusterIssuerSpecAcmeSolversDns01Azuredns#environment
   */
  readonly environment?: ClusterIssuerSpecAcmeSolversDns01AzurednsEnvironment;

  /**
   * @schema ClusterIssuerSpecAcmeSolversDns01Azuredns#hostedZoneName
   */
  readonly hostedZoneName?: string;

  /**
   * @schema ClusterIssuerSpecAcmeSolversDns01Azuredns#resourceGroupName
   */
  readonly resourceGroupName: string;

  /**
   * @schema ClusterIssuerSpecAcmeSolversDns01Azuredns#subscriptionID
   */
  readonly subscriptionID: string;

  /**
   * when specifying ClientID and ClientSecret then this field is also needed
   *
   * @schema ClusterIssuerSpecAcmeSolversDns01Azuredns#tenantID
   */
  readonly tenantID?: string;

}

/**
 * Use the Google Cloud DNS API to manage DNS01 challenge records.
 *
 * @schema ClusterIssuerSpecAcmeSolversDns01Clouddns
 */
export interface ClusterIssuerSpecAcmeSolversDns01Clouddns {
  /**
   * HostedZoneName is an optional field that tells cert-manager in which Cloud DNS zone the challenge record has to be created. If left empty cert-manager will automatically choose a zone.
   *
   * @schema ClusterIssuerSpecAcmeSolversDns01Clouddns#hostedZoneName
   */
  readonly hostedZoneName?: string;

  /**
   * @schema ClusterIssuerSpecAcmeSolversDns01Clouddns#project
   */
  readonly project: string;

  /**
   * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
   *
   * @schema ClusterIssuerSpecAcmeSolversDns01Clouddns#serviceAccountSecretRef
   */
  readonly serviceAccountSecretRef?: ClusterIssuerSpecAcmeSolversDns01ClouddnsServiceAccountSecretRef;

}

/**
 * Use the Cloudflare API to manage DNS01 challenge records.
 *
 * @schema ClusterIssuerSpecAcmeSolversDns01Cloudflare
 */
export interface ClusterIssuerSpecAcmeSolversDns01Cloudflare {
  /**
   * API key to use to authenticate with Cloudflare. Note: using an API token to authenticate is now the recommended method as it allows greater control of permissions.
   *
   * @schema ClusterIssuerSpecAcmeSolversDns01Cloudflare#apiKeySecretRef
   */
  readonly apiKeySecretRef?: ClusterIssuerSpecAcmeSolversDns01CloudflareApiKeySecretRef;

  /**
   * API token used to authenticate with Cloudflare.
   *
   * @schema ClusterIssuerSpecAcmeSolversDns01Cloudflare#apiTokenSecretRef
   */
  readonly apiTokenSecretRef?: ClusterIssuerSpecAcmeSolversDns01CloudflareApiTokenSecretRef;

  /**
   * Email of the account, only required when using API key based authentication.
   *
   * @schema ClusterIssuerSpecAcmeSolversDns01Cloudflare#email
   */
  readonly email?: string;

}

/**
 * CNAMEStrategy configures how the DNS01 provider should handle CNAME records when found in DNS zones.
 *
 * @schema ClusterIssuerSpecAcmeSolversDns01CnameStrategy
 */
export enum ClusterIssuerSpecAcmeSolversDns01CnameStrategy {
  /** None */
  NONE = "None",
  /** Follow */
  FOLLOW = "Follow",
}

/**
 * Use the DigitalOcean DNS API to manage DNS01 challenge records.
 *
 * @schema ClusterIssuerSpecAcmeSolversDns01Digitalocean
 */
export interface ClusterIssuerSpecAcmeSolversDns01Digitalocean {
  /**
   * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
   *
   * @schema ClusterIssuerSpecAcmeSolversDns01Digitalocean#tokenSecretRef
   */
  readonly tokenSecretRef: ClusterIssuerSpecAcmeSolversDns01DigitaloceanTokenSecretRef;

}

/**
 * Use RFC2136 ("Dynamic Updates in the Domain Name System") (https://datatracker.ietf.org/doc/rfc2136/) to manage DNS01 challenge records.
 *
 * @schema ClusterIssuerSpecAcmeSolversDns01Rfc2136
 */
export interface ClusterIssuerSpecAcmeSolversDns01Rfc2136 {
  /**
   * The IP address or hostname of an authoritative DNS server supporting RFC2136 in the form host:port. If the host is an IPv6 address it must be enclosed in square brackets (e.g [2001:db8::1]) ; port is optional. This field is required.
   *
   * @schema ClusterIssuerSpecAcmeSolversDns01Rfc2136#nameserver
   */
  readonly nameserver: string;

  /**
   * The TSIG Algorithm configured in the DNS supporting RFC2136. Used only when ``tsigSecretSecretRef`` and ``tsigKeyName`` are defined. Supported values are (case-insensitive): ``HMACMD5`` (default), ``HMACSHA1``, ``HMACSHA256`` or ``HMACSHA512``.
   *
   * @schema ClusterIssuerSpecAcmeSolversDns01Rfc2136#tsigAlgorithm
   */
  readonly tsigAlgorithm?: string;

  /**
   * The TSIG Key name configured in the DNS. If ``tsigSecretSecretRef`` is defined, this field is required.
   *
   * @schema ClusterIssuerSpecAcmeSolversDns01Rfc2136#tsigKeyName
   */
  readonly tsigKeyName?: string;

  /**
   * The name of the secret containing the TSIG value. If ``tsigKeyName`` is defined, this field is required.
   *
   * @schema ClusterIssuerSpecAcmeSolversDns01Rfc2136#tsigSecretSecretRef
   */
  readonly tsigSecretSecretRef?: ClusterIssuerSpecAcmeSolversDns01Rfc2136TsigSecretSecretRef;

}

/**
 * Use the AWS Route53 API to manage DNS01 challenge records.
 *
 * @schema ClusterIssuerSpecAcmeSolversDns01Route53
 */
export interface ClusterIssuerSpecAcmeSolversDns01Route53 {
  /**
   * The AccessKeyID is used for authentication. If not set we fall-back to using env vars, shared credentials file or AWS Instance metadata see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
   *
   * @schema ClusterIssuerSpecAcmeSolversDns01Route53#accessKeyID
   */
  readonly accessKeyID?: string;

  /**
   * If set, the provider will manage only this zone in Route53 and will not do an lookup using the route53:ListHostedZonesByName api call.
   *
   * @schema ClusterIssuerSpecAcmeSolversDns01Route53#hostedZoneID
   */
  readonly hostedZoneID?: string;

  /**
   * Always set the region when using AccessKeyID and SecretAccessKey
   *
   * @schema ClusterIssuerSpecAcmeSolversDns01Route53#region
   */
  readonly region: string;

  /**
   * Role is a Role ARN which the Route53 provider will assume using either the explicit credentials AccessKeyID/SecretAccessKey or the inferred credentials from environment variables, shared credentials file or AWS Instance metadata
   *
   * @schema ClusterIssuerSpecAcmeSolversDns01Route53#role
   */
  readonly role?: string;

  /**
   * The SecretAccessKey is used for authentication. If not set we fall-back to using env vars, shared credentials file or AWS Instance metadata https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
   *
   * @schema ClusterIssuerSpecAcmeSolversDns01Route53#secretAccessKeySecretRef
   */
  readonly secretAccessKeySecretRef?: ClusterIssuerSpecAcmeSolversDns01Route53SecretAccessKeySecretRef;

}

/**
 * Configure an external webhook based DNS01 challenge solver to manage DNS01 challenge records.
 *
 * @schema ClusterIssuerSpecAcmeSolversDns01Webhook
 */
export interface ClusterIssuerSpecAcmeSolversDns01Webhook {
  /**
   * Additional configuration that should be passed to the webhook apiserver when challenges are processed. This can contain arbitrary JSON data. Secret values should not be specified in this stanza. If secret values are needed (e.g. credentials for a DNS service), you should use a SecretKeySelector to reference a Secret resource. For details on the schema of this field, consult the webhook provider implementation's documentation.
   *
   * @schema ClusterIssuerSpecAcmeSolversDns01Webhook#config
   */
  readonly config?: any;

  /**
   * The API group name that should be used when POSTing ChallengePayload resources to the webhook apiserver. This should be the same as the GroupName specified in the webhook provider implementation.
   *
   * @schema ClusterIssuerSpecAcmeSolversDns01Webhook#groupName
   */
  readonly groupName: string;

  /**
   * The name of the solver to use, as defined in the webhook provider implementation. This will typically be the name of the provider, e.g. 'cloudflare'.
   *
   * @schema ClusterIssuerSpecAcmeSolversDns01Webhook#solverName
   */
  readonly solverName: string;

}

/**
 * The ingress based HTTP01 challenge solver will solve challenges by creating or modifying Ingress resources in order to route requests for '/.well-known/acme-challenge/XYZ' to 'challenge solver' pods that are provisioned by cert-manager for each Challenge to be completed.
 *
 * @schema ClusterIssuerSpecAcmeSolversHttp01Ingress
 */
export interface ClusterIssuerSpecAcmeSolversHttp01Ingress {
  /**
   * The ingress class to use when creating Ingress resources to solve ACME challenges that use this challenge solver. Only one of 'class' or 'name' may be specified.
   *
   * @schema ClusterIssuerSpecAcmeSolversHttp01Ingress#class
   */
  readonly class?: string;

  /**
   * Optional ingress template used to configure the ACME challenge solver ingress used for HTTP01 challenges
   *
   * @schema ClusterIssuerSpecAcmeSolversHttp01Ingress#ingressTemplate
   */
  readonly ingressTemplate?: ClusterIssuerSpecAcmeSolversHttp01IngressIngressTemplate;

  /**
   * The name of the ingress resource that should have ACME challenge solving routes inserted into it in order to solve HTTP01 challenges. This is typically used in conjunction with ingress controllers like ingress-gce, which maintains a 1:1 mapping between external IPs and ingress resources.
   *
   * @schema ClusterIssuerSpecAcmeSolversHttp01Ingress#name
   */
  readonly name?: string;

  /**
   * Optional pod template used to configure the ACME challenge solver pods used for HTTP01 challenges
   *
   * @schema ClusterIssuerSpecAcmeSolversHttp01Ingress#podTemplate
   */
  readonly podTemplate?: ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplate;

  /**
   * Optional service type for Kubernetes solver service
   *
   * @schema ClusterIssuerSpecAcmeSolversHttp01Ingress#serviceType
   */
  readonly serviceType?: string;

}

/**
 * Reference to a key in a Secret that contains the App Role secret used to authenticate with Vault. The `key` field must be specified and denotes which entry within the Secret resource is used as the app role secret.
 *
 * @schema ClusterIssuerSpecVaultAuthAppRoleSecretRef
 */
export interface ClusterIssuerSpecVaultAuthAppRoleSecretRef {
  /**
   * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
   *
   * @schema ClusterIssuerSpecVaultAuthAppRoleSecretRef#key
   */
  readonly key?: string;

  /**
   * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema ClusterIssuerSpecVaultAuthAppRoleSecretRef#name
   */
  readonly name: string;

}

/**
 * The required Secret field containing a Kubernetes ServiceAccount JWT used for authenticating with Vault. Use of 'ambient credentials' is not supported.
 *
 * @schema ClusterIssuerSpecVaultAuthKubernetesSecretRef
 */
export interface ClusterIssuerSpecVaultAuthKubernetesSecretRef {
  /**
   * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
   *
   * @schema ClusterIssuerSpecVaultAuthKubernetesSecretRef#key
   */
  readonly key?: string;

  /**
   * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema ClusterIssuerSpecVaultAuthKubernetesSecretRef#name
   */
  readonly name: string;

}

/**
 * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
 *
 * @schema ClusterIssuerSpecAcmeSolversDns01AcmednsAccountSecretRef
 */
export interface ClusterIssuerSpecAcmeSolversDns01AcmednsAccountSecretRef {
  /**
   * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
   *
   * @schema ClusterIssuerSpecAcmeSolversDns01AcmednsAccountSecretRef#key
   */
  readonly key?: string;

  /**
   * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema ClusterIssuerSpecAcmeSolversDns01AcmednsAccountSecretRef#name
   */
  readonly name: string;

}

/**
 * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
 *
 * @schema ClusterIssuerSpecAcmeSolversDns01AkamaiAccessTokenSecretRef
 */
export interface ClusterIssuerSpecAcmeSolversDns01AkamaiAccessTokenSecretRef {
  /**
   * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
   *
   * @schema ClusterIssuerSpecAcmeSolversDns01AkamaiAccessTokenSecretRef#key
   */
  readonly key?: string;

  /**
   * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema ClusterIssuerSpecAcmeSolversDns01AkamaiAccessTokenSecretRef#name
   */
  readonly name: string;

}

/**
 * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
 *
 * @schema ClusterIssuerSpecAcmeSolversDns01AkamaiClientSecretSecretRef
 */
export interface ClusterIssuerSpecAcmeSolversDns01AkamaiClientSecretSecretRef {
  /**
   * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
   *
   * @schema ClusterIssuerSpecAcmeSolversDns01AkamaiClientSecretSecretRef#key
   */
  readonly key?: string;

  /**
   * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema ClusterIssuerSpecAcmeSolversDns01AkamaiClientSecretSecretRef#name
   */
  readonly name: string;

}

/**
 * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
 *
 * @schema ClusterIssuerSpecAcmeSolversDns01AkamaiClientTokenSecretRef
 */
export interface ClusterIssuerSpecAcmeSolversDns01AkamaiClientTokenSecretRef {
  /**
   * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
   *
   * @schema ClusterIssuerSpecAcmeSolversDns01AkamaiClientTokenSecretRef#key
   */
  readonly key?: string;

  /**
   * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema ClusterIssuerSpecAcmeSolversDns01AkamaiClientTokenSecretRef#name
   */
  readonly name: string;

}

/**
 * if both this and ClientID are left unset MSI will be used
 *
 * @schema ClusterIssuerSpecAcmeSolversDns01AzurednsClientSecretSecretRef
 */
export interface ClusterIssuerSpecAcmeSolversDns01AzurednsClientSecretSecretRef {
  /**
   * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
   *
   * @schema ClusterIssuerSpecAcmeSolversDns01AzurednsClientSecretSecretRef#key
   */
  readonly key?: string;

  /**
   * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema ClusterIssuerSpecAcmeSolversDns01AzurednsClientSecretSecretRef#name
   */
  readonly name: string;

}

/**
 * @schema ClusterIssuerSpecAcmeSolversDns01AzurednsEnvironment
 */
export enum ClusterIssuerSpecAcmeSolversDns01AzurednsEnvironment {
  /** AzurePublicCloud */
  AZURE_PUBLIC_CLOUD = "AzurePublicCloud",
  /** AzureChinaCloud */
  AZURE_CHINA_CLOUD = "AzureChinaCloud",
  /** AzureGermanCloud */
  AZURE_GERMAN_CLOUD = "AzureGermanCloud",
  /** AzureUSGovernmentCloud */
  AZURE_US_GOVERNMENT_CLOUD = "AzureUSGovernmentCloud",
}

/**
 * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
 *
 * @schema ClusterIssuerSpecAcmeSolversDns01ClouddnsServiceAccountSecretRef
 */
export interface ClusterIssuerSpecAcmeSolversDns01ClouddnsServiceAccountSecretRef {
  /**
   * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
   *
   * @schema ClusterIssuerSpecAcmeSolversDns01ClouddnsServiceAccountSecretRef#key
   */
  readonly key?: string;

  /**
   * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema ClusterIssuerSpecAcmeSolversDns01ClouddnsServiceAccountSecretRef#name
   */
  readonly name: string;

}

/**
 * API key to use to authenticate with Cloudflare. Note: using an API token to authenticate is now the recommended method as it allows greater control of permissions.
 *
 * @schema ClusterIssuerSpecAcmeSolversDns01CloudflareApiKeySecretRef
 */
export interface ClusterIssuerSpecAcmeSolversDns01CloudflareApiKeySecretRef {
  /**
   * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
   *
   * @schema ClusterIssuerSpecAcmeSolversDns01CloudflareApiKeySecretRef#key
   */
  readonly key?: string;

  /**
   * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema ClusterIssuerSpecAcmeSolversDns01CloudflareApiKeySecretRef#name
   */
  readonly name: string;

}

/**
 * API token used to authenticate with Cloudflare.
 *
 * @schema ClusterIssuerSpecAcmeSolversDns01CloudflareApiTokenSecretRef
 */
export interface ClusterIssuerSpecAcmeSolversDns01CloudflareApiTokenSecretRef {
  /**
   * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
   *
   * @schema ClusterIssuerSpecAcmeSolversDns01CloudflareApiTokenSecretRef#key
   */
  readonly key?: string;

  /**
   * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema ClusterIssuerSpecAcmeSolversDns01CloudflareApiTokenSecretRef#name
   */
  readonly name: string;

}

/**
 * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
 *
 * @schema ClusterIssuerSpecAcmeSolversDns01DigitaloceanTokenSecretRef
 */
export interface ClusterIssuerSpecAcmeSolversDns01DigitaloceanTokenSecretRef {
  /**
   * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
   *
   * @schema ClusterIssuerSpecAcmeSolversDns01DigitaloceanTokenSecretRef#key
   */
  readonly key?: string;

  /**
   * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema ClusterIssuerSpecAcmeSolversDns01DigitaloceanTokenSecretRef#name
   */
  readonly name: string;

}

/**
 * The name of the secret containing the TSIG value. If ``tsigKeyName`` is defined, this field is required.
 *
 * @schema ClusterIssuerSpecAcmeSolversDns01Rfc2136TsigSecretSecretRef
 */
export interface ClusterIssuerSpecAcmeSolversDns01Rfc2136TsigSecretSecretRef {
  /**
   * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
   *
   * @schema ClusterIssuerSpecAcmeSolversDns01Rfc2136TsigSecretSecretRef#key
   */
  readonly key?: string;

  /**
   * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema ClusterIssuerSpecAcmeSolversDns01Rfc2136TsigSecretSecretRef#name
   */
  readonly name: string;

}

/**
 * The SecretAccessKey is used for authentication. If not set we fall-back to using env vars, shared credentials file or AWS Instance metadata https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
 *
 * @schema ClusterIssuerSpecAcmeSolversDns01Route53SecretAccessKeySecretRef
 */
export interface ClusterIssuerSpecAcmeSolversDns01Route53SecretAccessKeySecretRef {
  /**
   * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
   *
   * @schema ClusterIssuerSpecAcmeSolversDns01Route53SecretAccessKeySecretRef#key
   */
  readonly key?: string;

  /**
   * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema ClusterIssuerSpecAcmeSolversDns01Route53SecretAccessKeySecretRef#name
   */
  readonly name: string;

}

/**
 * Optional ingress template used to configure the ACME challenge solver ingress used for HTTP01 challenges
 *
 * @schema ClusterIssuerSpecAcmeSolversHttp01IngressIngressTemplate
 */
export interface ClusterIssuerSpecAcmeSolversHttp01IngressIngressTemplate {
  /**
   * ObjectMeta overrides for the ingress used to solve HTTP01 challenges. Only the 'labels' and 'annotations' fields may be set. If labels or annotations overlap with in-built values, the values here will override the in-built values.
   *
   * @schema ClusterIssuerSpecAcmeSolversHttp01IngressIngressTemplate#metadata
   */
  readonly metadata?: ClusterIssuerSpecAcmeSolversHttp01IngressIngressTemplateMetadata;

}

/**
 * Optional pod template used to configure the ACME challenge solver pods used for HTTP01 challenges
 *
 * @schema ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplate
 */
export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplate {
  /**
   * ObjectMeta overrides for the pod used to solve HTTP01 challenges. Only the 'labels' and 'annotations' fields may be set. If labels or annotations overlap with in-built values, the values here will override the in-built values.
   *
   * @schema ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplate#metadata
   */
  readonly metadata?: ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateMetadata;

  /**
   * PodSpec defines overrides for the HTTP01 challenge solver pod. Only the 'priorityClassName', 'nodeSelector', 'affinity', 'serviceAccountName' and 'tolerations' fields are supported currently. All other fields will be ignored.
   *
   * @schema ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplate#spec
   */
  readonly spec?: ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpec;

}

/**
 * ObjectMeta overrides for the ingress used to solve HTTP01 challenges. Only the 'labels' and 'annotations' fields may be set. If labels or annotations overlap with in-built values, the values here will override the in-built values.
 *
 * @schema ClusterIssuerSpecAcmeSolversHttp01IngressIngressTemplateMetadata
 */
export interface ClusterIssuerSpecAcmeSolversHttp01IngressIngressTemplateMetadata {
  /**
   * Annotations that should be added to the created ACME HTTP01 solver ingress.
   *
   * @schema ClusterIssuerSpecAcmeSolversHttp01IngressIngressTemplateMetadata#annotations
   */
  readonly annotations?: { [key: string]: string };

  /**
   * Labels that should be added to the created ACME HTTP01 solver ingress.
   *
   * @schema ClusterIssuerSpecAcmeSolversHttp01IngressIngressTemplateMetadata#labels
   */
  readonly labels?: { [key: string]: string };

}

/**
 * ObjectMeta overrides for the pod used to solve HTTP01 challenges. Only the 'labels' and 'annotations' fields may be set. If labels or annotations overlap with in-built values, the values here will override the in-built values.
 *
 * @schema ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateMetadata
 */
export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateMetadata {
  /**
   * Annotations that should be added to the create ACME HTTP01 solver pods.
   *
   * @schema ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateMetadata#annotations
   */
  readonly annotations?: { [key: string]: string };

  /**
   * Labels that should be added to the created ACME HTTP01 solver pods.
   *
   * @schema ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateMetadata#labels
   */
  readonly labels?: { [key: string]: string };

}

/**
 * PodSpec defines overrides for the HTTP01 challenge solver pod. Only the 'priorityClassName', 'nodeSelector', 'affinity', 'serviceAccountName' and 'tolerations' fields are supported currently. All other fields will be ignored.
 *
 * @schema ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpec
 */
export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpec {
  /**
   * If specified, the pod's scheduling constraints
   *
   * @schema ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpec#affinity
   */
  readonly affinity?: ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinity;

  /**
   * NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
   *
   * @schema ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpec#nodeSelector
   */
  readonly nodeSelector?: { [key: string]: string };

  /**
   * If specified, the pod's priorityClassName.
   *
   * @schema ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpec#priorityClassName
   */
  readonly priorityClassName?: string;

  /**
   * If specified, the pod's service account
   *
   * @schema ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpec#serviceAccountName
   */
  readonly serviceAccountName?: string;

  /**
   * If specified, the pod's tolerations.
   *
   * @schema ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpec#tolerations
   */
  readonly tolerations?: ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecTolerations[];

}

/**
 * If specified, the pod's scheduling constraints
 *
 * @schema ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinity
 */
export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinity {
  /**
   * Describes node affinity scheduling rules for the pod.
   *
   * @schema ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinity#nodeAffinity
   */
  readonly nodeAffinity?: ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinity;

  /**
   * Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
   *
   * @schema ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinity#podAffinity
   */
  readonly podAffinity?: ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinity;

  /**
   * Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
   *
   * @schema ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinity#podAntiAffinity
   */
  readonly podAntiAffinity?: ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinity;

}

/**
 * The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
 *
 * @schema ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecTolerations
 */
export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecTolerations {
  /**
   * Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
   *
   * @schema ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecTolerations#effect
   */
  readonly effect?: string;

  /**
   * Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
   *
   * @schema ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecTolerations#key
   */
  readonly key?: string;

  /**
   * Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
   *
   * @default Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
   * @schema ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecTolerations#operator
   */
  readonly operator?: string;

  /**
   * TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
   *
   * @schema ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecTolerations#tolerationSeconds
   */
  readonly tolerationSeconds?: number;

  /**
   * Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
   *
   * @schema ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecTolerations#value
   */
  readonly value?: string;

}

/**
 * Describes node affinity scheduling rules for the pod.
 *
 * @schema ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinity
 */
export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinity {
  /**
   * The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.
   *
   * @schema ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinity#preferredDuringSchedulingIgnoredDuringExecution
   */
  readonly preferredDuringSchedulingIgnoredDuringExecution?: ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution[];

  /**
   * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
   *
   * @schema ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinity#requiredDuringSchedulingIgnoredDuringExecution
   */
  readonly requiredDuringSchedulingIgnoredDuringExecution?: ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution;

}

/**
 * Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
 *
 * @schema ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinity
 */
export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinity {
  /**
   * The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
   *
   * @schema ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinity#preferredDuringSchedulingIgnoredDuringExecution
   */
  readonly preferredDuringSchedulingIgnoredDuringExecution?: ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution[];

  /**
   * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
   *
   * @schema ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinity#requiredDuringSchedulingIgnoredDuringExecution
   */
  readonly requiredDuringSchedulingIgnoredDuringExecution?: ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution[];

}

/**
 * Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
 *
 * @schema ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinity
 */
export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinity {
  /**
   * The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
   *
   * @schema ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinity#preferredDuringSchedulingIgnoredDuringExecution
   */
  readonly preferredDuringSchedulingIgnoredDuringExecution?: ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution[];

  /**
   * If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
   *
   * @schema ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinity#requiredDuringSchedulingIgnoredDuringExecution
   */
  readonly requiredDuringSchedulingIgnoredDuringExecution?: ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution[];

}

/**
 * An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
 *
 * @schema ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution
 */
export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution {
  /**
   * A node selector term, associated with the corresponding weight.
   *
   * @schema ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution#preference
   */
  readonly preference: ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference;

  /**
   * Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
   *
   * @schema ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution#weight
   */
  readonly weight: number;

}

/**
 * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
 *
 * @schema ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution
 */
export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution {
  /**
   * Required. A list of node selector terms. The terms are ORed.
   *
   * @schema ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution#nodeSelectorTerms
   */
  readonly nodeSelectorTerms: ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms[];

}

/**
 * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
 *
 * @schema ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution
 */
export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution {
  /**
   * Required. A pod affinity term, associated with the corresponding weight.
   *
   * @schema ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution#podAffinityTerm
   */
  readonly podAffinityTerm: ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm;

  /**
   * weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
   *
   * @schema ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution#weight
   */
  readonly weight: number;

}

/**
 * Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
 *
 * @schema ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution
 */
export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution {
  /**
   * A label query over a set of resources, in this case pods.
   *
   * @schema ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution#labelSelector
   */
  readonly labelSelector?: ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector;

  /**
   * namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means "this pod's namespace"
   *
   * @schema ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution#namespaces
   */
  readonly namespaces?: string[];

  /**
   * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
   *
   * @schema ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution#topologyKey
   */
  readonly topologyKey: string;

}

/**
 * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
 *
 * @schema ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution
 */
export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution {
  /**
   * Required. A pod affinity term, associated with the corresponding weight.
   *
   * @schema ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution#podAffinityTerm
   */
  readonly podAffinityTerm: ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm;

  /**
   * weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
   *
   * @schema ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution#weight
   */
  readonly weight: number;

}

/**
 * Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
 *
 * @schema ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution
 */
export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution {
  /**
   * A label query over a set of resources, in this case pods.
   *
   * @schema ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution#labelSelector
   */
  readonly labelSelector?: ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector;

  /**
   * namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means "this pod's namespace"
   *
   * @schema ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution#namespaces
   */
  readonly namespaces?: string[];

  /**
   * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
   *
   * @schema ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution#topologyKey
   */
  readonly topologyKey: string;

}

/**
 * A node selector term, associated with the corresponding weight.
 *
 * @schema ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference
 */
export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference {
  /**
   * A list of node selector requirements by node's labels.
   *
   * @schema ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference#matchExpressions
   */
  readonly matchExpressions?: ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions[];

  /**
   * A list of node selector requirements by node's fields.
   *
   * @schema ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference#matchFields
   */
  readonly matchFields?: ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields[];

}

/**
 * A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
 *
 * @schema ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms
 */
export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms {
  /**
   * A list of node selector requirements by node's labels.
   *
   * @schema ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms#matchExpressions
   */
  readonly matchExpressions?: ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions[];

  /**
   * A list of node selector requirements by node's fields.
   *
   * @schema ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms#matchFields
   */
  readonly matchFields?: ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields[];

}

/**
 * Required. A pod affinity term, associated with the corresponding weight.
 *
 * @schema ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm
 */
export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
  /**
   * A label query over a set of resources, in this case pods.
   *
   * @schema ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm#labelSelector
   */
  readonly labelSelector?: ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector;

  /**
   * namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means "this pod's namespace"
   *
   * @schema ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm#namespaces
   */
  readonly namespaces?: string[];

  /**
   * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
   *
   * @schema ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm#topologyKey
   */
  readonly topologyKey: string;

}

/**
 * A label query over a set of resources, in this case pods.
 *
 * @schema ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector
 */
export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
  /**
   * matchExpressions is a list of label selector requirements. The requirements are ANDed.
   *
   * @schema ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector#matchExpressions
   */
  readonly matchExpressions?: ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions[];

  /**
   * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
   *
   * @schema ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

}

/**
 * Required. A pod affinity term, associated with the corresponding weight.
 *
 * @schema ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm
 */
export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
  /**
   * A label query over a set of resources, in this case pods.
   *
   * @schema ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm#labelSelector
   */
  readonly labelSelector?: ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector;

  /**
   * namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means "this pod's namespace"
   *
   * @schema ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm#namespaces
   */
  readonly namespaces?: string[];

  /**
   * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
   *
   * @schema ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm#topologyKey
   */
  readonly topologyKey: string;

}

/**
 * A label query over a set of resources, in this case pods.
 *
 * @schema ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector
 */
export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
  /**
   * matchExpressions is a list of label selector requirements. The requirements are ANDed.
   *
   * @schema ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector#matchExpressions
   */
  readonly matchExpressions?: ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions[];

  /**
   * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
   *
   * @schema ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

}

/**
 * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
 *
 * @schema ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions
 */
export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions {
  /**
   * The label key that the selector applies to.
   *
   * @schema ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions#key
   */
  readonly key: string;

  /**
   * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
   *
   * @schema ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions#operator
   */
  readonly operator: string;

  /**
   * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
   *
   * @schema ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions#values
   */
  readonly values?: string[];

}

/**
 * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
 *
 * @schema ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields
 */
export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields {
  /**
   * The label key that the selector applies to.
   *
   * @schema ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields#key
   */
  readonly key: string;

  /**
   * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
   *
   * @schema ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields#operator
   */
  readonly operator: string;

  /**
   * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
   *
   * @schema ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields#values
   */
  readonly values?: string[];

}

/**
 * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
 *
 * @schema ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions
 */
export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions {
  /**
   * The label key that the selector applies to.
   *
   * @schema ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions#key
   */
  readonly key: string;

  /**
   * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
   *
   * @schema ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions#operator
   */
  readonly operator: string;

  /**
   * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
   *
   * @schema ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions#values
   */
  readonly values?: string[];

}

/**
 * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
 *
 * @schema ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields
 */
export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields {
  /**
   * The label key that the selector applies to.
   *
   * @schema ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields#key
   */
  readonly key: string;

  /**
   * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
   *
   * @schema ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields#operator
   */
  readonly operator: string;

  /**
   * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
   *
   * @schema ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields#values
   */
  readonly values?: string[];

}

/**
 * A label query over a set of resources, in this case pods.
 *
 * @schema ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector
 */
export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
  /**
   * matchExpressions is a list of label selector requirements. The requirements are ANDed.
   *
   * @schema ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector#matchExpressions
   */
  readonly matchExpressions?: ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions[];

  /**
   * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
   *
   * @schema ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

}

/**
 * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
 *
 * @schema ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions
 */
export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
  /**
   * key is the label key that the selector applies to.
   *
   * @schema ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions#key
   */
  readonly key: string;

  /**
   * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
   *
   * @schema ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions#operator
   */
  readonly operator: string;

  /**
   * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
   *
   * @schema ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions#values
   */
  readonly values?: string[];

}

/**
 * A label query over a set of resources, in this case pods.
 *
 * @schema ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector
 */
export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
  /**
   * matchExpressions is a list of label selector requirements. The requirements are ANDed.
   *
   * @schema ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector#matchExpressions
   */
  readonly matchExpressions?: ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions[];

  /**
   * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
   *
   * @schema ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

}

/**
 * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
 *
 * @schema ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions
 */
export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
  /**
   * key is the label key that the selector applies to.
   *
   * @schema ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions#key
   */
  readonly key: string;

  /**
   * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
   *
   * @schema ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions#operator
   */
  readonly operator: string;

  /**
   * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
   *
   * @schema ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions#values
   */
  readonly values?: string[];

}

/**
 * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
 *
 * @schema ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions
 */
export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
  /**
   * key is the label key that the selector applies to.
   *
   * @schema ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions#key
   */
  readonly key: string;

  /**
   * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
   *
   * @schema ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions#operator
   */
  readonly operator: string;

  /**
   * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
   *
   * @schema ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions#values
   */
  readonly values?: string[];

}

/**
 * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
 *
 * @schema ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions
 */
export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
  /**
   * key is the label key that the selector applies to.
   *
   * @schema ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions#key
   */
  readonly key: string;

  /**
   * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
   *
   * @schema ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions#operator
   */
  readonly operator: string;

  /**
   * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
   *
   * @schema ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions#values
   */
  readonly values?: string[];

}

/**
 * An Issuer represents a certificate issuing authority which can be referenced as part of `issuerRef` fields. It is scoped to a single namespace and can therefore only be referenced by resources within the same namespace.
 *
 * @schema Issuer
 */
export class Issuer extends ApiObject {
  /**
   * Returns the apiVersion and kind for "Issuer"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'cert-manager.io/v1alpha2',
    kind: 'Issuer',
  }

  /**
   * Renders a Kubernetes manifest for "Issuer".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: IssuerProps = {}): any {
    return {
      ...Issuer.GVK,
      ...props,
    };
  }

  /**
   * Defines a "Issuer" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: IssuerProps = {}) {
    super(scope, id, Issuer.manifest(props));
  }
}

/**
 * An Issuer represents a certificate issuing authority which can be referenced as part of `issuerRef` fields. It is scoped to a single namespace and can therefore only be referenced by resources within the same namespace.
 *
 * @schema Issuer
 */
export interface IssuerProps {
  /**
   * @schema Issuer#metadata
   */
  readonly metadata?: any;

  /**
   * Desired state of the Issuer resource.
   *
   * @schema Issuer#spec
   */
  readonly spec?: IssuerSpec;

}

/**
 * Desired state of the Issuer resource.
 *
 * @schema IssuerSpec
 */
export interface IssuerSpec {
  /**
   * ACME configures this issuer to communicate with a RFC8555 (ACME) server to obtain signed x509 certificates.
   *
   * @schema IssuerSpec#acme
   */
  readonly acme?: IssuerSpecAcme;

  /**
   * CA configures this issuer to sign certificates using a signing CA keypair stored in a Secret resource. This is used to build internal PKIs that are managed by cert-manager.
   *
   * @schema IssuerSpec#ca
   */
  readonly ca?: IssuerSpecCa;

  /**
   * SelfSigned configures this issuer to 'self sign' certificates using the private key used to create the CertificateRequest object.
   *
   * @schema IssuerSpec#selfSigned
   */
  readonly selfSigned?: IssuerSpecSelfSigned;

  /**
   * Vault configures this issuer to sign certificates using a HashiCorp Vault PKI backend.
   *
   * @schema IssuerSpec#vault
   */
  readonly vault?: IssuerSpecVault;

  /**
   * Venafi configures this issuer to sign certificates using a Venafi TPP or Venafi Cloud policy zone.
   *
   * @schema IssuerSpec#venafi
   */
  readonly venafi?: IssuerSpecVenafi;

}

/**
 * ACME configures this issuer to communicate with a RFC8555 (ACME) server to obtain signed x509 certificates.
 *
 * @schema IssuerSpecAcme
 */
export interface IssuerSpecAcme {
  /**
   * Enables or disables generating a new ACME account key. If true, the Issuer resource will *not* request a new account but will expect the account key to be supplied via an existing secret. If false, the cert-manager system will generate a new ACME account key for the Issuer. Defaults to false.
   *
   * @default false.
   * @schema IssuerSpecAcme#disableAccountKeyGeneration
   */
  readonly disableAccountKeyGeneration?: boolean;

  /**
   * Email is the email address to be associated with the ACME account. This field is optional, but it is strongly recommended to be set. It will be used to contact you in case of issues with your account or certificates, including expiry notification emails. This field may be updated after the account is initially registered.
   *
   * @schema IssuerSpecAcme#email
   */
  readonly email?: string;

  /**
   * Enables requesting a Not After date on certificates that matches the duration of the certificate. This is not supported by all ACME servers like Let's Encrypt. If set to true when the ACME server does not support it it will create an error on the Order. Defaults to false.
   *
   * @default false.
   * @schema IssuerSpecAcme#enableDurationFeature
   */
  readonly enableDurationFeature?: boolean;

  /**
   * ExternalAccountBinding is a reference to a CA external account of the ACME server. If set, upon registration cert-manager will attempt to associate the given external account credentials with the registered ACME account.
   *
   * @schema IssuerSpecAcme#externalAccountBinding
   */
  readonly externalAccountBinding?: IssuerSpecAcmeExternalAccountBinding;

  /**
   * PreferredChain is the chain to use if the ACME server outputs multiple. PreferredChain is no guarantee that this one gets delivered by the ACME endpoint. For example, for Let's Encrypt's DST crosssign you would use: "DST Root CA X3" or "ISRG Root X1" for the newer Let's Encrypt root CA. This value picks the first certificate bundle in the ACME alternative chains that has a certificate with this value as its issuer's CN
   *
   * @schema IssuerSpecAcme#preferredChain
   */
  readonly preferredChain?: string;

  /**
   * PrivateKey is the name of a Kubernetes Secret resource that will be used to store the automatically generated ACME account private key. Optionally, a `key` may be specified to select a specific entry within the named Secret resource. If `key` is not specified, a default of `tls.key` will be used.
   *
   * @schema IssuerSpecAcme#privateKeySecretRef
   */
  readonly privateKeySecretRef: IssuerSpecAcmePrivateKeySecretRef;

  /**
   * Server is the URL used to access the ACME server's 'directory' endpoint. For example, for Let's Encrypt's staging endpoint, you would use: "https://acme-staging-v02.api.letsencrypt.org/directory". Only ACME v2 endpoints (i.e. RFC 8555) are supported.
   *
   * @schema IssuerSpecAcme#server
   */
  readonly server: string;

  /**
   * Enables or disables validation of the ACME server TLS certificate. If true, requests to the ACME server will not have their TLS certificate validated (i.e. insecure connections will be allowed). Only enable this option in development environments. The cert-manager system installed roots will be used to verify connections to the ACME server if this is false. Defaults to false.
   *
   * @default false.
   * @schema IssuerSpecAcme#skipTLSVerify
   */
  readonly skipTLSVerify?: boolean;

  /**
   * Solvers is a list of challenge solvers that will be used to solve ACME challenges for the matching domains. Solver configurations must be provided in order to obtain certificates from an ACME server. For more information, see: https://cert-manager.io/docs/configuration/acme/
   *
   * @schema IssuerSpecAcme#solvers
   */
  readonly solvers?: IssuerSpecAcmeSolvers[];

}

/**
 * CA configures this issuer to sign certificates using a signing CA keypair stored in a Secret resource. This is used to build internal PKIs that are managed by cert-manager.
 *
 * @schema IssuerSpecCa
 */
export interface IssuerSpecCa {
  /**
   * The CRL distribution points is an X.509 v3 certificate extension which identifies the location of the CRL from which the revocation of this certificate can be checked. If not set, certificates will be issued without distribution points set.
   *
   * @schema IssuerSpecCa#crlDistributionPoints
   */
  readonly crlDistributionPoints?: string[];

  /**
   * SecretName is the name of the secret used to sign Certificates issued by this Issuer.
   *
   * @schema IssuerSpecCa#secretName
   */
  readonly secretName: string;

}

/**
 * SelfSigned configures this issuer to 'self sign' certificates using the private key used to create the CertificateRequest object.
 *
 * @schema IssuerSpecSelfSigned
 */
export interface IssuerSpecSelfSigned {
  /**
   * The CRL distribution points is an X.509 v3 certificate extension which identifies the location of the CRL from which the revocation of this certificate can be checked. If not set certificate will be issued without CDP. Values are strings.
   *
   * @schema IssuerSpecSelfSigned#crlDistributionPoints
   */
  readonly crlDistributionPoints?: string[];

}

/**
 * Vault configures this issuer to sign certificates using a HashiCorp Vault PKI backend.
 *
 * @schema IssuerSpecVault
 */
export interface IssuerSpecVault {
  /**
   * Auth configures how cert-manager authenticates with the Vault server.
   *
   * @schema IssuerSpecVault#auth
   */
  readonly auth: IssuerSpecVaultAuth;

  /**
   * PEM encoded CA bundle used to validate Vault server certificate. Only used if the Server URL is using HTTPS protocol. This parameter is ignored for plain HTTP protocol connection. If not set the system root certificates are used to validate the TLS connection.
   *
   * @schema IssuerSpecVault#caBundle
   */
  readonly caBundle?: string;

  /**
   * Name of the vault namespace. Namespaces is a set of features within Vault Enterprise that allows Vault environments to support Secure Multi-tenancy. e.g: "ns1" More about namespaces can be found here https://www.vaultproject.io/docs/enterprise/namespaces
   *
   * @schema IssuerSpecVault#namespace
   */
  readonly namespace?: string;

  /**
   * Path is the mount path of the Vault PKI backend's `sign` endpoint, e.g: "my_pki_mount/sign/my-role-name".
   *
   * @schema IssuerSpecVault#path
   */
  readonly path: string;

  /**
   * Server is the connection address for the Vault server, e.g: "https://vault.example.com:8200".
   *
   * @schema IssuerSpecVault#server
   */
  readonly server: string;

}

/**
 * Venafi configures this issuer to sign certificates using a Venafi TPP or Venafi Cloud policy zone.
 *
 * @schema IssuerSpecVenafi
 */
export interface IssuerSpecVenafi {
  /**
   * Cloud specifies the Venafi cloud configuration settings. Only one of TPP or Cloud may be specified.
   *
   * @schema IssuerSpecVenafi#cloud
   */
  readonly cloud?: IssuerSpecVenafiCloud;

  /**
   * TPP specifies Trust Protection Platform configuration settings. Only one of TPP or Cloud may be specified.
   *
   * @schema IssuerSpecVenafi#tpp
   */
  readonly tpp?: IssuerSpecVenafiTpp;

  /**
   * Zone is the Venafi Policy Zone to use for this issuer. All requests made to the Venafi platform will be restricted by the named zone policy. This field is required.
   *
   * @schema IssuerSpecVenafi#zone
   */
  readonly zone: string;

}

/**
 * ExternalAccountBinding is a reference to a CA external account of the ACME server. If set, upon registration cert-manager will attempt to associate the given external account credentials with the registered ACME account.
 *
 * @schema IssuerSpecAcmeExternalAccountBinding
 */
export interface IssuerSpecAcmeExternalAccountBinding {
  /**
   * keyAlgorithm is the MAC key algorithm that the key is used for. Valid values are "HS256", "HS384" and "HS512".
   *
   * @schema IssuerSpecAcmeExternalAccountBinding#keyAlgorithm
   */
  readonly keyAlgorithm: IssuerSpecAcmeExternalAccountBindingKeyAlgorithm;

  /**
   * keyID is the ID of the CA key that the External Account is bound to.
   *
   * @schema IssuerSpecAcmeExternalAccountBinding#keyID
   */
  readonly keyID: string;

  /**
   * keySecretRef is a Secret Key Selector referencing a data item in a Kubernetes Secret which holds the symmetric MAC key of the External Account Binding. The `key` is the index string that is paired with the key data in the Secret and should not be confused with the key data itself, or indeed with the External Account Binding keyID above. The secret key stored in the Secret **must** be un-padded, base64 URL encoded data.
   *
   * @schema IssuerSpecAcmeExternalAccountBinding#keySecretRef
   */
  readonly keySecretRef: IssuerSpecAcmeExternalAccountBindingKeySecretRef;

}

/**
 * PrivateKey is the name of a Kubernetes Secret resource that will be used to store the automatically generated ACME account private key. Optionally, a `key` may be specified to select a specific entry within the named Secret resource. If `key` is not specified, a default of `tls.key` will be used.
 *
 * @schema IssuerSpecAcmePrivateKeySecretRef
 */
export interface IssuerSpecAcmePrivateKeySecretRef {
  /**
   * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
   *
   * @schema IssuerSpecAcmePrivateKeySecretRef#key
   */
  readonly key?: string;

  /**
   * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema IssuerSpecAcmePrivateKeySecretRef#name
   */
  readonly name: string;

}

/**
 * Configures an issuer to solve challenges using the specified options. Only one of HTTP01 or DNS01 may be provided.
 *
 * @schema IssuerSpecAcmeSolvers
 */
export interface IssuerSpecAcmeSolvers {
  /**
   * Configures cert-manager to attempt to complete authorizations by performing the DNS01 challenge flow.
   *
   * @schema IssuerSpecAcmeSolvers#dns01
   */
  readonly dns01?: IssuerSpecAcmeSolversDns01;

  /**
   * Configures cert-manager to attempt to complete authorizations by performing the HTTP01 challenge flow. It is not possible to obtain certificates for wildcard domain names (e.g. `*.example.com`) using the HTTP01 challenge mechanism.
   *
   * @schema IssuerSpecAcmeSolvers#http01
   */
  readonly http01?: IssuerSpecAcmeSolversHttp01;

  /**
   * Selector selects a set of DNSNames on the Certificate resource that should be solved using this challenge solver. If not specified, the solver will be treated as the 'default' solver with the lowest priority, i.e. if any other solver has a more specific match, it will be used instead.
   *
   * @schema IssuerSpecAcmeSolvers#selector
   */
  readonly selector?: IssuerSpecAcmeSolversSelector;

}

/**
 * Auth configures how cert-manager authenticates with the Vault server.
 *
 * @schema IssuerSpecVaultAuth
 */
export interface IssuerSpecVaultAuth {
  /**
   * AppRole authenticates with Vault using the App Role auth mechanism, with the role and secret stored in a Kubernetes Secret resource.
   *
   * @schema IssuerSpecVaultAuth#appRole
   */
  readonly appRole?: IssuerSpecVaultAuthAppRole;

  /**
   * Kubernetes authenticates with Vault by passing the ServiceAccount token stored in the named Secret resource to the Vault server.
   *
   * @schema IssuerSpecVaultAuth#kubernetes
   */
  readonly kubernetes?: IssuerSpecVaultAuthKubernetes;

  /**
   * TokenSecretRef authenticates with Vault by presenting a token.
   *
   * @schema IssuerSpecVaultAuth#tokenSecretRef
   */
  readonly tokenSecretRef?: IssuerSpecVaultAuthTokenSecretRef;

}

/**
 * Cloud specifies the Venafi cloud configuration settings. Only one of TPP or Cloud may be specified.
 *
 * @schema IssuerSpecVenafiCloud
 */
export interface IssuerSpecVenafiCloud {
  /**
   * APITokenSecretRef is a secret key selector for the Venafi Cloud API token.
   *
   * @schema IssuerSpecVenafiCloud#apiTokenSecretRef
   */
  readonly apiTokenSecretRef: IssuerSpecVenafiCloudApiTokenSecretRef;

  /**
   * URL is the base URL for Venafi Cloud. Defaults to "https://api.venafi.cloud/v1".
   *
   * @default https://api.venafi.cloud/v1".
   * @schema IssuerSpecVenafiCloud#url
   */
  readonly url?: string;

}

/**
 * TPP specifies Trust Protection Platform configuration settings. Only one of TPP or Cloud may be specified.
 *
 * @schema IssuerSpecVenafiTpp
 */
export interface IssuerSpecVenafiTpp {
  /**
   * CABundle is a PEM encoded TLS certificate to use to verify connections to the TPP instance. If specified, system roots will not be used and the issuing CA for the TPP instance must be verifiable using the provided root. If not specified, the connection will be verified using the cert-manager system root certificates.
   *
   * @schema IssuerSpecVenafiTpp#caBundle
   */
  readonly caBundle?: string;

  /**
   * CredentialsRef is a reference to a Secret containing the username and password for the TPP server. The secret must contain two keys, 'username' and 'password'.
   *
   * @schema IssuerSpecVenafiTpp#credentialsRef
   */
  readonly credentialsRef: IssuerSpecVenafiTppCredentialsRef;

  /**
   * URL is the base URL for the vedsdk endpoint of the Venafi TPP instance, for example: "https://tpp.example.com/vedsdk".
   *
   * @schema IssuerSpecVenafiTpp#url
   */
  readonly url: string;

}

/**
 * keyAlgorithm is the MAC key algorithm that the key is used for. Valid values are "HS256", "HS384" and "HS512".
 *
 * @schema IssuerSpecAcmeExternalAccountBindingKeyAlgorithm
 */
export enum IssuerSpecAcmeExternalAccountBindingKeyAlgorithm {
  /** HS256 */
  HS256 = "HS256",
  /** HS384 */
  HS384 = "HS384",
  /** HS512 */
  HS512 = "HS512",
}

/**
 * keySecretRef is a Secret Key Selector referencing a data item in a Kubernetes Secret which holds the symmetric MAC key of the External Account Binding. The `key` is the index string that is paired with the key data in the Secret and should not be confused with the key data itself, or indeed with the External Account Binding keyID above. The secret key stored in the Secret **must** be un-padded, base64 URL encoded data.
 *
 * @schema IssuerSpecAcmeExternalAccountBindingKeySecretRef
 */
export interface IssuerSpecAcmeExternalAccountBindingKeySecretRef {
  /**
   * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
   *
   * @schema IssuerSpecAcmeExternalAccountBindingKeySecretRef#key
   */
  readonly key?: string;

  /**
   * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema IssuerSpecAcmeExternalAccountBindingKeySecretRef#name
   */
  readonly name: string;

}

/**
 * Configures cert-manager to attempt to complete authorizations by performing the DNS01 challenge flow.
 *
 * @schema IssuerSpecAcmeSolversDns01
 */
export interface IssuerSpecAcmeSolversDns01 {
  /**
   * Use the 'ACME DNS' (https://github.com/joohoi/acme-dns) API to manage DNS01 challenge records.
   *
   * @schema IssuerSpecAcmeSolversDns01#acmedns
   */
  readonly acmedns?: IssuerSpecAcmeSolversDns01Acmedns;

  /**
   * Use the Akamai DNS zone management API to manage DNS01 challenge records.
   *
   * @schema IssuerSpecAcmeSolversDns01#akamai
   */
  readonly akamai?: IssuerSpecAcmeSolversDns01Akamai;

  /**
   * Use the Microsoft Azure DNS API to manage DNS01 challenge records.
   *
   * @schema IssuerSpecAcmeSolversDns01#azuredns
   */
  readonly azuredns?: IssuerSpecAcmeSolversDns01Azuredns;

  /**
   * Use the Google Cloud DNS API to manage DNS01 challenge records.
   *
   * @schema IssuerSpecAcmeSolversDns01#clouddns
   */
  readonly clouddns?: IssuerSpecAcmeSolversDns01Clouddns;

  /**
   * Use the Cloudflare API to manage DNS01 challenge records.
   *
   * @schema IssuerSpecAcmeSolversDns01#cloudflare
   */
  readonly cloudflare?: IssuerSpecAcmeSolversDns01Cloudflare;

  /**
   * CNAMEStrategy configures how the DNS01 provider should handle CNAME records when found in DNS zones.
   *
   * @schema IssuerSpecAcmeSolversDns01#cnameStrategy
   */
  readonly cnameStrategy?: IssuerSpecAcmeSolversDns01CnameStrategy;

  /**
   * Use the DigitalOcean DNS API to manage DNS01 challenge records.
   *
   * @schema IssuerSpecAcmeSolversDns01#digitalocean
   */
  readonly digitalocean?: IssuerSpecAcmeSolversDns01Digitalocean;

  /**
   * Use RFC2136 ("Dynamic Updates in the Domain Name System") (https://datatracker.ietf.org/doc/rfc2136/) to manage DNS01 challenge records.
   *
   * @schema IssuerSpecAcmeSolversDns01#rfc2136
   */
  readonly rfc2136?: IssuerSpecAcmeSolversDns01Rfc2136;

  /**
   * Use the AWS Route53 API to manage DNS01 challenge records.
   *
   * @schema IssuerSpecAcmeSolversDns01#route53
   */
  readonly route53?: IssuerSpecAcmeSolversDns01Route53;

  /**
   * Configure an external webhook based DNS01 challenge solver to manage DNS01 challenge records.
   *
   * @schema IssuerSpecAcmeSolversDns01#webhook
   */
  readonly webhook?: IssuerSpecAcmeSolversDns01Webhook;

}

/**
 * Configures cert-manager to attempt to complete authorizations by performing the HTTP01 challenge flow. It is not possible to obtain certificates for wildcard domain names (e.g. `*.example.com`) using the HTTP01 challenge mechanism.
 *
 * @schema IssuerSpecAcmeSolversHttp01
 */
export interface IssuerSpecAcmeSolversHttp01 {
  /**
   * The ingress based HTTP01 challenge solver will solve challenges by creating or modifying Ingress resources in order to route requests for '/.well-known/acme-challenge/XYZ' to 'challenge solver' pods that are provisioned by cert-manager for each Challenge to be completed.
   *
   * @schema IssuerSpecAcmeSolversHttp01#ingress
   */
  readonly ingress?: IssuerSpecAcmeSolversHttp01Ingress;

}

/**
 * Selector selects a set of DNSNames on the Certificate resource that should be solved using this challenge solver. If not specified, the solver will be treated as the 'default' solver with the lowest priority, i.e. if any other solver has a more specific match, it will be used instead.
 *
 * @schema IssuerSpecAcmeSolversSelector
 */
export interface IssuerSpecAcmeSolversSelector {
  /**
   * List of DNSNames that this solver will be used to solve. If specified and a match is found, a dnsNames selector will take precedence over a dnsZones selector. If multiple solvers match with the same dnsNames value, the solver with the most matching labels in matchLabels will be selected. If neither has more matches, the solver defined earlier in the list will be selected.
   *
   * @schema IssuerSpecAcmeSolversSelector#dnsNames
   */
  readonly dnsNames?: string[];

  /**
   * List of DNSZones that this solver will be used to solve. The most specific DNS zone match specified here will take precedence over other DNS zone matches, so a solver specifying sys.example.com will be selected over one specifying example.com for the domain www.sys.example.com. If multiple solvers match with the same dnsZones value, the solver with the most matching labels in matchLabels will be selected. If neither has more matches, the solver defined earlier in the list will be selected.
   *
   * @schema IssuerSpecAcmeSolversSelector#dnsZones
   */
  readonly dnsZones?: string[];

  /**
   * A label selector that is used to refine the set of certificate's that this challenge solver will apply to.
   *
   * @schema IssuerSpecAcmeSolversSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

}

/**
 * AppRole authenticates with Vault using the App Role auth mechanism, with the role and secret stored in a Kubernetes Secret resource.
 *
 * @schema IssuerSpecVaultAuthAppRole
 */
export interface IssuerSpecVaultAuthAppRole {
  /**
   * Path where the App Role authentication backend is mounted in Vault, e.g: "approle"
   *
   * @schema IssuerSpecVaultAuthAppRole#path
   */
  readonly path: string;

  /**
   * RoleID configured in the App Role authentication backend when setting up the authentication backend in Vault.
   *
   * @schema IssuerSpecVaultAuthAppRole#roleId
   */
  readonly roleId: string;

  /**
   * Reference to a key in a Secret that contains the App Role secret used to authenticate with Vault. The `key` field must be specified and denotes which entry within the Secret resource is used as the app role secret.
   *
   * @schema IssuerSpecVaultAuthAppRole#secretRef
   */
  readonly secretRef: IssuerSpecVaultAuthAppRoleSecretRef;

}

/**
 * Kubernetes authenticates with Vault by passing the ServiceAccount token stored in the named Secret resource to the Vault server.
 *
 * @schema IssuerSpecVaultAuthKubernetes
 */
export interface IssuerSpecVaultAuthKubernetes {
  /**
   * The Vault mountPath here is the mount path to use when authenticating with Vault. For example, setting a value to `/v1/auth/foo`, will use the path `/v1/auth/foo/login` to authenticate with Vault. If unspecified, the default value "/v1/auth/kubernetes" will be used.
   *
   * @schema IssuerSpecVaultAuthKubernetes#mountPath
   */
  readonly mountPath?: string;

  /**
   * A required field containing the Vault Role to assume. A Role binds a Kubernetes ServiceAccount with a set of Vault policies.
   *
   * @schema IssuerSpecVaultAuthKubernetes#role
   */
  readonly role: string;

  /**
   * The required Secret field containing a Kubernetes ServiceAccount JWT used for authenticating with Vault. Use of 'ambient credentials' is not supported.
   *
   * @schema IssuerSpecVaultAuthKubernetes#secretRef
   */
  readonly secretRef: IssuerSpecVaultAuthKubernetesSecretRef;

}

/**
 * TokenSecretRef authenticates with Vault by presenting a token.
 *
 * @schema IssuerSpecVaultAuthTokenSecretRef
 */
export interface IssuerSpecVaultAuthTokenSecretRef {
  /**
   * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
   *
   * @schema IssuerSpecVaultAuthTokenSecretRef#key
   */
  readonly key?: string;

  /**
   * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema IssuerSpecVaultAuthTokenSecretRef#name
   */
  readonly name: string;

}

/**
 * APITokenSecretRef is a secret key selector for the Venafi Cloud API token.
 *
 * @schema IssuerSpecVenafiCloudApiTokenSecretRef
 */
export interface IssuerSpecVenafiCloudApiTokenSecretRef {
  /**
   * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
   *
   * @schema IssuerSpecVenafiCloudApiTokenSecretRef#key
   */
  readonly key?: string;

  /**
   * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema IssuerSpecVenafiCloudApiTokenSecretRef#name
   */
  readonly name: string;

}

/**
 * CredentialsRef is a reference to a Secret containing the username and password for the TPP server. The secret must contain two keys, 'username' and 'password'.
 *
 * @schema IssuerSpecVenafiTppCredentialsRef
 */
export interface IssuerSpecVenafiTppCredentialsRef {
  /**
   * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema IssuerSpecVenafiTppCredentialsRef#name
   */
  readonly name: string;

}

/**
 * Use the 'ACME DNS' (https://github.com/joohoi/acme-dns) API to manage DNS01 challenge records.
 *
 * @schema IssuerSpecAcmeSolversDns01Acmedns
 */
export interface IssuerSpecAcmeSolversDns01Acmedns {
  /**
   * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
   *
   * @schema IssuerSpecAcmeSolversDns01Acmedns#accountSecretRef
   */
  readonly accountSecretRef: IssuerSpecAcmeSolversDns01AcmednsAccountSecretRef;

  /**
   * @schema IssuerSpecAcmeSolversDns01Acmedns#host
   */
  readonly host: string;

}

/**
 * Use the Akamai DNS zone management API to manage DNS01 challenge records.
 *
 * @schema IssuerSpecAcmeSolversDns01Akamai
 */
export interface IssuerSpecAcmeSolversDns01Akamai {
  /**
   * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
   *
   * @schema IssuerSpecAcmeSolversDns01Akamai#accessTokenSecretRef
   */
  readonly accessTokenSecretRef: IssuerSpecAcmeSolversDns01AkamaiAccessTokenSecretRef;

  /**
   * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
   *
   * @schema IssuerSpecAcmeSolversDns01Akamai#clientSecretSecretRef
   */
  readonly clientSecretSecretRef: IssuerSpecAcmeSolversDns01AkamaiClientSecretSecretRef;

  /**
   * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
   *
   * @schema IssuerSpecAcmeSolversDns01Akamai#clientTokenSecretRef
   */
  readonly clientTokenSecretRef: IssuerSpecAcmeSolversDns01AkamaiClientTokenSecretRef;

  /**
   * @schema IssuerSpecAcmeSolversDns01Akamai#serviceConsumerDomain
   */
  readonly serviceConsumerDomain: string;

}

/**
 * Use the Microsoft Azure DNS API to manage DNS01 challenge records.
 *
 * @schema IssuerSpecAcmeSolversDns01Azuredns
 */
export interface IssuerSpecAcmeSolversDns01Azuredns {
  /**
   * if both this and ClientSecret are left unset MSI will be used
   *
   * @schema IssuerSpecAcmeSolversDns01Azuredns#clientID
   */
  readonly clientID?: string;

  /**
   * if both this and ClientID are left unset MSI will be used
   *
   * @schema IssuerSpecAcmeSolversDns01Azuredns#clientSecretSecretRef
   */
  readonly clientSecretSecretRef?: IssuerSpecAcmeSolversDns01AzurednsClientSecretSecretRef;

  /**
   * @schema IssuerSpecAcmeSolversDns01Azuredns#environment
   */
  readonly environment?: IssuerSpecAcmeSolversDns01AzurednsEnvironment;

  /**
   * @schema IssuerSpecAcmeSolversDns01Azuredns#hostedZoneName
   */
  readonly hostedZoneName?: string;

  /**
   * @schema IssuerSpecAcmeSolversDns01Azuredns#resourceGroupName
   */
  readonly resourceGroupName: string;

  /**
   * @schema IssuerSpecAcmeSolversDns01Azuredns#subscriptionID
   */
  readonly subscriptionID: string;

  /**
   * when specifying ClientID and ClientSecret then this field is also needed
   *
   * @schema IssuerSpecAcmeSolversDns01Azuredns#tenantID
   */
  readonly tenantID?: string;

}

/**
 * Use the Google Cloud DNS API to manage DNS01 challenge records.
 *
 * @schema IssuerSpecAcmeSolversDns01Clouddns
 */
export interface IssuerSpecAcmeSolversDns01Clouddns {
  /**
   * HostedZoneName is an optional field that tells cert-manager in which Cloud DNS zone the challenge record has to be created. If left empty cert-manager will automatically choose a zone.
   *
   * @schema IssuerSpecAcmeSolversDns01Clouddns#hostedZoneName
   */
  readonly hostedZoneName?: string;

  /**
   * @schema IssuerSpecAcmeSolversDns01Clouddns#project
   */
  readonly project: string;

  /**
   * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
   *
   * @schema IssuerSpecAcmeSolversDns01Clouddns#serviceAccountSecretRef
   */
  readonly serviceAccountSecretRef?: IssuerSpecAcmeSolversDns01ClouddnsServiceAccountSecretRef;

}

/**
 * Use the Cloudflare API to manage DNS01 challenge records.
 *
 * @schema IssuerSpecAcmeSolversDns01Cloudflare
 */
export interface IssuerSpecAcmeSolversDns01Cloudflare {
  /**
   * API key to use to authenticate with Cloudflare. Note: using an API token to authenticate is now the recommended method as it allows greater control of permissions.
   *
   * @schema IssuerSpecAcmeSolversDns01Cloudflare#apiKeySecretRef
   */
  readonly apiKeySecretRef?: IssuerSpecAcmeSolversDns01CloudflareApiKeySecretRef;

  /**
   * API token used to authenticate with Cloudflare.
   *
   * @schema IssuerSpecAcmeSolversDns01Cloudflare#apiTokenSecretRef
   */
  readonly apiTokenSecretRef?: IssuerSpecAcmeSolversDns01CloudflareApiTokenSecretRef;

  /**
   * Email of the account, only required when using API key based authentication.
   *
   * @schema IssuerSpecAcmeSolversDns01Cloudflare#email
   */
  readonly email?: string;

}

/**
 * CNAMEStrategy configures how the DNS01 provider should handle CNAME records when found in DNS zones.
 *
 * @schema IssuerSpecAcmeSolversDns01CnameStrategy
 */
export enum IssuerSpecAcmeSolversDns01CnameStrategy {
  /** None */
  NONE = "None",
  /** Follow */
  FOLLOW = "Follow",
}

/**
 * Use the DigitalOcean DNS API to manage DNS01 challenge records.
 *
 * @schema IssuerSpecAcmeSolversDns01Digitalocean
 */
export interface IssuerSpecAcmeSolversDns01Digitalocean {
  /**
   * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
   *
   * @schema IssuerSpecAcmeSolversDns01Digitalocean#tokenSecretRef
   */
  readonly tokenSecretRef: IssuerSpecAcmeSolversDns01DigitaloceanTokenSecretRef;

}

/**
 * Use RFC2136 ("Dynamic Updates in the Domain Name System") (https://datatracker.ietf.org/doc/rfc2136/) to manage DNS01 challenge records.
 *
 * @schema IssuerSpecAcmeSolversDns01Rfc2136
 */
export interface IssuerSpecAcmeSolversDns01Rfc2136 {
  /**
   * The IP address or hostname of an authoritative DNS server supporting RFC2136 in the form host:port. If the host is an IPv6 address it must be enclosed in square brackets (e.g [2001:db8::1]) ; port is optional. This field is required.
   *
   * @schema IssuerSpecAcmeSolversDns01Rfc2136#nameserver
   */
  readonly nameserver: string;

  /**
   * The TSIG Algorithm configured in the DNS supporting RFC2136. Used only when ``tsigSecretSecretRef`` and ``tsigKeyName`` are defined. Supported values are (case-insensitive): ``HMACMD5`` (default), ``HMACSHA1``, ``HMACSHA256`` or ``HMACSHA512``.
   *
   * @schema IssuerSpecAcmeSolversDns01Rfc2136#tsigAlgorithm
   */
  readonly tsigAlgorithm?: string;

  /**
   * The TSIG Key name configured in the DNS. If ``tsigSecretSecretRef`` is defined, this field is required.
   *
   * @schema IssuerSpecAcmeSolversDns01Rfc2136#tsigKeyName
   */
  readonly tsigKeyName?: string;

  /**
   * The name of the secret containing the TSIG value. If ``tsigKeyName`` is defined, this field is required.
   *
   * @schema IssuerSpecAcmeSolversDns01Rfc2136#tsigSecretSecretRef
   */
  readonly tsigSecretSecretRef?: IssuerSpecAcmeSolversDns01Rfc2136TsigSecretSecretRef;

}

/**
 * Use the AWS Route53 API to manage DNS01 challenge records.
 *
 * @schema IssuerSpecAcmeSolversDns01Route53
 */
export interface IssuerSpecAcmeSolversDns01Route53 {
  /**
   * The AccessKeyID is used for authentication. If not set we fall-back to using env vars, shared credentials file or AWS Instance metadata see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
   *
   * @schema IssuerSpecAcmeSolversDns01Route53#accessKeyID
   */
  readonly accessKeyID?: string;

  /**
   * If set, the provider will manage only this zone in Route53 and will not do an lookup using the route53:ListHostedZonesByName api call.
   *
   * @schema IssuerSpecAcmeSolversDns01Route53#hostedZoneID
   */
  readonly hostedZoneID?: string;

  /**
   * Always set the region when using AccessKeyID and SecretAccessKey
   *
   * @schema IssuerSpecAcmeSolversDns01Route53#region
   */
  readonly region: string;

  /**
   * Role is a Role ARN which the Route53 provider will assume using either the explicit credentials AccessKeyID/SecretAccessKey or the inferred credentials from environment variables, shared credentials file or AWS Instance metadata
   *
   * @schema IssuerSpecAcmeSolversDns01Route53#role
   */
  readonly role?: string;

  /**
   * The SecretAccessKey is used for authentication. If not set we fall-back to using env vars, shared credentials file or AWS Instance metadata https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
   *
   * @schema IssuerSpecAcmeSolversDns01Route53#secretAccessKeySecretRef
   */
  readonly secretAccessKeySecretRef?: IssuerSpecAcmeSolversDns01Route53SecretAccessKeySecretRef;

}

/**
 * Configure an external webhook based DNS01 challenge solver to manage DNS01 challenge records.
 *
 * @schema IssuerSpecAcmeSolversDns01Webhook
 */
export interface IssuerSpecAcmeSolversDns01Webhook {
  /**
   * Additional configuration that should be passed to the webhook apiserver when challenges are processed. This can contain arbitrary JSON data. Secret values should not be specified in this stanza. If secret values are needed (e.g. credentials for a DNS service), you should use a SecretKeySelector to reference a Secret resource. For details on the schema of this field, consult the webhook provider implementation's documentation.
   *
   * @schema IssuerSpecAcmeSolversDns01Webhook#config
   */
  readonly config?: any;

  /**
   * The API group name that should be used when POSTing ChallengePayload resources to the webhook apiserver. This should be the same as the GroupName specified in the webhook provider implementation.
   *
   * @schema IssuerSpecAcmeSolversDns01Webhook#groupName
   */
  readonly groupName: string;

  /**
   * The name of the solver to use, as defined in the webhook provider implementation. This will typically be the name of the provider, e.g. 'cloudflare'.
   *
   * @schema IssuerSpecAcmeSolversDns01Webhook#solverName
   */
  readonly solverName: string;

}

/**
 * The ingress based HTTP01 challenge solver will solve challenges by creating or modifying Ingress resources in order to route requests for '/.well-known/acme-challenge/XYZ' to 'challenge solver' pods that are provisioned by cert-manager for each Challenge to be completed.
 *
 * @schema IssuerSpecAcmeSolversHttp01Ingress
 */
export interface IssuerSpecAcmeSolversHttp01Ingress {
  /**
   * The ingress class to use when creating Ingress resources to solve ACME challenges that use this challenge solver. Only one of 'class' or 'name' may be specified.
   *
   * @schema IssuerSpecAcmeSolversHttp01Ingress#class
   */
  readonly class?: string;

  /**
   * Optional ingress template used to configure the ACME challenge solver ingress used for HTTP01 challenges
   *
   * @schema IssuerSpecAcmeSolversHttp01Ingress#ingressTemplate
   */
  readonly ingressTemplate?: IssuerSpecAcmeSolversHttp01IngressIngressTemplate;

  /**
   * The name of the ingress resource that should have ACME challenge solving routes inserted into it in order to solve HTTP01 challenges. This is typically used in conjunction with ingress controllers like ingress-gce, which maintains a 1:1 mapping between external IPs and ingress resources.
   *
   * @schema IssuerSpecAcmeSolversHttp01Ingress#name
   */
  readonly name?: string;

  /**
   * Optional pod template used to configure the ACME challenge solver pods used for HTTP01 challenges
   *
   * @schema IssuerSpecAcmeSolversHttp01Ingress#podTemplate
   */
  readonly podTemplate?: IssuerSpecAcmeSolversHttp01IngressPodTemplate;

  /**
   * Optional service type for Kubernetes solver service
   *
   * @schema IssuerSpecAcmeSolversHttp01Ingress#serviceType
   */
  readonly serviceType?: string;

}

/**
 * Reference to a key in a Secret that contains the App Role secret used to authenticate with Vault. The `key` field must be specified and denotes which entry within the Secret resource is used as the app role secret.
 *
 * @schema IssuerSpecVaultAuthAppRoleSecretRef
 */
export interface IssuerSpecVaultAuthAppRoleSecretRef {
  /**
   * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
   *
   * @schema IssuerSpecVaultAuthAppRoleSecretRef#key
   */
  readonly key?: string;

  /**
   * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema IssuerSpecVaultAuthAppRoleSecretRef#name
   */
  readonly name: string;

}

/**
 * The required Secret field containing a Kubernetes ServiceAccount JWT used for authenticating with Vault. Use of 'ambient credentials' is not supported.
 *
 * @schema IssuerSpecVaultAuthKubernetesSecretRef
 */
export interface IssuerSpecVaultAuthKubernetesSecretRef {
  /**
   * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
   *
   * @schema IssuerSpecVaultAuthKubernetesSecretRef#key
   */
  readonly key?: string;

  /**
   * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema IssuerSpecVaultAuthKubernetesSecretRef#name
   */
  readonly name: string;

}

/**
 * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
 *
 * @schema IssuerSpecAcmeSolversDns01AcmednsAccountSecretRef
 */
export interface IssuerSpecAcmeSolversDns01AcmednsAccountSecretRef {
  /**
   * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
   *
   * @schema IssuerSpecAcmeSolversDns01AcmednsAccountSecretRef#key
   */
  readonly key?: string;

  /**
   * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema IssuerSpecAcmeSolversDns01AcmednsAccountSecretRef#name
   */
  readonly name: string;

}

/**
 * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
 *
 * @schema IssuerSpecAcmeSolversDns01AkamaiAccessTokenSecretRef
 */
export interface IssuerSpecAcmeSolversDns01AkamaiAccessTokenSecretRef {
  /**
   * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
   *
   * @schema IssuerSpecAcmeSolversDns01AkamaiAccessTokenSecretRef#key
   */
  readonly key?: string;

  /**
   * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema IssuerSpecAcmeSolversDns01AkamaiAccessTokenSecretRef#name
   */
  readonly name: string;

}

/**
 * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
 *
 * @schema IssuerSpecAcmeSolversDns01AkamaiClientSecretSecretRef
 */
export interface IssuerSpecAcmeSolversDns01AkamaiClientSecretSecretRef {
  /**
   * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
   *
   * @schema IssuerSpecAcmeSolversDns01AkamaiClientSecretSecretRef#key
   */
  readonly key?: string;

  /**
   * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema IssuerSpecAcmeSolversDns01AkamaiClientSecretSecretRef#name
   */
  readonly name: string;

}

/**
 * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
 *
 * @schema IssuerSpecAcmeSolversDns01AkamaiClientTokenSecretRef
 */
export interface IssuerSpecAcmeSolversDns01AkamaiClientTokenSecretRef {
  /**
   * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
   *
   * @schema IssuerSpecAcmeSolversDns01AkamaiClientTokenSecretRef#key
   */
  readonly key?: string;

  /**
   * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema IssuerSpecAcmeSolversDns01AkamaiClientTokenSecretRef#name
   */
  readonly name: string;

}

/**
 * if both this and ClientID are left unset MSI will be used
 *
 * @schema IssuerSpecAcmeSolversDns01AzurednsClientSecretSecretRef
 */
export interface IssuerSpecAcmeSolversDns01AzurednsClientSecretSecretRef {
  /**
   * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
   *
   * @schema IssuerSpecAcmeSolversDns01AzurednsClientSecretSecretRef#key
   */
  readonly key?: string;

  /**
   * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema IssuerSpecAcmeSolversDns01AzurednsClientSecretSecretRef#name
   */
  readonly name: string;

}

/**
 * @schema IssuerSpecAcmeSolversDns01AzurednsEnvironment
 */
export enum IssuerSpecAcmeSolversDns01AzurednsEnvironment {
  /** AzurePublicCloud */
  AZURE_PUBLIC_CLOUD = "AzurePublicCloud",
  /** AzureChinaCloud */
  AZURE_CHINA_CLOUD = "AzureChinaCloud",
  /** AzureGermanCloud */
  AZURE_GERMAN_CLOUD = "AzureGermanCloud",
  /** AzureUSGovernmentCloud */
  AZURE_US_GOVERNMENT_CLOUD = "AzureUSGovernmentCloud",
}

/**
 * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
 *
 * @schema IssuerSpecAcmeSolversDns01ClouddnsServiceAccountSecretRef
 */
export interface IssuerSpecAcmeSolversDns01ClouddnsServiceAccountSecretRef {
  /**
   * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
   *
   * @schema IssuerSpecAcmeSolversDns01ClouddnsServiceAccountSecretRef#key
   */
  readonly key?: string;

  /**
   * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema IssuerSpecAcmeSolversDns01ClouddnsServiceAccountSecretRef#name
   */
  readonly name: string;

}

/**
 * API key to use to authenticate with Cloudflare. Note: using an API token to authenticate is now the recommended method as it allows greater control of permissions.
 *
 * @schema IssuerSpecAcmeSolversDns01CloudflareApiKeySecretRef
 */
export interface IssuerSpecAcmeSolversDns01CloudflareApiKeySecretRef {
  /**
   * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
   *
   * @schema IssuerSpecAcmeSolversDns01CloudflareApiKeySecretRef#key
   */
  readonly key?: string;

  /**
   * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema IssuerSpecAcmeSolversDns01CloudflareApiKeySecretRef#name
   */
  readonly name: string;

}

/**
 * API token used to authenticate with Cloudflare.
 *
 * @schema IssuerSpecAcmeSolversDns01CloudflareApiTokenSecretRef
 */
export interface IssuerSpecAcmeSolversDns01CloudflareApiTokenSecretRef {
  /**
   * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
   *
   * @schema IssuerSpecAcmeSolversDns01CloudflareApiTokenSecretRef#key
   */
  readonly key?: string;

  /**
   * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema IssuerSpecAcmeSolversDns01CloudflareApiTokenSecretRef#name
   */
  readonly name: string;

}

/**
 * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
 *
 * @schema IssuerSpecAcmeSolversDns01DigitaloceanTokenSecretRef
 */
export interface IssuerSpecAcmeSolversDns01DigitaloceanTokenSecretRef {
  /**
   * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
   *
   * @schema IssuerSpecAcmeSolversDns01DigitaloceanTokenSecretRef#key
   */
  readonly key?: string;

  /**
   * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema IssuerSpecAcmeSolversDns01DigitaloceanTokenSecretRef#name
   */
  readonly name: string;

}

/**
 * The name of the secret containing the TSIG value. If ``tsigKeyName`` is defined, this field is required.
 *
 * @schema IssuerSpecAcmeSolversDns01Rfc2136TsigSecretSecretRef
 */
export interface IssuerSpecAcmeSolversDns01Rfc2136TsigSecretSecretRef {
  /**
   * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
   *
   * @schema IssuerSpecAcmeSolversDns01Rfc2136TsigSecretSecretRef#key
   */
  readonly key?: string;

  /**
   * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema IssuerSpecAcmeSolversDns01Rfc2136TsigSecretSecretRef#name
   */
  readonly name: string;

}

/**
 * The SecretAccessKey is used for authentication. If not set we fall-back to using env vars, shared credentials file or AWS Instance metadata https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
 *
 * @schema IssuerSpecAcmeSolversDns01Route53SecretAccessKeySecretRef
 */
export interface IssuerSpecAcmeSolversDns01Route53SecretAccessKeySecretRef {
  /**
   * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
   *
   * @schema IssuerSpecAcmeSolversDns01Route53SecretAccessKeySecretRef#key
   */
  readonly key?: string;

  /**
   * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema IssuerSpecAcmeSolversDns01Route53SecretAccessKeySecretRef#name
   */
  readonly name: string;

}

/**
 * Optional ingress template used to configure the ACME challenge solver ingress used for HTTP01 challenges
 *
 * @schema IssuerSpecAcmeSolversHttp01IngressIngressTemplate
 */
export interface IssuerSpecAcmeSolversHttp01IngressIngressTemplate {
  /**
   * ObjectMeta overrides for the ingress used to solve HTTP01 challenges. Only the 'labels' and 'annotations' fields may be set. If labels or annotations overlap with in-built values, the values here will override the in-built values.
   *
   * @schema IssuerSpecAcmeSolversHttp01IngressIngressTemplate#metadata
   */
  readonly metadata?: IssuerSpecAcmeSolversHttp01IngressIngressTemplateMetadata;

}

/**
 * Optional pod template used to configure the ACME challenge solver pods used for HTTP01 challenges
 *
 * @schema IssuerSpecAcmeSolversHttp01IngressPodTemplate
 */
export interface IssuerSpecAcmeSolversHttp01IngressPodTemplate {
  /**
   * ObjectMeta overrides for the pod used to solve HTTP01 challenges. Only the 'labels' and 'annotations' fields may be set. If labels or annotations overlap with in-built values, the values here will override the in-built values.
   *
   * @schema IssuerSpecAcmeSolversHttp01IngressPodTemplate#metadata
   */
  readonly metadata?: IssuerSpecAcmeSolversHttp01IngressPodTemplateMetadata;

  /**
   * PodSpec defines overrides for the HTTP01 challenge solver pod. Only the 'priorityClassName', 'nodeSelector', 'affinity', 'serviceAccountName' and 'tolerations' fields are supported currently. All other fields will be ignored.
   *
   * @schema IssuerSpecAcmeSolversHttp01IngressPodTemplate#spec
   */
  readonly spec?: IssuerSpecAcmeSolversHttp01IngressPodTemplateSpec;

}

/**
 * ObjectMeta overrides for the ingress used to solve HTTP01 challenges. Only the 'labels' and 'annotations' fields may be set. If labels or annotations overlap with in-built values, the values here will override the in-built values.
 *
 * @schema IssuerSpecAcmeSolversHttp01IngressIngressTemplateMetadata
 */
export interface IssuerSpecAcmeSolversHttp01IngressIngressTemplateMetadata {
  /**
   * Annotations that should be added to the created ACME HTTP01 solver ingress.
   *
   * @schema IssuerSpecAcmeSolversHttp01IngressIngressTemplateMetadata#annotations
   */
  readonly annotations?: { [key: string]: string };

  /**
   * Labels that should be added to the created ACME HTTP01 solver ingress.
   *
   * @schema IssuerSpecAcmeSolversHttp01IngressIngressTemplateMetadata#labels
   */
  readonly labels?: { [key: string]: string };

}

/**
 * ObjectMeta overrides for the pod used to solve HTTP01 challenges. Only the 'labels' and 'annotations' fields may be set. If labels or annotations overlap with in-built values, the values here will override the in-built values.
 *
 * @schema IssuerSpecAcmeSolversHttp01IngressPodTemplateMetadata
 */
export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateMetadata {
  /**
   * Annotations that should be added to the create ACME HTTP01 solver pods.
   *
   * @schema IssuerSpecAcmeSolversHttp01IngressPodTemplateMetadata#annotations
   */
  readonly annotations?: { [key: string]: string };

  /**
   * Labels that should be added to the created ACME HTTP01 solver pods.
   *
   * @schema IssuerSpecAcmeSolversHttp01IngressPodTemplateMetadata#labels
   */
  readonly labels?: { [key: string]: string };

}

/**
 * PodSpec defines overrides for the HTTP01 challenge solver pod. Only the 'priorityClassName', 'nodeSelector', 'affinity', 'serviceAccountName' and 'tolerations' fields are supported currently. All other fields will be ignored.
 *
 * @schema IssuerSpecAcmeSolversHttp01IngressPodTemplateSpec
 */
export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpec {
  /**
   * If specified, the pod's scheduling constraints
   *
   * @schema IssuerSpecAcmeSolversHttp01IngressPodTemplateSpec#affinity
   */
  readonly affinity?: IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinity;

  /**
   * NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
   *
   * @schema IssuerSpecAcmeSolversHttp01IngressPodTemplateSpec#nodeSelector
   */
  readonly nodeSelector?: { [key: string]: string };

  /**
   * If specified, the pod's priorityClassName.
   *
   * @schema IssuerSpecAcmeSolversHttp01IngressPodTemplateSpec#priorityClassName
   */
  readonly priorityClassName?: string;

  /**
   * If specified, the pod's service account
   *
   * @schema IssuerSpecAcmeSolversHttp01IngressPodTemplateSpec#serviceAccountName
   */
  readonly serviceAccountName?: string;

  /**
   * If specified, the pod's tolerations.
   *
   * @schema IssuerSpecAcmeSolversHttp01IngressPodTemplateSpec#tolerations
   */
  readonly tolerations?: IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecTolerations[];

}

/**
 * If specified, the pod's scheduling constraints
 *
 * @schema IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinity
 */
export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinity {
  /**
   * Describes node affinity scheduling rules for the pod.
   *
   * @schema IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinity#nodeAffinity
   */
  readonly nodeAffinity?: IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinity;

  /**
   * Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
   *
   * @schema IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinity#podAffinity
   */
  readonly podAffinity?: IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinity;

  /**
   * Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
   *
   * @schema IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinity#podAntiAffinity
   */
  readonly podAntiAffinity?: IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinity;

}

/**
 * The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
 *
 * @schema IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecTolerations
 */
export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecTolerations {
  /**
   * Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
   *
   * @schema IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecTolerations#effect
   */
  readonly effect?: string;

  /**
   * Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
   *
   * @schema IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecTolerations#key
   */
  readonly key?: string;

  /**
   * Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
   *
   * @default Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
   * @schema IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecTolerations#operator
   */
  readonly operator?: string;

  /**
   * TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
   *
   * @schema IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecTolerations#tolerationSeconds
   */
  readonly tolerationSeconds?: number;

  /**
   * Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
   *
   * @schema IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecTolerations#value
   */
  readonly value?: string;

}

/**
 * Describes node affinity scheduling rules for the pod.
 *
 * @schema IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinity
 */
export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinity {
  /**
   * The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.
   *
   * @schema IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinity#preferredDuringSchedulingIgnoredDuringExecution
   */
  readonly preferredDuringSchedulingIgnoredDuringExecution?: IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution[];

  /**
   * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
   *
   * @schema IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinity#requiredDuringSchedulingIgnoredDuringExecution
   */
  readonly requiredDuringSchedulingIgnoredDuringExecution?: IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution;

}

/**
 * Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
 *
 * @schema IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinity
 */
export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinity {
  /**
   * The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
   *
   * @schema IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinity#preferredDuringSchedulingIgnoredDuringExecution
   */
  readonly preferredDuringSchedulingIgnoredDuringExecution?: IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution[];

  /**
   * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
   *
   * @schema IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinity#requiredDuringSchedulingIgnoredDuringExecution
   */
  readonly requiredDuringSchedulingIgnoredDuringExecution?: IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution[];

}

/**
 * Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
 *
 * @schema IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinity
 */
export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinity {
  /**
   * The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
   *
   * @schema IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinity#preferredDuringSchedulingIgnoredDuringExecution
   */
  readonly preferredDuringSchedulingIgnoredDuringExecution?: IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution[];

  /**
   * If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
   *
   * @schema IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinity#requiredDuringSchedulingIgnoredDuringExecution
   */
  readonly requiredDuringSchedulingIgnoredDuringExecution?: IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution[];

}

/**
 * An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
 *
 * @schema IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution
 */
export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution {
  /**
   * A node selector term, associated with the corresponding weight.
   *
   * @schema IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution#preference
   */
  readonly preference: IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference;

  /**
   * Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
   *
   * @schema IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution#weight
   */
  readonly weight: number;

}

/**
 * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
 *
 * @schema IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution
 */
export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution {
  /**
   * Required. A list of node selector terms. The terms are ORed.
   *
   * @schema IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution#nodeSelectorTerms
   */
  readonly nodeSelectorTerms: IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms[];

}

/**
 * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
 *
 * @schema IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution
 */
export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution {
  /**
   * Required. A pod affinity term, associated with the corresponding weight.
   *
   * @schema IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution#podAffinityTerm
   */
  readonly podAffinityTerm: IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm;

  /**
   * weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
   *
   * @schema IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution#weight
   */
  readonly weight: number;

}

/**
 * Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
 *
 * @schema IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution
 */
export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution {
  /**
   * A label query over a set of resources, in this case pods.
   *
   * @schema IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution#labelSelector
   */
  readonly labelSelector?: IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector;

  /**
   * namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means "this pod's namespace"
   *
   * @schema IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution#namespaces
   */
  readonly namespaces?: string[];

  /**
   * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
   *
   * @schema IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution#topologyKey
   */
  readonly topologyKey: string;

}

/**
 * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
 *
 * @schema IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution
 */
export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution {
  /**
   * Required. A pod affinity term, associated with the corresponding weight.
   *
   * @schema IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution#podAffinityTerm
   */
  readonly podAffinityTerm: IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm;

  /**
   * weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
   *
   * @schema IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution#weight
   */
  readonly weight: number;

}

/**
 * Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
 *
 * @schema IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution
 */
export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution {
  /**
   * A label query over a set of resources, in this case pods.
   *
   * @schema IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution#labelSelector
   */
  readonly labelSelector?: IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector;

  /**
   * namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means "this pod's namespace"
   *
   * @schema IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution#namespaces
   */
  readonly namespaces?: string[];

  /**
   * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
   *
   * @schema IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution#topologyKey
   */
  readonly topologyKey: string;

}

/**
 * A node selector term, associated with the corresponding weight.
 *
 * @schema IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference
 */
export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference {
  /**
   * A list of node selector requirements by node's labels.
   *
   * @schema IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference#matchExpressions
   */
  readonly matchExpressions?: IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions[];

  /**
   * A list of node selector requirements by node's fields.
   *
   * @schema IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference#matchFields
   */
  readonly matchFields?: IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields[];

}

/**
 * A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
 *
 * @schema IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms
 */
export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms {
  /**
   * A list of node selector requirements by node's labels.
   *
   * @schema IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms#matchExpressions
   */
  readonly matchExpressions?: IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions[];

  /**
   * A list of node selector requirements by node's fields.
   *
   * @schema IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms#matchFields
   */
  readonly matchFields?: IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields[];

}

/**
 * Required. A pod affinity term, associated with the corresponding weight.
 *
 * @schema IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm
 */
export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
  /**
   * A label query over a set of resources, in this case pods.
   *
   * @schema IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm#labelSelector
   */
  readonly labelSelector?: IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector;

  /**
   * namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means "this pod's namespace"
   *
   * @schema IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm#namespaces
   */
  readonly namespaces?: string[];

  /**
   * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
   *
   * @schema IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm#topologyKey
   */
  readonly topologyKey: string;

}

/**
 * A label query over a set of resources, in this case pods.
 *
 * @schema IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector
 */
export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
  /**
   * matchExpressions is a list of label selector requirements. The requirements are ANDed.
   *
   * @schema IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector#matchExpressions
   */
  readonly matchExpressions?: IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions[];

  /**
   * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
   *
   * @schema IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

}

/**
 * Required. A pod affinity term, associated with the corresponding weight.
 *
 * @schema IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm
 */
export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
  /**
   * A label query over a set of resources, in this case pods.
   *
   * @schema IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm#labelSelector
   */
  readonly labelSelector?: IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector;

  /**
   * namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means "this pod's namespace"
   *
   * @schema IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm#namespaces
   */
  readonly namespaces?: string[];

  /**
   * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
   *
   * @schema IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm#topologyKey
   */
  readonly topologyKey: string;

}

/**
 * A label query over a set of resources, in this case pods.
 *
 * @schema IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector
 */
export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
  /**
   * matchExpressions is a list of label selector requirements. The requirements are ANDed.
   *
   * @schema IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector#matchExpressions
   */
  readonly matchExpressions?: IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions[];

  /**
   * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
   *
   * @schema IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

}

/**
 * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
 *
 * @schema IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions
 */
export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions {
  /**
   * The label key that the selector applies to.
   *
   * @schema IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions#key
   */
  readonly key: string;

  /**
   * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
   *
   * @schema IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions#operator
   */
  readonly operator: string;

  /**
   * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
   *
   * @schema IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions#values
   */
  readonly values?: string[];

}

/**
 * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
 *
 * @schema IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields
 */
export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields {
  /**
   * The label key that the selector applies to.
   *
   * @schema IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields#key
   */
  readonly key: string;

  /**
   * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
   *
   * @schema IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields#operator
   */
  readonly operator: string;

  /**
   * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
   *
   * @schema IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields#values
   */
  readonly values?: string[];

}

/**
 * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
 *
 * @schema IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions
 */
export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions {
  /**
   * The label key that the selector applies to.
   *
   * @schema IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions#key
   */
  readonly key: string;

  /**
   * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
   *
   * @schema IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions#operator
   */
  readonly operator: string;

  /**
   * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
   *
   * @schema IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions#values
   */
  readonly values?: string[];

}

/**
 * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
 *
 * @schema IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields
 */
export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields {
  /**
   * The label key that the selector applies to.
   *
   * @schema IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields#key
   */
  readonly key: string;

  /**
   * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
   *
   * @schema IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields#operator
   */
  readonly operator: string;

  /**
   * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
   *
   * @schema IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields#values
   */
  readonly values?: string[];

}

/**
 * A label query over a set of resources, in this case pods.
 *
 * @schema IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector
 */
export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
  /**
   * matchExpressions is a list of label selector requirements. The requirements are ANDed.
   *
   * @schema IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector#matchExpressions
   */
  readonly matchExpressions?: IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions[];

  /**
   * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
   *
   * @schema IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

}

/**
 * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
 *
 * @schema IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions
 */
export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
  /**
   * key is the label key that the selector applies to.
   *
   * @schema IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions#key
   */
  readonly key: string;

  /**
   * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
   *
   * @schema IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions#operator
   */
  readonly operator: string;

  /**
   * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
   *
   * @schema IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions#values
   */
  readonly values?: string[];

}

/**
 * A label query over a set of resources, in this case pods.
 *
 * @schema IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector
 */
export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
  /**
   * matchExpressions is a list of label selector requirements. The requirements are ANDed.
   *
   * @schema IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector#matchExpressions
   */
  readonly matchExpressions?: IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions[];

  /**
   * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
   *
   * @schema IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

}

/**
 * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
 *
 * @schema IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions
 */
export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
  /**
   * key is the label key that the selector applies to.
   *
   * @schema IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions#key
   */
  readonly key: string;

  /**
   * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
   *
   * @schema IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions#operator
   */
  readonly operator: string;

  /**
   * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
   *
   * @schema IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions#values
   */
  readonly values?: string[];

}

/**
 * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
 *
 * @schema IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions
 */
export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
  /**
   * key is the label key that the selector applies to.
   *
   * @schema IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions#key
   */
  readonly key: string;

  /**
   * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
   *
   * @schema IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions#operator
   */
  readonly operator: string;

  /**
   * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
   *
   * @schema IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions#values
   */
  readonly values?: string[];

}

/**
 * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
 *
 * @schema IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions
 */
export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
  /**
   * key is the label key that the selector applies to.
   *
   * @schema IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions#key
   */
  readonly key: string;

  /**
   * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
   *
   * @schema IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions#operator
   */
  readonly operator: string;

  /**
   * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
   *
   * @schema IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions#values
   */
  readonly values?: string[];

}

