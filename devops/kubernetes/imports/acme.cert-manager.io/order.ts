// generated by cdk8s
import { ApiObject } from 'cdk8s';
import { Construct } from 'constructs';

/**
 * Order is a type to represent an Order with an ACME server
 *
 * @schema Order
 */
export class Order extends ApiObject {
  /**
   * Defines a "Order" API object
   * @param scope the scope in which to define this object
   * @param name a scope-local name for the object
   * @param options configuration options
   */
  public constructor(scope: Construct, name: string, options: OrderOptions) {
    super(scope, name, {
      ...options,
      kind: 'Order',
      apiVersion: 'acme.cert-manager.io/v1alpha2',
    });
  }
}

/**
 * Order is a type to represent an Order with an ACME server
 *
 * @schema Order
 */
export interface OrderOptions {
  /**
   * @schema Order#metadata
   */
  readonly metadata: any;

  /**
   * @schema Order#spec
   */
  readonly spec?: OrderSpec;

}

/**
 * @schema OrderSpec
 */
export interface OrderSpec {
  /**
   * CommonName is the common name as specified on the DER encoded CSR. If CommonName is not specified, the first DNSName specified will be used as the CommonName. At least one of CommonName or a DNSNames must be set. This field must match the corresponding field on the DER encoded CSR.
   *
   * @schema OrderSpec#commonName
   */
  readonly commonName?: string;

  /**
   * Certificate signing request bytes in DER encoding. This will be used when finalizing the order. This field must be set on the order.
   *
   * @schema OrderSpec#csr
   */
  readonly csr: string;

  /**
   * DNSNames is a list of DNS names that should be included as part of the Order validation process. If CommonName is not specified, the first DNSName specified will be used as the CommonName. At least one of CommonName or a DNSNames must be set. This field must match the corresponding field on the DER encoded CSR.
   *
   * @schema OrderSpec#dnsNames
   */
  readonly dnsNames?: string[];

  /**
   * IssuerRef references a properly configured ACME-type Issuer which should be used to create this Order. If the Issuer does not exist, processing will be retried. If the Issuer is not an 'ACME' Issuer, an error will be returned and the Order will be marked as failed.
   *
   * @schema OrderSpec#issuerRef
   */
  readonly issuerRef: OrderSpecIssuerRef;

}

/**
 * IssuerRef references a properly configured ACME-type Issuer which should be used to create this Order. If the Issuer does not exist, processing will be retried. If the Issuer is not an 'ACME' Issuer, an error will be returned and the Order will be marked as failed.
 *
 * @schema OrderSpecIssuerRef
 */
export interface OrderSpecIssuerRef {
  /**
   * @schema OrderSpecIssuerRef#group
   */
  readonly group?: string;

  /**
   * @schema OrderSpecIssuerRef#kind
   */
  readonly kind?: string;

  /**
   * @schema OrderSpecIssuerRef#name
   */
  readonly name: string;

}

