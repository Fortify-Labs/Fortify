// generated by cdk8s
import { ApiObject, GroupVersionKind } from 'cdk8s';
import { Construct } from 'constructs';

/**
 * 
 *
 * @schema IstioOperator
 */
export class IstioOperator extends ApiObject {
  /**
   * Returns the apiVersion and kind for "IstioOperator"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'install.istio.io/v1alpha1',
    kind: 'IstioOperator',
  }

  /**
   * Renders a Kubernetes manifest for "IstioOperator".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: IstioOperatorProps = {}): any {
    return {
      ...IstioOperator.GVK,
      ...props,
    };
  }

  /**
   * Defines a "IstioOperator" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: IstioOperatorProps = {}) {
    super(scope, id, IstioOperator.manifest(props));
  }
}

/**
 * @schema IstioOperator
 */
export interface IstioOperatorProps {
  /**
   * Specification of the desired state of the istio control plane resource. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
   *
   * @schema IstioOperator#spec
   */
  readonly spec?: any;

}

