// generated by cdk8s
import { ApiObject } from 'cdk8s';
import { Construct } from 'constructs';

/**
 * 
 *
 * @schema KafkaUser
 */
export class KafkaUser extends ApiObject {
  /**
   * Defines a "KafkaUser" API object
   * @param scope the scope in which to define this object
   * @param name a scope-local name for the object
   * @param options configuration options
   */
  public constructor(scope: Construct, name: string, options: KafkaUserOptions = {}) {
    super(scope, name, {
      ...options,
      kind: 'KafkaUser',
      apiVersion: 'kafka.strimzi.io/v1beta1',
    });
  }
}

/**
 * @schema KafkaUser
 */
export interface KafkaUserOptions {
  /**
   * The specification of the user.
   *
   * @schema KafkaUser#spec
   */
  readonly spec?: KafkaUserSpec;

}

/**
 * The specification of the user.
 *
 * @schema KafkaUserSpec
 */
export interface KafkaUserSpec {
  /**
   * Authentication mechanism enabled for this Kafka user.
   *
   * @schema KafkaUserSpec#authentication
   */
  readonly authentication?: KafkaUserSpecAuthentication;

  /**
   * Authorization rules for this Kafka user.
   *
   * @schema KafkaUserSpec#authorization
   */
  readonly authorization?: KafkaUserSpecAuthorization;

  /**
   * Quotas on requests to control the broker resources used by clients. Network bandwidth and request rate quotas can be enforced.Kafka documentation for Kafka User quotas can be found at http://kafka.apache.org/documentation/#design_quotas.
   *
   * @schema KafkaUserSpec#quotas
   */
  readonly quotas?: KafkaUserSpecQuotas;

  /**
   * Template to specify how Kafka User `Secrets` are generated.
   *
   * @schema KafkaUserSpec#template
   */
  readonly template?: KafkaUserSpecTemplate;

}

/**
 * Authentication mechanism enabled for this Kafka user.
 *
 * @schema KafkaUserSpecAuthentication
 */
export interface KafkaUserSpecAuthentication {
  /**
   * Authentication type.
   *
   * @schema KafkaUserSpecAuthentication#type
   */
  readonly type: KafkaUserSpecAuthenticationType;

}

/**
 * Authorization rules for this Kafka user.
 *
 * @schema KafkaUserSpecAuthorization
 */
export interface KafkaUserSpecAuthorization {
  /**
   * List of ACL rules which should be applied to this user.
   *
   * @schema KafkaUserSpecAuthorization#acls
   */
  readonly acls: KafkaUserSpecAuthorizationAcls[];

  /**
   * Authorization type. Currently the only supported type is `simple`. `simple` authorization type uses Kafka's `kafka.security.authorizer.AclAuthorizer` class for authorization.
   *
   * @schema KafkaUserSpecAuthorization#type
   */
  readonly type: KafkaUserSpecAuthorizationType;

}

/**
 * Quotas on requests to control the broker resources used by clients. Network bandwidth and request rate quotas can be enforced.Kafka documentation for Kafka User quotas can be found at http://kafka.apache.org/documentation/#design_quotas.
 *
 * @schema KafkaUserSpecQuotas
 */
export interface KafkaUserSpecQuotas {
  /**
   * A quota on the maximum bytes per-second that each client group can fetch from a broker before the clients in the group are throttled. Defined on a per-broker basis.
   *
   * @schema KafkaUserSpecQuotas#consumerByteRate
   */
  readonly consumerByteRate?: number;

  /**
   * A quota on the maximum bytes per-second that each client group can publish to a broker before the clients in the group are throttled. Defined on a per-broker basis.
   *
   * @schema KafkaUserSpecQuotas#producerByteRate
   */
  readonly producerByteRate?: number;

  /**
   * A quota on the maximum CPU utilization of each client group as a percentage of network and I/O threads.
   *
   * @schema KafkaUserSpecQuotas#requestPercentage
   */
  readonly requestPercentage?: number;

}

/**
 * Template to specify how Kafka User `Secrets` are generated.
 *
 * @schema KafkaUserSpecTemplate
 */
export interface KafkaUserSpecTemplate {
  /**
   * Template for KafkaUser resources. The template allows users to specify how the `Secret` with password or TLS certificates is generated.
   *
   * @schema KafkaUserSpecTemplate#secret
   */
  readonly secret?: KafkaUserSpecTemplateSecret;

}

/**
 * Authentication type.
 *
 * @schema KafkaUserSpecAuthenticationType
 */
export enum KafkaUserSpecAuthenticationType {
  /** tls */
  TLS = "tls",
  /** scram-sha-512 */
  SCRAM_SHA_512 = "scram-sha-512",
}

/**
 * @schema KafkaUserSpecAuthorizationAcls
 */
export interface KafkaUserSpecAuthorizationAcls {
  /**
   * The host from which the action described in the ACL rule is allowed or denied.
   *
   * @schema KafkaUserSpecAuthorizationAcls#host
   */
  readonly host?: string;

  /**
   * Operation which will be allowed or denied. Supported operations are: Read, Write, Create, Delete, Alter, Describe, ClusterAction, AlterConfigs, DescribeConfigs, IdempotentWrite and All.
   *
   * @schema KafkaUserSpecAuthorizationAcls#operation
   */
  readonly operation: KafkaUserSpecAuthorizationAclsOperation;

  /**
   * Indicates the resource for which given ACL rule applies.
   *
   * @schema KafkaUserSpecAuthorizationAcls#resource
   */
  readonly resource: KafkaUserSpecAuthorizationAclsResource;

  /**
   * The type of the rule. Currently the only supported type is `allow`. ACL rules with type `allow` are used to allow user to execute the specified operations. Default value is `allow`.
   *
   * @schema KafkaUserSpecAuthorizationAcls#type
   */
  readonly type?: KafkaUserSpecAuthorizationAclsType;

}

/**
 * Authorization type. Currently the only supported type is `simple`. `simple` authorization type uses Kafka's `kafka.security.authorizer.AclAuthorizer` class for authorization.
 *
 * @schema KafkaUserSpecAuthorizationType
 */
export enum KafkaUserSpecAuthorizationType {
  /** simple */
  SIMPLE = "simple",
}

/**
 * Template for KafkaUser resources. The template allows users to specify how the `Secret` with password or TLS certificates is generated.
 *
 * @schema KafkaUserSpecTemplateSecret
 */
export interface KafkaUserSpecTemplateSecret {
  /**
   * Metadata applied to the resource.
   *
   * @schema KafkaUserSpecTemplateSecret#metadata
   */
  readonly metadata?: KafkaUserSpecTemplateSecretMetadata;

}

/**
 * Operation which will be allowed or denied. Supported operations are: Read, Write, Create, Delete, Alter, Describe, ClusterAction, AlterConfigs, DescribeConfigs, IdempotentWrite and All.
 *
 * @schema KafkaUserSpecAuthorizationAclsOperation
 */
export enum KafkaUserSpecAuthorizationAclsOperation {
  /** Read */
  READ = "Read",
  /** Write */
  WRITE = "Write",
  /** Create */
  CREATE = "Create",
  /** Delete */
  DELETE = "Delete",
  /** Alter */
  ALTER = "Alter",
  /** Describe */
  DESCRIBE = "Describe",
  /** ClusterAction */
  CLUSTER_ACTION = "ClusterAction",
  /** AlterConfigs */
  ALTER_CONFIGS = "AlterConfigs",
  /** DescribeConfigs */
  DESCRIBE_CONFIGS = "DescribeConfigs",
  /** IdempotentWrite */
  IDEMPOTENT_WRITE = "IdempotentWrite",
  /** All */
  ALL = "All",
}

/**
 * Indicates the resource for which given ACL rule applies.
 *
 * @schema KafkaUserSpecAuthorizationAclsResource
 */
export interface KafkaUserSpecAuthorizationAclsResource {
  /**
   * Name of resource for which given ACL rule applies. Can be combined with `patternType` field to use prefix pattern.
   *
   * @schema KafkaUserSpecAuthorizationAclsResource#name
   */
  readonly name?: string;

  /**
   * Describes the pattern used in the resource field. The supported types are `literal` and `prefix`. With `literal` pattern type, the resource field will be used as a definition of a full name. With `prefix` pattern type, the resource name will be used only as a prefix. Default value is `literal`.
   *
   * @schema KafkaUserSpecAuthorizationAclsResource#patternType
   */
  readonly patternType?: KafkaUserSpecAuthorizationAclsResourcePatternType;

  /**
   * Resource type. The available resource types are `topic`, `group`, `cluster`, and `transactionalId`.
   *
   * @schema KafkaUserSpecAuthorizationAclsResource#type
   */
  readonly type: KafkaUserSpecAuthorizationAclsResourceType;

}

/**
 * The type of the rule. Currently the only supported type is `allow`. ACL rules with type `allow` are used to allow user to execute the specified operations. Default value is `allow`.
 *
 * @schema KafkaUserSpecAuthorizationAclsType
 */
export enum KafkaUserSpecAuthorizationAclsType {
  /** allow */
  ALLOW = "allow",
  /** deny */
  DENY = "deny",
}

/**
 * Metadata applied to the resource.
 *
 * @schema KafkaUserSpecTemplateSecretMetadata
 */
export interface KafkaUserSpecTemplateSecretMetadata {
  /**
   * Labels added to the resource template. Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
   *
   * @schema KafkaUserSpecTemplateSecretMetadata#labels
   */
  readonly labels?: any;

  /**
   * Annotations added to the resource template. Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
   *
   * @schema KafkaUserSpecTemplateSecretMetadata#annotations
   */
  readonly annotations?: any;

}

/**
 * Describes the pattern used in the resource field. The supported types are `literal` and `prefix`. With `literal` pattern type, the resource field will be used as a definition of a full name. With `prefix` pattern type, the resource name will be used only as a prefix. Default value is `literal`.
 *
 * @schema KafkaUserSpecAuthorizationAclsResourcePatternType
 */
export enum KafkaUserSpecAuthorizationAclsResourcePatternType {
  /** literal */
  LITERAL = "literal",
  /** prefix */
  PREFIX = "prefix",
}

/**
 * Resource type. The available resource types are `topic`, `group`, `cluster`, and `transactionalId`.
 *
 * @schema KafkaUserSpecAuthorizationAclsResourceType
 */
export enum KafkaUserSpecAuthorizationAclsResourceType {
  /** topic */
  TOPIC = "topic",
  /** group */
  GROUP = "group",
  /** cluster */
  CLUSTER = "cluster",
  /** transactionalId */
  TRANSACTIONAL_ID = "transactionalId",
}

