// generated by cdk8s
import { ApiObject } from 'cdk8s';
import { Construct } from 'constructs';

/**
 * 
 *
 * @schema KafkaTopic
 */
export class KafkaTopic extends ApiObject {
  /**
   * Defines a "KafkaTopic" API object
   * @param scope the scope in which to define this object
   * @param name a scope-local name for the object
   * @param options configuration options
   */
  public constructor(scope: Construct, name: string, options: KafkaTopicOptions = {}) {
    super(scope, name, {
      ...options,
      kind: 'KafkaTopic',
      apiVersion: 'kafka.strimzi.io/v1beta1',
    });
  }
}

/**
 * @schema KafkaTopic
 */
export interface KafkaTopicOptions {
  /**
   * The specification of the topic.
   *
   * @schema KafkaTopic#spec
   */
  readonly spec?: KafkaTopicSpec;

}

/**
 * The specification of the topic.
 *
 * @schema KafkaTopicSpec
 */
export interface KafkaTopicSpec {
  /**
   * The number of partitions the topic should have. This cannot be decreased after topic creation. It can be increased after topic creation, but it is important to understand the consequences that has, especially for topics with semantic partitioning.
   *
   * @schema KafkaTopicSpec#partitions
   */
  readonly partitions: number;

  /**
   * The number of replicas the topic should have.
   *
   * @schema KafkaTopicSpec#replicas
   */
  readonly replicas: number;

  /**
   * The topic configuration.
   *
   * @schema KafkaTopicSpec#config
   */
  readonly config?: any;

  /**
   * The name of the topic. When absent this will default to the metadata.name of the topic. It is recommended to not set this unless the topic name is not a valid Kubernetes resource name.
   *
   * @schema KafkaTopicSpec#topicName
   */
  readonly topicName?: string;

}

