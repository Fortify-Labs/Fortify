// generated by cdk8s
import { ApiObject } from 'cdk8s';
import { Construct } from 'constructs';

/**
 * 
 *
 * @schema KafkaConnectS2I
 */
export class KafkaConnectS2I extends ApiObject {
  /**
   * Defines a "KafkaConnectS2I" API object
   * @param scope the scope in which to define this object
   * @param name a scope-local name for the object
   * @param options configuration options
   */
  public constructor(scope: Construct, name: string, options: KafkaConnectS2IOptions = {}) {
    super(scope, name, {
      ...options,
      kind: 'KafkaConnectS2I',
      apiVersion: 'kafka.strimzi.io/v1beta1',
    });
  }
}

/**
 * @schema KafkaConnectS2I
 */
export interface KafkaConnectS2IOptions {
  /**
   * The specification of the Kafka Connect Source-to-Image (S2I) cluster.
   *
   * @schema KafkaConnectS2I#spec
   */
  readonly spec?: KafkaConnectS2ISpec;

}

/**
 * The specification of the Kafka Connect Source-to-Image (S2I) cluster.
 *
 * @schema KafkaConnectS2ISpec
 */
export interface KafkaConnectS2ISpec {
  /**
   * The number of pods in the Kafka Connect group.
   *
   * @schema KafkaConnectS2ISpec#replicas
   */
  readonly replicas?: number;

  /**
   * The docker image for the pods.
   *
   * @schema KafkaConnectS2ISpec#image
   */
  readonly image?: string;

  /**
   * CPU and memory resources to reserve.
   *
   * @schema KafkaConnectS2ISpec#buildResources
   */
  readonly buildResources?: KafkaConnectS2ISpecBuildResources;

  /**
   * Pod liveness checking.
   *
   * @schema KafkaConnectS2ISpec#livenessProbe
   */
  readonly livenessProbe?: KafkaConnectS2ISpecLivenessProbe;

  /**
   * Pod readiness checking.
   *
   * @schema KafkaConnectS2ISpec#readinessProbe
   */
  readonly readinessProbe?: KafkaConnectS2ISpecReadinessProbe;

  /**
   * JVM Options for pods.
   *
   * @schema KafkaConnectS2ISpec#jvmOptions
   */
  readonly jvmOptions?: KafkaConnectS2ISpecJvmOptions;

  /**
   * The pod's affinity rules.
   *
   * @schema KafkaConnectS2ISpec#affinity
   */
  readonly affinity?: KafkaConnectS2ISpecAffinity;

  /**
   * Logging configuration for Kafka Connect.
   *
   * @schema KafkaConnectS2ISpec#logging
   */
  readonly logging?: KafkaConnectS2ISpecLogging;

  /**
   * The Prometheus JMX Exporter configuration. See https://github.com/prometheus/jmx_exporter for details of the structure of this configuration.
   *
   * @schema KafkaConnectS2ISpec#metrics
   */
  readonly metrics?: any;

  /**
   * Template for Kafka Connect and Kafka Connect S2I resources. The template allows users to specify how the `Deployment`, `Pods` and `Service` are generated.
   *
   * @schema KafkaConnectS2ISpec#template
   */
  readonly template?: KafkaConnectS2ISpecTemplate;

  /**
   * Authentication configuration for Kafka Connect.
   *
   * @schema KafkaConnectS2ISpec#authentication
   */
  readonly authentication?: KafkaConnectS2ISpecAuthentication;

  /**
   * Bootstrap servers to connect to. This should be given as a comma separated list of _<hostname>_:‚Äç_<port>_ pairs.
   *
   * @schema KafkaConnectS2ISpec#bootstrapServers
   */
  readonly bootstrapServers: string;

  /**
   * The Kafka Connect configuration. Properties with the following prefixes cannot be set: ssl., sasl., security., listeners, plugin.path, rest., bootstrap.servers, consumer.interceptor.classes, producer.interceptor.classes (with the exception of: ssl.endpoint.identification.algorithm, ssl.cipher.suites, ssl.protocol, ssl.enabled.protocols).
   *
   * @schema KafkaConnectS2ISpec#config
   */
  readonly config?: any;

  /**
   * Pass data from Secrets or ConfigMaps to the Kafka Connect pods and use them to configure connectors.
   *
   * @schema KafkaConnectS2ISpec#externalConfiguration
   */
  readonly externalConfiguration?: KafkaConnectS2ISpecExternalConfiguration;

  /**
   * When true this configures the source repository with the 'Local' reference policy and an import policy that accepts insecure source tags.
   *
   * @schema KafkaConnectS2ISpec#insecureSourceRepository
   */
  readonly insecureSourceRepository?: boolean;

  /**
   * The maximum limits for CPU and memory resources and the requested initial resources.
   *
   * @schema KafkaConnectS2ISpec#resources
   */
  readonly resources?: KafkaConnectS2ISpecResources;

  /**
   * TLS configuration.
   *
   * @schema KafkaConnectS2ISpec#tls
   */
  readonly tls?: KafkaConnectS2ISpecTls;

  /**
   * The pod's tolerations.
   *
   * @schema KafkaConnectS2ISpec#tolerations
   */
  readonly tolerations?: KafkaConnectS2ISpecTolerations[];

  /**
   * The configuration of tracing in Kafka Connect.
   *
   * @schema KafkaConnectS2ISpec#tracing
   */
  readonly tracing?: KafkaConnectS2ISpecTracing;

  /**
   * The Kafka Connect version. Defaults to {DefaultKafkaVersion}. Consult the user documentation to understand the process required to upgrade or downgrade the version.
   *
   * @default DefaultKafkaVersion}. Consult the user documentation to understand the process required to upgrade or downgrade the version.
   * @schema KafkaConnectS2ISpec#version
   */
  readonly version?: string;

}

/**
 * CPU and memory resources to reserve.
 *
 * @schema KafkaConnectS2ISpecBuildResources
 */
export interface KafkaConnectS2ISpecBuildResources {
  /**
   * @schema KafkaConnectS2ISpecBuildResources#limits
   */
  readonly limits?: any;

  /**
   * @schema KafkaConnectS2ISpecBuildResources#requests
   */
  readonly requests?: any;

}

/**
 * Pod liveness checking.
 *
 * @schema KafkaConnectS2ISpecLivenessProbe
 */
export interface KafkaConnectS2ISpecLivenessProbe {
  /**
   * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
   *
   * @default 3. Minimum value is 1.
   * @schema KafkaConnectS2ISpecLivenessProbe#failureThreshold
   */
  readonly failureThreshold?: number;

  /**
   * The initial delay before first the health is first checked.
   *
   * @schema KafkaConnectS2ISpecLivenessProbe#initialDelaySeconds
   */
  readonly initialDelaySeconds?: number;

  /**
   * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
   *
   * @default 10 seconds. Minimum value is 1.
   * @schema KafkaConnectS2ISpecLivenessProbe#periodSeconds
   */
  readonly periodSeconds?: number;

  /**
   * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.
   *
   * @default 1. Must be 1 for liveness. Minimum value is 1.
   * @schema KafkaConnectS2ISpecLivenessProbe#successThreshold
   */
  readonly successThreshold?: number;

  /**
   * The timeout for each attempted health check.
   *
   * @schema KafkaConnectS2ISpecLivenessProbe#timeoutSeconds
   */
  readonly timeoutSeconds?: number;

}

/**
 * Pod readiness checking.
 *
 * @schema KafkaConnectS2ISpecReadinessProbe
 */
export interface KafkaConnectS2ISpecReadinessProbe {
  /**
   * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
   *
   * @default 3. Minimum value is 1.
   * @schema KafkaConnectS2ISpecReadinessProbe#failureThreshold
   */
  readonly failureThreshold?: number;

  /**
   * The initial delay before first the health is first checked.
   *
   * @schema KafkaConnectS2ISpecReadinessProbe#initialDelaySeconds
   */
  readonly initialDelaySeconds?: number;

  /**
   * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
   *
   * @default 10 seconds. Minimum value is 1.
   * @schema KafkaConnectS2ISpecReadinessProbe#periodSeconds
   */
  readonly periodSeconds?: number;

  /**
   * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.
   *
   * @default 1. Must be 1 for liveness. Minimum value is 1.
   * @schema KafkaConnectS2ISpecReadinessProbe#successThreshold
   */
  readonly successThreshold?: number;

  /**
   * The timeout for each attempted health check.
   *
   * @schema KafkaConnectS2ISpecReadinessProbe#timeoutSeconds
   */
  readonly timeoutSeconds?: number;

}

/**
 * JVM Options for pods.
 *
 * @schema KafkaConnectS2ISpecJvmOptions
 */
export interface KafkaConnectS2ISpecJvmOptions {
  /**
   * A map of -XX options to the JVM.
   *
   * @schema KafkaConnectS2ISpecJvmOptions#-XX
   */
  readonly xx?: any;

  /**
   * -Xms option to to the JVM.
   *
   * @schema KafkaConnectS2ISpecJvmOptions#-Xms
   */
  readonly xms?: string;

  /**
   * -Xmx option to to the JVM.
   *
   * @schema KafkaConnectS2ISpecJvmOptions#-Xmx
   */
  readonly xmx?: string;

  /**
   * Specifies whether the Garbage Collection logging is enabled. The default is false.
   *
   * @schema KafkaConnectS2ISpecJvmOptions#gcLoggingEnabled
   */
  readonly gcLoggingEnabled?: boolean;

  /**
   * A map of additional system properties which will be passed using the `-D` option to the JVM.
   *
   * @schema KafkaConnectS2ISpecJvmOptions#javaSystemProperties
   */
  readonly javaSystemProperties?: KafkaConnectS2ISpecJvmOptionsJavaSystemProperties[];

}

/**
 * The pod's affinity rules.
 *
 * @schema KafkaConnectS2ISpecAffinity
 */
export interface KafkaConnectS2ISpecAffinity {
  /**
   * @schema KafkaConnectS2ISpecAffinity#nodeAffinity
   */
  readonly nodeAffinity?: KafkaConnectS2ISpecAffinityNodeAffinity;

  /**
   * @schema KafkaConnectS2ISpecAffinity#podAffinity
   */
  readonly podAffinity?: KafkaConnectS2ISpecAffinityPodAffinity;

  /**
   * @schema KafkaConnectS2ISpecAffinity#podAntiAffinity
   */
  readonly podAntiAffinity?: KafkaConnectS2ISpecAffinityPodAntiAffinity;

}

/**
 * Logging configuration for Kafka Connect.
 *
 * @schema KafkaConnectS2ISpecLogging
 */
export interface KafkaConnectS2ISpecLogging {
  /**
   * A Map from logger name to logger level.
   *
   * @schema KafkaConnectS2ISpecLogging#loggers
   */
  readonly loggers?: any;

  /**
   * The name of the `ConfigMap` from which to get the logging configuration.
   *
   * @schema KafkaConnectS2ISpecLogging#name
   */
  readonly name?: string;

  /**
   * Logging type, must be either 'inline' or 'external'.
   *
   * @schema KafkaConnectS2ISpecLogging#type
   */
  readonly type: KafkaConnectS2ISpecLoggingType;

}

/**
 * Template for Kafka Connect and Kafka Connect S2I resources. The template allows users to specify how the `Deployment`, `Pods` and `Service` are generated.
 *
 * @schema KafkaConnectS2ISpecTemplate
 */
export interface KafkaConnectS2ISpecTemplate {
  /**
   * Template for Kafka Connect `Deployment`.
   *
   * @schema KafkaConnectS2ISpecTemplate#deployment
   */
  readonly deployment?: KafkaConnectS2ISpecTemplateDeployment;

  /**
   * Template for Kafka Connect `Pods`.
   *
   * @schema KafkaConnectS2ISpecTemplate#pod
   */
  readonly pod?: KafkaConnectS2ISpecTemplatePod;

  /**
   * Template for Kafka Connect API `Service`.
   *
   * @schema KafkaConnectS2ISpecTemplate#apiService
   */
  readonly apiService?: KafkaConnectS2ISpecTemplateApiService;

  /**
   * Template for the Kafka Connect container.
   *
   * @schema KafkaConnectS2ISpecTemplate#connectContainer
   */
  readonly connectContainer?: KafkaConnectS2ISpecTemplateConnectContainer;

  /**
   * Template for Kafka Connect `PodDisruptionBudget`.
   *
   * @schema KafkaConnectS2ISpecTemplate#podDisruptionBudget
   */
  readonly podDisruptionBudget?: KafkaConnectS2ISpecTemplatePodDisruptionBudget;

}

/**
 * Authentication configuration for Kafka Connect.
 *
 * @schema KafkaConnectS2ISpecAuthentication
 */
export interface KafkaConnectS2ISpecAuthentication {
  /**
   * Link to Kubernetes Secret containing the access token which was obtained from the authorization server.
   *
   * @schema KafkaConnectS2ISpecAuthentication#accessToken
   */
  readonly accessToken?: KafkaConnectS2ISpecAuthenticationAccessToken;

  /**
   * Configure whether access token should be treated as JWT. This should be set to `false` if the authorization server returns opaque tokens. Defaults to `true`.
   *
   * @default true`.
   * @schema KafkaConnectS2ISpecAuthentication#accessTokenIsJwt
   */
  readonly accessTokenIsJwt?: boolean;

  /**
   * Reference to the `Secret` which holds the certificate and private key pair.
   *
   * @schema KafkaConnectS2ISpecAuthentication#certificateAndKey
   */
  readonly certificateAndKey?: KafkaConnectS2ISpecAuthenticationCertificateAndKey;

  /**
   * OAuth Client ID which the Kafka client can use to authenticate against the OAuth server and use the token endpoint URI.
   *
   * @schema KafkaConnectS2ISpecAuthentication#clientId
   */
  readonly clientId?: string;

  /**
   * Link to Kubernetes Secret containing the OAuth client secret which the Kafka client can use to authenticate against the OAuth server and use the token endpoint URI.
   *
   * @schema KafkaConnectS2ISpecAuthentication#clientSecret
   */
  readonly clientSecret?: KafkaConnectS2ISpecAuthenticationClientSecret;

  /**
   * Enable or disable TLS hostname verification. Default value is `false`.
   *
   * @schema KafkaConnectS2ISpecAuthentication#disableTlsHostnameVerification
   */
  readonly disableTlsHostnameVerification?: boolean;

  /**
   * Set or limit time-to-live of the access tokens to the specified number of seconds. This should be set if the authorization server returns opaque tokens.
   *
   * @schema KafkaConnectS2ISpecAuthentication#maxTokenExpirySeconds
   */
  readonly maxTokenExpirySeconds?: number;

  /**
   * Reference to the `Secret` which holds the password.
   *
   * @schema KafkaConnectS2ISpecAuthentication#passwordSecret
   */
  readonly passwordSecret?: KafkaConnectS2ISpecAuthenticationPasswordSecret;

  /**
   * Link to Kubernetes Secret containing the refresh token which can be used to obtain access token from the authorization server.
   *
   * @schema KafkaConnectS2ISpecAuthentication#refreshToken
   */
  readonly refreshToken?: KafkaConnectS2ISpecAuthenticationRefreshToken;

  /**
   * OAuth scope to use when authenticating against the authorization server. Some authorization servers require this to be set. The possible values depend on how authorization server is configured. By default `scope` is not specified when doing the token endpoint request.
   *
   * @schema KafkaConnectS2ISpecAuthentication#scope
   */
  readonly scope?: string;

  /**
   * Trusted certificates for TLS connection to the OAuth server.
   *
   * @schema KafkaConnectS2ISpecAuthentication#tlsTrustedCertificates
   */
  readonly tlsTrustedCertificates?: KafkaConnectS2ISpecAuthenticationTlsTrustedCertificates[];

  /**
   * Authorization server token endpoint URI.
   *
   * @schema KafkaConnectS2ISpecAuthentication#tokenEndpointUri
   */
  readonly tokenEndpointUri?: string;

  /**
   * Authentication type. Currently the only supported types are `tls`, `scram-sha-512`, and `plain`. `scram-sha-512` type uses SASL SCRAM-SHA-512 Authentication. `plain` type uses SASL PLAIN Authentication. `oauth` type uses SASL OAUTHBEARER Authentication. The `tls` type uses TLS Client Authentication. The `tls` type is supported only over TLS connections.
   *
   * @schema KafkaConnectS2ISpecAuthentication#type
   */
  readonly type: KafkaConnectS2ISpecAuthenticationType;

  /**
   * Username used for the authentication.
   *
   * @schema KafkaConnectS2ISpecAuthentication#username
   */
  readonly username?: string;

}

/**
 * Pass data from Secrets or ConfigMaps to the Kafka Connect pods and use them to configure connectors.
 *
 * @schema KafkaConnectS2ISpecExternalConfiguration
 */
export interface KafkaConnectS2ISpecExternalConfiguration {
  /**
   * Allows to pass data from Secret or ConfigMap to the Kafka Connect pods as environment variables.
   *
   * @schema KafkaConnectS2ISpecExternalConfiguration#env
   */
  readonly env?: KafkaConnectS2ISpecExternalConfigurationEnv[];

  /**
   * Allows to pass data from Secret or ConfigMap to the Kafka Connect pods as volumes.
   *
   * @schema KafkaConnectS2ISpecExternalConfiguration#volumes
   */
  readonly volumes?: KafkaConnectS2ISpecExternalConfigurationVolumes[];

}

/**
 * The maximum limits for CPU and memory resources and the requested initial resources.
 *
 * @schema KafkaConnectS2ISpecResources
 */
export interface KafkaConnectS2ISpecResources {
  /**
   * @schema KafkaConnectS2ISpecResources#limits
   */
  readonly limits?: any;

  /**
   * @schema KafkaConnectS2ISpecResources#requests
   */
  readonly requests?: any;

}

/**
 * TLS configuration.
 *
 * @schema KafkaConnectS2ISpecTls
 */
export interface KafkaConnectS2ISpecTls {
  /**
   * Trusted certificates for TLS connection.
   *
   * @schema KafkaConnectS2ISpecTls#trustedCertificates
   */
  readonly trustedCertificates?: KafkaConnectS2ISpecTlsTrustedCertificates[];

}

/**
 * @schema KafkaConnectS2ISpecTolerations
 */
export interface KafkaConnectS2ISpecTolerations {
  /**
   * @schema KafkaConnectS2ISpecTolerations#effect
   */
  readonly effect?: string;

  /**
   * @schema KafkaConnectS2ISpecTolerations#key
   */
  readonly key?: string;

  /**
   * @schema KafkaConnectS2ISpecTolerations#operator
   */
  readonly operator?: string;

  /**
   * @schema KafkaConnectS2ISpecTolerations#tolerationSeconds
   */
  readonly tolerationSeconds?: number;

  /**
   * @schema KafkaConnectS2ISpecTolerations#value
   */
  readonly value?: string;

}

/**
 * The configuration of tracing in Kafka Connect.
 *
 * @schema KafkaConnectS2ISpecTracing
 */
export interface KafkaConnectS2ISpecTracing {
  /**
   * Type of the tracing used. Currently the only supported type is `jaeger` for Jaeger tracing.
   *
   * @schema KafkaConnectS2ISpecTracing#type
   */
  readonly type: KafkaConnectS2ISpecTracingType;

}

/**
 * @schema KafkaConnectS2ISpecJvmOptionsJavaSystemProperties
 */
export interface KafkaConnectS2ISpecJvmOptionsJavaSystemProperties {
  /**
   * The system property name.
   *
   * @schema KafkaConnectS2ISpecJvmOptionsJavaSystemProperties#name
   */
  readonly name?: string;

  /**
   * The system property value.
   *
   * @schema KafkaConnectS2ISpecJvmOptionsJavaSystemProperties#value
   */
  readonly value?: string;

}

/**
 * @schema KafkaConnectS2ISpecAffinityNodeAffinity
 */
export interface KafkaConnectS2ISpecAffinityNodeAffinity {
  /**
   * @schema KafkaConnectS2ISpecAffinityNodeAffinity#preferredDuringSchedulingIgnoredDuringExecution
   */
  readonly preferredDuringSchedulingIgnoredDuringExecution?: KafkaConnectS2ISpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution[];

  /**
   * @schema KafkaConnectS2ISpecAffinityNodeAffinity#requiredDuringSchedulingIgnoredDuringExecution
   */
  readonly requiredDuringSchedulingIgnoredDuringExecution?: KafkaConnectS2ISpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution;

}

/**
 * @schema KafkaConnectS2ISpecAffinityPodAffinity
 */
export interface KafkaConnectS2ISpecAffinityPodAffinity {
  /**
   * @schema KafkaConnectS2ISpecAffinityPodAffinity#preferredDuringSchedulingIgnoredDuringExecution
   */
  readonly preferredDuringSchedulingIgnoredDuringExecution?: KafkaConnectS2ISpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution[];

  /**
   * @schema KafkaConnectS2ISpecAffinityPodAffinity#requiredDuringSchedulingIgnoredDuringExecution
   */
  readonly requiredDuringSchedulingIgnoredDuringExecution?: KafkaConnectS2ISpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution[];

}

/**
 * @schema KafkaConnectS2ISpecAffinityPodAntiAffinity
 */
export interface KafkaConnectS2ISpecAffinityPodAntiAffinity {
  /**
   * @schema KafkaConnectS2ISpecAffinityPodAntiAffinity#preferredDuringSchedulingIgnoredDuringExecution
   */
  readonly preferredDuringSchedulingIgnoredDuringExecution?: KafkaConnectS2ISpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution[];

  /**
   * @schema KafkaConnectS2ISpecAffinityPodAntiAffinity#requiredDuringSchedulingIgnoredDuringExecution
   */
  readonly requiredDuringSchedulingIgnoredDuringExecution?: KafkaConnectS2ISpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution[];

}

/**
 * Logging type, must be either 'inline' or 'external'.
 *
 * @schema KafkaConnectS2ISpecLoggingType
 */
export enum KafkaConnectS2ISpecLoggingType {
  /** inline */
  INLINE = "inline",
  /** external */
  EXTERNAL = "external",
}

/**
 * Template for Kafka Connect `Deployment`.
 *
 * @schema KafkaConnectS2ISpecTemplateDeployment
 */
export interface KafkaConnectS2ISpecTemplateDeployment {
  /**
   * Metadata which should be applied to the resource.
   *
   * @schema KafkaConnectS2ISpecTemplateDeployment#metadata
   */
  readonly metadata?: KafkaConnectS2ISpecTemplateDeploymentMetadata;

}

/**
 * Template for Kafka Connect `Pods`.
 *
 * @schema KafkaConnectS2ISpecTemplatePod
 */
export interface KafkaConnectS2ISpecTemplatePod {
  /**
   * Metadata applied to the resource.
   *
   * @schema KafkaConnectS2ISpecTemplatePod#metadata
   */
  readonly metadata?: KafkaConnectS2ISpecTemplatePodMetadata;

  /**
   * List of references to secrets in the same namespace to use for pulling any of the images used by this Pod.
   *
   * @schema KafkaConnectS2ISpecTemplatePod#imagePullSecrets
   */
  readonly imagePullSecrets?: KafkaConnectS2ISpecTemplatePodImagePullSecrets[];

  /**
   * Configures pod-level security attributes and common container settings.
   *
   * @schema KafkaConnectS2ISpecTemplatePod#securityContext
   */
  readonly securityContext?: KafkaConnectS2ISpecTemplatePodSecurityContext;

  /**
   * The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process.Value must be non-negative integer. The value zero indicates delete immediately. Defaults to 30 seconds.
   *
   * @default 30 seconds.
   * @schema KafkaConnectS2ISpecTemplatePod#terminationGracePeriodSeconds
   */
  readonly terminationGracePeriodSeconds?: number;

  /**
   * The pod's affinity rules.
   *
   * @schema KafkaConnectS2ISpecTemplatePod#affinity
   */
  readonly affinity?: KafkaConnectS2ISpecTemplatePodAffinity;

  /**
   * The name of the Priority Class to which these pods will be assigned.
   *
   * @schema KafkaConnectS2ISpecTemplatePod#priorityClassName
   */
  readonly priorityClassName?: string;

  /**
   * The name of the scheduler used to dispatch this `Pod`. If not specified, the default scheduler will be used.
   *
   * @schema KafkaConnectS2ISpecTemplatePod#schedulerName
   */
  readonly schedulerName?: string;

  /**
   * The pod's tolerations.
   *
   * @schema KafkaConnectS2ISpecTemplatePod#tolerations
   */
  readonly tolerations?: KafkaConnectS2ISpecTemplatePodTolerations[];

}

/**
 * Template for Kafka Connect API `Service`.
 *
 * @schema KafkaConnectS2ISpecTemplateApiService
 */
export interface KafkaConnectS2ISpecTemplateApiService {
  /**
   * Metadata which should be applied to the resource.
   *
   * @schema KafkaConnectS2ISpecTemplateApiService#metadata
   */
  readonly metadata?: KafkaConnectS2ISpecTemplateApiServiceMetadata;

}

/**
 * Template for the Kafka Connect container.
 *
 * @schema KafkaConnectS2ISpecTemplateConnectContainer
 */
export interface KafkaConnectS2ISpecTemplateConnectContainer {
  /**
   * Environment variables which should be applied to the container.
   *
   * @schema KafkaConnectS2ISpecTemplateConnectContainer#env
   */
  readonly env?: KafkaConnectS2ISpecTemplateConnectContainerEnv[];

  /**
   * Security context for the container.
   *
   * @schema KafkaConnectS2ISpecTemplateConnectContainer#securityContext
   */
  readonly securityContext?: KafkaConnectS2ISpecTemplateConnectContainerSecurityContext;

}

/**
 * Template for Kafka Connect `PodDisruptionBudget`.
 *
 * @schema KafkaConnectS2ISpecTemplatePodDisruptionBudget
 */
export interface KafkaConnectS2ISpecTemplatePodDisruptionBudget {
  /**
   * Metadata to apply to the `PodDistruptionBugetTemplate` resource.
   *
   * @schema KafkaConnectS2ISpecTemplatePodDisruptionBudget#metadata
   */
  readonly metadata?: KafkaConnectS2ISpecTemplatePodDisruptionBudgetMetadata;

  /**
   * Maximum number of unavailable pods to allow automatic Pod eviction. A Pod eviction is allowed when the `maxUnavailable` number of pods or fewer are unavailable after the eviction. Setting this value to 0 prevents all voluntary evictions, so the pods must be evicted manually. Defaults to 1.
   *
   * @default 1.
   * @schema KafkaConnectS2ISpecTemplatePodDisruptionBudget#maxUnavailable
   */
  readonly maxUnavailable?: number;

}

/**
 * Link to Kubernetes Secret containing the access token which was obtained from the authorization server.
 *
 * @schema KafkaConnectS2ISpecAuthenticationAccessToken
 */
export interface KafkaConnectS2ISpecAuthenticationAccessToken {
  /**
   * The key under which the secret value is stored in the Kubernetes Secret.
   *
   * @schema KafkaConnectS2ISpecAuthenticationAccessToken#key
   */
  readonly key: string;

  /**
   * The name of the Kubernetes Secret containing the secret value.
   *
   * @schema KafkaConnectS2ISpecAuthenticationAccessToken#secretName
   */
  readonly secretName: string;

}

/**
 * Reference to the `Secret` which holds the certificate and private key pair.
 *
 * @schema KafkaConnectS2ISpecAuthenticationCertificateAndKey
 */
export interface KafkaConnectS2ISpecAuthenticationCertificateAndKey {
  /**
   * The name of the file certificate in the Secret.
   *
   * @schema KafkaConnectS2ISpecAuthenticationCertificateAndKey#certificate
   */
  readonly certificate: string;

  /**
   * The name of the private key in the Secret.
   *
   * @schema KafkaConnectS2ISpecAuthenticationCertificateAndKey#key
   */
  readonly key: string;

  /**
   * The name of the Secret containing the certificate.
   *
   * @schema KafkaConnectS2ISpecAuthenticationCertificateAndKey#secretName
   */
  readonly secretName: string;

}

/**
 * Link to Kubernetes Secret containing the OAuth client secret which the Kafka client can use to authenticate against the OAuth server and use the token endpoint URI.
 *
 * @schema KafkaConnectS2ISpecAuthenticationClientSecret
 */
export interface KafkaConnectS2ISpecAuthenticationClientSecret {
  /**
   * The key under which the secret value is stored in the Kubernetes Secret.
   *
   * @schema KafkaConnectS2ISpecAuthenticationClientSecret#key
   */
  readonly key: string;

  /**
   * The name of the Kubernetes Secret containing the secret value.
   *
   * @schema KafkaConnectS2ISpecAuthenticationClientSecret#secretName
   */
  readonly secretName: string;

}

/**
 * Reference to the `Secret` which holds the password.
 *
 * @schema KafkaConnectS2ISpecAuthenticationPasswordSecret
 */
export interface KafkaConnectS2ISpecAuthenticationPasswordSecret {
  /**
   * The name of the key in the Secret under which the password is stored.
   *
   * @schema KafkaConnectS2ISpecAuthenticationPasswordSecret#password
   */
  readonly password: string;

  /**
   * The name of the Secret containing the password.
   *
   * @schema KafkaConnectS2ISpecAuthenticationPasswordSecret#secretName
   */
  readonly secretName: string;

}

/**
 * Link to Kubernetes Secret containing the refresh token which can be used to obtain access token from the authorization server.
 *
 * @schema KafkaConnectS2ISpecAuthenticationRefreshToken
 */
export interface KafkaConnectS2ISpecAuthenticationRefreshToken {
  /**
   * The key under which the secret value is stored in the Kubernetes Secret.
   *
   * @schema KafkaConnectS2ISpecAuthenticationRefreshToken#key
   */
  readonly key: string;

  /**
   * The name of the Kubernetes Secret containing the secret value.
   *
   * @schema KafkaConnectS2ISpecAuthenticationRefreshToken#secretName
   */
  readonly secretName: string;

}

/**
 * @schema KafkaConnectS2ISpecAuthenticationTlsTrustedCertificates
 */
export interface KafkaConnectS2ISpecAuthenticationTlsTrustedCertificates {
  /**
   * The name of the file certificate in the Secret.
   *
   * @schema KafkaConnectS2ISpecAuthenticationTlsTrustedCertificates#certificate
   */
  readonly certificate: string;

  /**
   * The name of the Secret containing the certificate.
   *
   * @schema KafkaConnectS2ISpecAuthenticationTlsTrustedCertificates#secretName
   */
  readonly secretName: string;

}

/**
 * Authentication type. Currently the only supported types are `tls`, `scram-sha-512`, and `plain`. `scram-sha-512` type uses SASL SCRAM-SHA-512 Authentication. `plain` type uses SASL PLAIN Authentication. `oauth` type uses SASL OAUTHBEARER Authentication. The `tls` type uses TLS Client Authentication. The `tls` type is supported only over TLS connections.
 *
 * @schema KafkaConnectS2ISpecAuthenticationType
 */
export enum KafkaConnectS2ISpecAuthenticationType {
  /** tls */
  TLS = "tls",
  /** scram-sha-512 */
  SCRAM_SHA_512 = "scram-sha-512",
  /** plain */
  PLAIN = "plain",
  /** oauth */
  OAUTH = "oauth",
}

/**
 * @schema KafkaConnectS2ISpecExternalConfigurationEnv
 */
export interface KafkaConnectS2ISpecExternalConfigurationEnv {
  /**
   * Name of the environment variable which will be passed to the Kafka Connect pods. The name of the environment variable cannot start with `KAFKA_` or `STRIMZI_`.
   *
   * @schema KafkaConnectS2ISpecExternalConfigurationEnv#name
   */
  readonly name: string;

  /**
   * Value of the environment variable which will be passed to the Kafka Connect pods. It can be passed either as a reference to Secret or ConfigMap field. The field has to specify exactly one Secret or ConfigMap.
   *
   * @schema KafkaConnectS2ISpecExternalConfigurationEnv#valueFrom
   */
  readonly valueFrom: KafkaConnectS2ISpecExternalConfigurationEnvValueFrom;

}

/**
 * @schema KafkaConnectS2ISpecExternalConfigurationVolumes
 */
export interface KafkaConnectS2ISpecExternalConfigurationVolumes {
  /**
   * Reference to a key in a ConfigMap. Exactly one Secret or ConfigMap has to be specified.
   *
   * @schema KafkaConnectS2ISpecExternalConfigurationVolumes#configMap
   */
  readonly configMap?: KafkaConnectS2ISpecExternalConfigurationVolumesConfigMap;

  /**
   * Name of the volume which will be added to the Kafka Connect pods.
   *
   * @schema KafkaConnectS2ISpecExternalConfigurationVolumes#name
   */
  readonly name: string;

  /**
   * Reference to a key in a Secret. Exactly one Secret or ConfigMap has to be specified.
   *
   * @schema KafkaConnectS2ISpecExternalConfigurationVolumes#secret
   */
  readonly secret?: KafkaConnectS2ISpecExternalConfigurationVolumesSecret;

}

/**
 * @schema KafkaConnectS2ISpecTlsTrustedCertificates
 */
export interface KafkaConnectS2ISpecTlsTrustedCertificates {
  /**
   * The name of the file certificate in the Secret.
   *
   * @schema KafkaConnectS2ISpecTlsTrustedCertificates#certificate
   */
  readonly certificate: string;

  /**
   * The name of the Secret containing the certificate.
   *
   * @schema KafkaConnectS2ISpecTlsTrustedCertificates#secretName
   */
  readonly secretName: string;

}

/**
 * Type of the tracing used. Currently the only supported type is `jaeger` for Jaeger tracing.
 *
 * @schema KafkaConnectS2ISpecTracingType
 */
export enum KafkaConnectS2ISpecTracingType {
  /** jaeger */
  JAEGER = "jaeger",
}

/**
 * @schema KafkaConnectS2ISpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution
 */
export interface KafkaConnectS2ISpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution {
  /**
   * @schema KafkaConnectS2ISpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution#preference
   */
  readonly preference?: KafkaConnectS2ISpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference;

  /**
   * @schema KafkaConnectS2ISpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution#weight
   */
  readonly weight?: number;

}

/**
 * @schema KafkaConnectS2ISpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution
 */
export interface KafkaConnectS2ISpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution {
  /**
   * @schema KafkaConnectS2ISpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution#nodeSelectorTerms
   */
  readonly nodeSelectorTerms?: KafkaConnectS2ISpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms[];

}

/**
 * @schema KafkaConnectS2ISpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution
 */
export interface KafkaConnectS2ISpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution {
  /**
   * @schema KafkaConnectS2ISpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution#podAffinityTerm
   */
  readonly podAffinityTerm?: KafkaConnectS2ISpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm;

  /**
   * @schema KafkaConnectS2ISpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution#weight
   */
  readonly weight?: number;

}

/**
 * @schema KafkaConnectS2ISpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution
 */
export interface KafkaConnectS2ISpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution {
  /**
   * @schema KafkaConnectS2ISpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution#labelSelector
   */
  readonly labelSelector?: KafkaConnectS2ISpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector;

  /**
   * @schema KafkaConnectS2ISpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution#namespaces
   */
  readonly namespaces?: string[];

  /**
   * @schema KafkaConnectS2ISpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution#topologyKey
   */
  readonly topologyKey?: string;

}

/**
 * @schema KafkaConnectS2ISpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution
 */
export interface KafkaConnectS2ISpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution {
  /**
   * @schema KafkaConnectS2ISpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution#podAffinityTerm
   */
  readonly podAffinityTerm?: KafkaConnectS2ISpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm;

  /**
   * @schema KafkaConnectS2ISpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution#weight
   */
  readonly weight?: number;

}

/**
 * @schema KafkaConnectS2ISpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution
 */
export interface KafkaConnectS2ISpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution {
  /**
   * @schema KafkaConnectS2ISpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution#labelSelector
   */
  readonly labelSelector?: KafkaConnectS2ISpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector;

  /**
   * @schema KafkaConnectS2ISpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution#namespaces
   */
  readonly namespaces?: string[];

  /**
   * @schema KafkaConnectS2ISpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution#topologyKey
   */
  readonly topologyKey?: string;

}

/**
 * Metadata which should be applied to the resource.
 *
 * @schema KafkaConnectS2ISpecTemplateDeploymentMetadata
 */
export interface KafkaConnectS2ISpecTemplateDeploymentMetadata {
  /**
   * Labels which should be added to the resource template. Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
   *
   * @schema KafkaConnectS2ISpecTemplateDeploymentMetadata#labels
   */
  readonly labels?: any;

  /**
   * Annotations which should be added to the resource template. Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
   *
   * @schema KafkaConnectS2ISpecTemplateDeploymentMetadata#annotations
   */
  readonly annotations?: any;

}

/**
 * Metadata applied to the resource.
 *
 * @schema KafkaConnectS2ISpecTemplatePodMetadata
 */
export interface KafkaConnectS2ISpecTemplatePodMetadata {
  /**
   * Labels which should be added to the resource template. Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
   *
   * @schema KafkaConnectS2ISpecTemplatePodMetadata#labels
   */
  readonly labels?: any;

  /**
   * Annotations which should be added to the resource template. Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
   *
   * @schema KafkaConnectS2ISpecTemplatePodMetadata#annotations
   */
  readonly annotations?: any;

}

/**
 * @schema KafkaConnectS2ISpecTemplatePodImagePullSecrets
 */
export interface KafkaConnectS2ISpecTemplatePodImagePullSecrets {
  /**
   * @schema KafkaConnectS2ISpecTemplatePodImagePullSecrets#name
   */
  readonly name?: string;

}

/**
 * Configures pod-level security attributes and common container settings.
 *
 * @schema KafkaConnectS2ISpecTemplatePodSecurityContext
 */
export interface KafkaConnectS2ISpecTemplatePodSecurityContext {
  /**
   * @schema KafkaConnectS2ISpecTemplatePodSecurityContext#fsGroup
   */
  readonly fsGroup?: number;

  /**
   * @schema KafkaConnectS2ISpecTemplatePodSecurityContext#runAsGroup
   */
  readonly runAsGroup?: number;

  /**
   * @schema KafkaConnectS2ISpecTemplatePodSecurityContext#runAsNonRoot
   */
  readonly runAsNonRoot?: boolean;

  /**
   * @schema KafkaConnectS2ISpecTemplatePodSecurityContext#runAsUser
   */
  readonly runAsUser?: number;

  /**
   * @schema KafkaConnectS2ISpecTemplatePodSecurityContext#seLinuxOptions
   */
  readonly seLinuxOptions?: KafkaConnectS2ISpecTemplatePodSecurityContextSeLinuxOptions;

  /**
   * @schema KafkaConnectS2ISpecTemplatePodSecurityContext#supplementalGroups
   */
  readonly supplementalGroups?: number[];

  /**
   * @schema KafkaConnectS2ISpecTemplatePodSecurityContext#sysctls
   */
  readonly sysctls?: KafkaConnectS2ISpecTemplatePodSecurityContextSysctls[];

  /**
   * @schema KafkaConnectS2ISpecTemplatePodSecurityContext#windowsOptions
   */
  readonly windowsOptions?: KafkaConnectS2ISpecTemplatePodSecurityContextWindowsOptions;

}

/**
 * The pod's affinity rules.
 *
 * @schema KafkaConnectS2ISpecTemplatePodAffinity
 */
export interface KafkaConnectS2ISpecTemplatePodAffinity {
  /**
   * @schema KafkaConnectS2ISpecTemplatePodAffinity#nodeAffinity
   */
  readonly nodeAffinity?: KafkaConnectS2ISpecTemplatePodAffinityNodeAffinity;

  /**
   * @schema KafkaConnectS2ISpecTemplatePodAffinity#podAffinity
   */
  readonly podAffinity?: KafkaConnectS2ISpecTemplatePodAffinityPodAffinity;

  /**
   * @schema KafkaConnectS2ISpecTemplatePodAffinity#podAntiAffinity
   */
  readonly podAntiAffinity?: KafkaConnectS2ISpecTemplatePodAffinityPodAntiAffinity;

}

/**
 * @schema KafkaConnectS2ISpecTemplatePodTolerations
 */
export interface KafkaConnectS2ISpecTemplatePodTolerations {
  /**
   * @schema KafkaConnectS2ISpecTemplatePodTolerations#effect
   */
  readonly effect?: string;

  /**
   * @schema KafkaConnectS2ISpecTemplatePodTolerations#key
   */
  readonly key?: string;

  /**
   * @schema KafkaConnectS2ISpecTemplatePodTolerations#operator
   */
  readonly operator?: string;

  /**
   * @schema KafkaConnectS2ISpecTemplatePodTolerations#tolerationSeconds
   */
  readonly tolerationSeconds?: number;

  /**
   * @schema KafkaConnectS2ISpecTemplatePodTolerations#value
   */
  readonly value?: string;

}

/**
 * Metadata which should be applied to the resource.
 *
 * @schema KafkaConnectS2ISpecTemplateApiServiceMetadata
 */
export interface KafkaConnectS2ISpecTemplateApiServiceMetadata {
  /**
   * Labels which should be added to the resource template. Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
   *
   * @schema KafkaConnectS2ISpecTemplateApiServiceMetadata#labels
   */
  readonly labels?: any;

  /**
   * Annotations which should be added to the resource template. Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
   *
   * @schema KafkaConnectS2ISpecTemplateApiServiceMetadata#annotations
   */
  readonly annotations?: any;

}

/**
 * @schema KafkaConnectS2ISpecTemplateConnectContainerEnv
 */
export interface KafkaConnectS2ISpecTemplateConnectContainerEnv {
  /**
   * The environment variable key.
   *
   * @schema KafkaConnectS2ISpecTemplateConnectContainerEnv#name
   */
  readonly name?: string;

  /**
   * The environment variable value.
   *
   * @schema KafkaConnectS2ISpecTemplateConnectContainerEnv#value
   */
  readonly value?: string;

}

/**
 * Security context for the container.
 *
 * @schema KafkaConnectS2ISpecTemplateConnectContainerSecurityContext
 */
export interface KafkaConnectS2ISpecTemplateConnectContainerSecurityContext {
  /**
   * @schema KafkaConnectS2ISpecTemplateConnectContainerSecurityContext#allowPrivilegeEscalation
   */
  readonly allowPrivilegeEscalation?: boolean;

  /**
   * @schema KafkaConnectS2ISpecTemplateConnectContainerSecurityContext#capabilities
   */
  readonly capabilities?: KafkaConnectS2ISpecTemplateConnectContainerSecurityContextCapabilities;

  /**
   * @schema KafkaConnectS2ISpecTemplateConnectContainerSecurityContext#privileged
   */
  readonly privileged?: boolean;

  /**
   * @schema KafkaConnectS2ISpecTemplateConnectContainerSecurityContext#procMount
   */
  readonly procMount?: string;

  /**
   * @schema KafkaConnectS2ISpecTemplateConnectContainerSecurityContext#readOnlyRootFilesystem
   */
  readonly readOnlyRootFilesystem?: boolean;

  /**
   * @schema KafkaConnectS2ISpecTemplateConnectContainerSecurityContext#runAsGroup
   */
  readonly runAsGroup?: number;

  /**
   * @schema KafkaConnectS2ISpecTemplateConnectContainerSecurityContext#runAsNonRoot
   */
  readonly runAsNonRoot?: boolean;

  /**
   * @schema KafkaConnectS2ISpecTemplateConnectContainerSecurityContext#runAsUser
   */
  readonly runAsUser?: number;

  /**
   * @schema KafkaConnectS2ISpecTemplateConnectContainerSecurityContext#seLinuxOptions
   */
  readonly seLinuxOptions?: KafkaConnectS2ISpecTemplateConnectContainerSecurityContextSeLinuxOptions;

  /**
   * @schema KafkaConnectS2ISpecTemplateConnectContainerSecurityContext#windowsOptions
   */
  readonly windowsOptions?: KafkaConnectS2ISpecTemplateConnectContainerSecurityContextWindowsOptions;

}

/**
 * Metadata to apply to the `PodDistruptionBugetTemplate` resource.
 *
 * @schema KafkaConnectS2ISpecTemplatePodDisruptionBudgetMetadata
 */
export interface KafkaConnectS2ISpecTemplatePodDisruptionBudgetMetadata {
  /**
   * Labels which should be added to the resource template. Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
   *
   * @schema KafkaConnectS2ISpecTemplatePodDisruptionBudgetMetadata#labels
   */
  readonly labels?: any;

  /**
   * Annotations which should be added to the resource template. Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
   *
   * @schema KafkaConnectS2ISpecTemplatePodDisruptionBudgetMetadata#annotations
   */
  readonly annotations?: any;

}

/**
 * Value of the environment variable which will be passed to the Kafka Connect pods. It can be passed either as a reference to Secret or ConfigMap field. The field has to specify exactly one Secret or ConfigMap.
 *
 * @schema KafkaConnectS2ISpecExternalConfigurationEnvValueFrom
 */
export interface KafkaConnectS2ISpecExternalConfigurationEnvValueFrom {
  /**
   * Refernce to a key in a ConfigMap.
   *
   * @schema KafkaConnectS2ISpecExternalConfigurationEnvValueFrom#configMapKeyRef
   */
  readonly configMapKeyRef?: KafkaConnectS2ISpecExternalConfigurationEnvValueFromConfigMapKeyRef;

  /**
   * Reference to a key in a Secret.
   *
   * @schema KafkaConnectS2ISpecExternalConfigurationEnvValueFrom#secretKeyRef
   */
  readonly secretKeyRef?: KafkaConnectS2ISpecExternalConfigurationEnvValueFromSecretKeyRef;

}

/**
 * Reference to a key in a ConfigMap. Exactly one Secret or ConfigMap has to be specified.
 *
 * @schema KafkaConnectS2ISpecExternalConfigurationVolumesConfigMap
 */
export interface KafkaConnectS2ISpecExternalConfigurationVolumesConfigMap {
  /**
   * @schema KafkaConnectS2ISpecExternalConfigurationVolumesConfigMap#defaultMode
   */
  readonly defaultMode?: number;

  /**
   * @schema KafkaConnectS2ISpecExternalConfigurationVolumesConfigMap#items
   */
  readonly items?: KafkaConnectS2ISpecExternalConfigurationVolumesConfigMapItems[];

  /**
   * @schema KafkaConnectS2ISpecExternalConfigurationVolumesConfigMap#name
   */
  readonly name?: string;

  /**
   * @schema KafkaConnectS2ISpecExternalConfigurationVolumesConfigMap#optional
   */
  readonly optional?: boolean;

}

/**
 * Reference to a key in a Secret. Exactly one Secret or ConfigMap has to be specified.
 *
 * @schema KafkaConnectS2ISpecExternalConfigurationVolumesSecret
 */
export interface KafkaConnectS2ISpecExternalConfigurationVolumesSecret {
  /**
   * @schema KafkaConnectS2ISpecExternalConfigurationVolumesSecret#defaultMode
   */
  readonly defaultMode?: number;

  /**
   * @schema KafkaConnectS2ISpecExternalConfigurationVolumesSecret#items
   */
  readonly items?: KafkaConnectS2ISpecExternalConfigurationVolumesSecretItems[];

  /**
   * @schema KafkaConnectS2ISpecExternalConfigurationVolumesSecret#optional
   */
  readonly optional?: boolean;

  /**
   * @schema KafkaConnectS2ISpecExternalConfigurationVolumesSecret#secretName
   */
  readonly secretName?: string;

}

/**
 * @schema KafkaConnectS2ISpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference
 */
export interface KafkaConnectS2ISpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference {
  /**
   * @schema KafkaConnectS2ISpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference#matchExpressions
   */
  readonly matchExpressions?: KafkaConnectS2ISpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions[];

  /**
   * @schema KafkaConnectS2ISpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference#matchFields
   */
  readonly matchFields?: KafkaConnectS2ISpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields[];

}

/**
 * @schema KafkaConnectS2ISpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms
 */
export interface KafkaConnectS2ISpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms {
  /**
   * @schema KafkaConnectS2ISpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms#matchExpressions
   */
  readonly matchExpressions?: KafkaConnectS2ISpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions[];

  /**
   * @schema KafkaConnectS2ISpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms#matchFields
   */
  readonly matchFields?: KafkaConnectS2ISpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields[];

}

/**
 * @schema KafkaConnectS2ISpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm
 */
export interface KafkaConnectS2ISpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
  /**
   * @schema KafkaConnectS2ISpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm#labelSelector
   */
  readonly labelSelector?: KafkaConnectS2ISpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector;

  /**
   * @schema KafkaConnectS2ISpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm#namespaces
   */
  readonly namespaces?: string[];

  /**
   * @schema KafkaConnectS2ISpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm#topologyKey
   */
  readonly topologyKey?: string;

}

/**
 * @schema KafkaConnectS2ISpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector
 */
export interface KafkaConnectS2ISpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
  /**
   * @schema KafkaConnectS2ISpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector#matchExpressions
   */
  readonly matchExpressions?: KafkaConnectS2ISpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions[];

  /**
   * @schema KafkaConnectS2ISpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector#matchLabels
   */
  readonly matchLabels?: any;

}

/**
 * @schema KafkaConnectS2ISpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm
 */
export interface KafkaConnectS2ISpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
  /**
   * @schema KafkaConnectS2ISpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm#labelSelector
   */
  readonly labelSelector?: KafkaConnectS2ISpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector;

  /**
   * @schema KafkaConnectS2ISpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm#namespaces
   */
  readonly namespaces?: string[];

  /**
   * @schema KafkaConnectS2ISpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm#topologyKey
   */
  readonly topologyKey?: string;

}

/**
 * @schema KafkaConnectS2ISpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector
 */
export interface KafkaConnectS2ISpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
  /**
   * @schema KafkaConnectS2ISpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector#matchExpressions
   */
  readonly matchExpressions?: KafkaConnectS2ISpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions[];

  /**
   * @schema KafkaConnectS2ISpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector#matchLabels
   */
  readonly matchLabels?: any;

}

/**
 * @schema KafkaConnectS2ISpecTemplatePodSecurityContextSeLinuxOptions
 */
export interface KafkaConnectS2ISpecTemplatePodSecurityContextSeLinuxOptions {
  /**
   * @schema KafkaConnectS2ISpecTemplatePodSecurityContextSeLinuxOptions#level
   */
  readonly level?: string;

  /**
   * @schema KafkaConnectS2ISpecTemplatePodSecurityContextSeLinuxOptions#role
   */
  readonly role?: string;

  /**
   * @schema KafkaConnectS2ISpecTemplatePodSecurityContextSeLinuxOptions#type
   */
  readonly type?: string;

  /**
   * @schema KafkaConnectS2ISpecTemplatePodSecurityContextSeLinuxOptions#user
   */
  readonly user?: string;

}

/**
 * @schema KafkaConnectS2ISpecTemplatePodSecurityContextSysctls
 */
export interface KafkaConnectS2ISpecTemplatePodSecurityContextSysctls {
  /**
   * @schema KafkaConnectS2ISpecTemplatePodSecurityContextSysctls#name
   */
  readonly name?: string;

  /**
   * @schema KafkaConnectS2ISpecTemplatePodSecurityContextSysctls#value
   */
  readonly value?: string;

}

/**
 * @schema KafkaConnectS2ISpecTemplatePodSecurityContextWindowsOptions
 */
export interface KafkaConnectS2ISpecTemplatePodSecurityContextWindowsOptions {
  /**
   * @schema KafkaConnectS2ISpecTemplatePodSecurityContextWindowsOptions#gmsaCredentialSpec
   */
  readonly gmsaCredentialSpec?: string;

  /**
   * @schema KafkaConnectS2ISpecTemplatePodSecurityContextWindowsOptions#gmsaCredentialSpecName
   */
  readonly gmsaCredentialSpecName?: string;

}

/**
 * @schema KafkaConnectS2ISpecTemplatePodAffinityNodeAffinity
 */
export interface KafkaConnectS2ISpecTemplatePodAffinityNodeAffinity {
  /**
   * @schema KafkaConnectS2ISpecTemplatePodAffinityNodeAffinity#preferredDuringSchedulingIgnoredDuringExecution
   */
  readonly preferredDuringSchedulingIgnoredDuringExecution?: KafkaConnectS2ISpecTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution[];

  /**
   * @schema KafkaConnectS2ISpecTemplatePodAffinityNodeAffinity#requiredDuringSchedulingIgnoredDuringExecution
   */
  readonly requiredDuringSchedulingIgnoredDuringExecution?: KafkaConnectS2ISpecTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution;

}

/**
 * @schema KafkaConnectS2ISpecTemplatePodAffinityPodAffinity
 */
export interface KafkaConnectS2ISpecTemplatePodAffinityPodAffinity {
  /**
   * @schema KafkaConnectS2ISpecTemplatePodAffinityPodAffinity#preferredDuringSchedulingIgnoredDuringExecution
   */
  readonly preferredDuringSchedulingIgnoredDuringExecution?: KafkaConnectS2ISpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution[];

  /**
   * @schema KafkaConnectS2ISpecTemplatePodAffinityPodAffinity#requiredDuringSchedulingIgnoredDuringExecution
   */
  readonly requiredDuringSchedulingIgnoredDuringExecution?: KafkaConnectS2ISpecTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution[];

}

/**
 * @schema KafkaConnectS2ISpecTemplatePodAffinityPodAntiAffinity
 */
export interface KafkaConnectS2ISpecTemplatePodAffinityPodAntiAffinity {
  /**
   * @schema KafkaConnectS2ISpecTemplatePodAffinityPodAntiAffinity#preferredDuringSchedulingIgnoredDuringExecution
   */
  readonly preferredDuringSchedulingIgnoredDuringExecution?: KafkaConnectS2ISpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution[];

  /**
   * @schema KafkaConnectS2ISpecTemplatePodAffinityPodAntiAffinity#requiredDuringSchedulingIgnoredDuringExecution
   */
  readonly requiredDuringSchedulingIgnoredDuringExecution?: KafkaConnectS2ISpecTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution[];

}

/**
 * @schema KafkaConnectS2ISpecTemplateConnectContainerSecurityContextCapabilities
 */
export interface KafkaConnectS2ISpecTemplateConnectContainerSecurityContextCapabilities {
  /**
   * @schema KafkaConnectS2ISpecTemplateConnectContainerSecurityContextCapabilities#add
   */
  readonly add?: string[];

  /**
   * @schema KafkaConnectS2ISpecTemplateConnectContainerSecurityContextCapabilities#drop
   */
  readonly drop?: string[];

}

/**
 * @schema KafkaConnectS2ISpecTemplateConnectContainerSecurityContextSeLinuxOptions
 */
export interface KafkaConnectS2ISpecTemplateConnectContainerSecurityContextSeLinuxOptions {
  /**
   * @schema KafkaConnectS2ISpecTemplateConnectContainerSecurityContextSeLinuxOptions#level
   */
  readonly level?: string;

  /**
   * @schema KafkaConnectS2ISpecTemplateConnectContainerSecurityContextSeLinuxOptions#role
   */
  readonly role?: string;

  /**
   * @schema KafkaConnectS2ISpecTemplateConnectContainerSecurityContextSeLinuxOptions#type
   */
  readonly type?: string;

  /**
   * @schema KafkaConnectS2ISpecTemplateConnectContainerSecurityContextSeLinuxOptions#user
   */
  readonly user?: string;

}

/**
 * @schema KafkaConnectS2ISpecTemplateConnectContainerSecurityContextWindowsOptions
 */
export interface KafkaConnectS2ISpecTemplateConnectContainerSecurityContextWindowsOptions {
  /**
   * @schema KafkaConnectS2ISpecTemplateConnectContainerSecurityContextWindowsOptions#gmsaCredentialSpec
   */
  readonly gmsaCredentialSpec?: string;

  /**
   * @schema KafkaConnectS2ISpecTemplateConnectContainerSecurityContextWindowsOptions#gmsaCredentialSpecName
   */
  readonly gmsaCredentialSpecName?: string;

}

/**
 * Refernce to a key in a ConfigMap.
 *
 * @schema KafkaConnectS2ISpecExternalConfigurationEnvValueFromConfigMapKeyRef
 */
export interface KafkaConnectS2ISpecExternalConfigurationEnvValueFromConfigMapKeyRef {
  /**
   * @schema KafkaConnectS2ISpecExternalConfigurationEnvValueFromConfigMapKeyRef#key
   */
  readonly key?: string;

  /**
   * @schema KafkaConnectS2ISpecExternalConfigurationEnvValueFromConfigMapKeyRef#name
   */
  readonly name?: string;

  /**
   * @schema KafkaConnectS2ISpecExternalConfigurationEnvValueFromConfigMapKeyRef#optional
   */
  readonly optional?: boolean;

}

/**
 * Reference to a key in a Secret.
 *
 * @schema KafkaConnectS2ISpecExternalConfigurationEnvValueFromSecretKeyRef
 */
export interface KafkaConnectS2ISpecExternalConfigurationEnvValueFromSecretKeyRef {
  /**
   * @schema KafkaConnectS2ISpecExternalConfigurationEnvValueFromSecretKeyRef#key
   */
  readonly key?: string;

  /**
   * @schema KafkaConnectS2ISpecExternalConfigurationEnvValueFromSecretKeyRef#name
   */
  readonly name?: string;

  /**
   * @schema KafkaConnectS2ISpecExternalConfigurationEnvValueFromSecretKeyRef#optional
   */
  readonly optional?: boolean;

}

/**
 * @schema KafkaConnectS2ISpecExternalConfigurationVolumesConfigMapItems
 */
export interface KafkaConnectS2ISpecExternalConfigurationVolumesConfigMapItems {
  /**
   * @schema KafkaConnectS2ISpecExternalConfigurationVolumesConfigMapItems#key
   */
  readonly key?: string;

  /**
   * @schema KafkaConnectS2ISpecExternalConfigurationVolumesConfigMapItems#mode
   */
  readonly mode?: number;

  /**
   * @schema KafkaConnectS2ISpecExternalConfigurationVolumesConfigMapItems#path
   */
  readonly path?: string;

}

/**
 * @schema KafkaConnectS2ISpecExternalConfigurationVolumesSecretItems
 */
export interface KafkaConnectS2ISpecExternalConfigurationVolumesSecretItems {
  /**
   * @schema KafkaConnectS2ISpecExternalConfigurationVolumesSecretItems#key
   */
  readonly key?: string;

  /**
   * @schema KafkaConnectS2ISpecExternalConfigurationVolumesSecretItems#mode
   */
  readonly mode?: number;

  /**
   * @schema KafkaConnectS2ISpecExternalConfigurationVolumesSecretItems#path
   */
  readonly path?: string;

}

/**
 * @schema KafkaConnectS2ISpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions
 */
export interface KafkaConnectS2ISpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions {
  /**
   * @schema KafkaConnectS2ISpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions#key
   */
  readonly key?: string;

  /**
   * @schema KafkaConnectS2ISpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions#operator
   */
  readonly operator?: string;

  /**
   * @schema KafkaConnectS2ISpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions#values
   */
  readonly values?: string[];

}

/**
 * @schema KafkaConnectS2ISpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields
 */
export interface KafkaConnectS2ISpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields {
  /**
   * @schema KafkaConnectS2ISpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields#key
   */
  readonly key?: string;

  /**
   * @schema KafkaConnectS2ISpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields#operator
   */
  readonly operator?: string;

  /**
   * @schema KafkaConnectS2ISpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields#values
   */
  readonly values?: string[];

}

/**
 * @schema KafkaConnectS2ISpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions
 */
export interface KafkaConnectS2ISpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions {
  /**
   * @schema KafkaConnectS2ISpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions#key
   */
  readonly key?: string;

  /**
   * @schema KafkaConnectS2ISpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions#operator
   */
  readonly operator?: string;

  /**
   * @schema KafkaConnectS2ISpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions#values
   */
  readonly values?: string[];

}

/**
 * @schema KafkaConnectS2ISpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields
 */
export interface KafkaConnectS2ISpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields {
  /**
   * @schema KafkaConnectS2ISpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields#key
   */
  readonly key?: string;

  /**
   * @schema KafkaConnectS2ISpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields#operator
   */
  readonly operator?: string;

  /**
   * @schema KafkaConnectS2ISpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields#values
   */
  readonly values?: string[];

}

/**
 * @schema KafkaConnectS2ISpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector
 */
export interface KafkaConnectS2ISpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
  /**
   * @schema KafkaConnectS2ISpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector#matchExpressions
   */
  readonly matchExpressions?: KafkaConnectS2ISpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions[];

  /**
   * @schema KafkaConnectS2ISpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector#matchLabels
   */
  readonly matchLabels?: any;

}

/**
 * @schema KafkaConnectS2ISpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions
 */
export interface KafkaConnectS2ISpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
  /**
   * @schema KafkaConnectS2ISpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions#key
   */
  readonly key?: string;

  /**
   * @schema KafkaConnectS2ISpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions#operator
   */
  readonly operator?: string;

  /**
   * @schema KafkaConnectS2ISpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions#values
   */
  readonly values?: string[];

}

/**
 * @schema KafkaConnectS2ISpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector
 */
export interface KafkaConnectS2ISpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
  /**
   * @schema KafkaConnectS2ISpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector#matchExpressions
   */
  readonly matchExpressions?: KafkaConnectS2ISpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions[];

  /**
   * @schema KafkaConnectS2ISpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector#matchLabels
   */
  readonly matchLabels?: any;

}

/**
 * @schema KafkaConnectS2ISpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions
 */
export interface KafkaConnectS2ISpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
  /**
   * @schema KafkaConnectS2ISpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions#key
   */
  readonly key?: string;

  /**
   * @schema KafkaConnectS2ISpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions#operator
   */
  readonly operator?: string;

  /**
   * @schema KafkaConnectS2ISpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions#values
   */
  readonly values?: string[];

}

/**
 * @schema KafkaConnectS2ISpecTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution
 */
export interface KafkaConnectS2ISpecTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution {
  /**
   * @schema KafkaConnectS2ISpecTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution#preference
   */
  readonly preference?: KafkaConnectS2ISpecTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference;

  /**
   * @schema KafkaConnectS2ISpecTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution#weight
   */
  readonly weight?: number;

}

/**
 * @schema KafkaConnectS2ISpecTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution
 */
export interface KafkaConnectS2ISpecTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution {
  /**
   * @schema KafkaConnectS2ISpecTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution#nodeSelectorTerms
   */
  readonly nodeSelectorTerms?: KafkaConnectS2ISpecTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms[];

}

/**
 * @schema KafkaConnectS2ISpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution
 */
export interface KafkaConnectS2ISpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution {
  /**
   * @schema KafkaConnectS2ISpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution#podAffinityTerm
   */
  readonly podAffinityTerm?: KafkaConnectS2ISpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm;

  /**
   * @schema KafkaConnectS2ISpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution#weight
   */
  readonly weight?: number;

}

/**
 * @schema KafkaConnectS2ISpecTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution
 */
export interface KafkaConnectS2ISpecTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution {
  /**
   * @schema KafkaConnectS2ISpecTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution#labelSelector
   */
  readonly labelSelector?: KafkaConnectS2ISpecTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector;

  /**
   * @schema KafkaConnectS2ISpecTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution#namespaces
   */
  readonly namespaces?: string[];

  /**
   * @schema KafkaConnectS2ISpecTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution#topologyKey
   */
  readonly topologyKey?: string;

}

/**
 * @schema KafkaConnectS2ISpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution
 */
export interface KafkaConnectS2ISpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution {
  /**
   * @schema KafkaConnectS2ISpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution#podAffinityTerm
   */
  readonly podAffinityTerm?: KafkaConnectS2ISpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm;

  /**
   * @schema KafkaConnectS2ISpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution#weight
   */
  readonly weight?: number;

}

/**
 * @schema KafkaConnectS2ISpecTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution
 */
export interface KafkaConnectS2ISpecTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution {
  /**
   * @schema KafkaConnectS2ISpecTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution#labelSelector
   */
  readonly labelSelector?: KafkaConnectS2ISpecTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector;

  /**
   * @schema KafkaConnectS2ISpecTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution#namespaces
   */
  readonly namespaces?: string[];

  /**
   * @schema KafkaConnectS2ISpecTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution#topologyKey
   */
  readonly topologyKey?: string;

}

/**
 * @schema KafkaConnectS2ISpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions
 */
export interface KafkaConnectS2ISpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
  /**
   * @schema KafkaConnectS2ISpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions#key
   */
  readonly key?: string;

  /**
   * @schema KafkaConnectS2ISpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions#operator
   */
  readonly operator?: string;

  /**
   * @schema KafkaConnectS2ISpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions#values
   */
  readonly values?: string[];

}

/**
 * @schema KafkaConnectS2ISpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions
 */
export interface KafkaConnectS2ISpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
  /**
   * @schema KafkaConnectS2ISpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions#key
   */
  readonly key?: string;

  /**
   * @schema KafkaConnectS2ISpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions#operator
   */
  readonly operator?: string;

  /**
   * @schema KafkaConnectS2ISpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions#values
   */
  readonly values?: string[];

}

/**
 * @schema KafkaConnectS2ISpecTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference
 */
export interface KafkaConnectS2ISpecTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference {
  /**
   * @schema KafkaConnectS2ISpecTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference#matchExpressions
   */
  readonly matchExpressions?: KafkaConnectS2ISpecTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions[];

  /**
   * @schema KafkaConnectS2ISpecTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference#matchFields
   */
  readonly matchFields?: KafkaConnectS2ISpecTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields[];

}

/**
 * @schema KafkaConnectS2ISpecTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms
 */
export interface KafkaConnectS2ISpecTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms {
  /**
   * @schema KafkaConnectS2ISpecTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms#matchExpressions
   */
  readonly matchExpressions?: KafkaConnectS2ISpecTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions[];

  /**
   * @schema KafkaConnectS2ISpecTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms#matchFields
   */
  readonly matchFields?: KafkaConnectS2ISpecTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields[];

}

/**
 * @schema KafkaConnectS2ISpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm
 */
export interface KafkaConnectS2ISpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
  /**
   * @schema KafkaConnectS2ISpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm#labelSelector
   */
  readonly labelSelector?: KafkaConnectS2ISpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector;

  /**
   * @schema KafkaConnectS2ISpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm#namespaces
   */
  readonly namespaces?: string[];

  /**
   * @schema KafkaConnectS2ISpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm#topologyKey
   */
  readonly topologyKey?: string;

}

/**
 * @schema KafkaConnectS2ISpecTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector
 */
export interface KafkaConnectS2ISpecTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
  /**
   * @schema KafkaConnectS2ISpecTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector#matchExpressions
   */
  readonly matchExpressions?: KafkaConnectS2ISpecTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions[];

  /**
   * @schema KafkaConnectS2ISpecTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector#matchLabels
   */
  readonly matchLabels?: any;

}

/**
 * @schema KafkaConnectS2ISpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm
 */
export interface KafkaConnectS2ISpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
  /**
   * @schema KafkaConnectS2ISpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm#labelSelector
   */
  readonly labelSelector?: KafkaConnectS2ISpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector;

  /**
   * @schema KafkaConnectS2ISpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm#namespaces
   */
  readonly namespaces?: string[];

  /**
   * @schema KafkaConnectS2ISpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm#topologyKey
   */
  readonly topologyKey?: string;

}

/**
 * @schema KafkaConnectS2ISpecTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector
 */
export interface KafkaConnectS2ISpecTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
  /**
   * @schema KafkaConnectS2ISpecTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector#matchExpressions
   */
  readonly matchExpressions?: KafkaConnectS2ISpecTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions[];

  /**
   * @schema KafkaConnectS2ISpecTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector#matchLabels
   */
  readonly matchLabels?: any;

}

/**
 * @schema KafkaConnectS2ISpecTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions
 */
export interface KafkaConnectS2ISpecTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions {
  /**
   * @schema KafkaConnectS2ISpecTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions#key
   */
  readonly key?: string;

  /**
   * @schema KafkaConnectS2ISpecTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions#operator
   */
  readonly operator?: string;

  /**
   * @schema KafkaConnectS2ISpecTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions#values
   */
  readonly values?: string[];

}

/**
 * @schema KafkaConnectS2ISpecTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields
 */
export interface KafkaConnectS2ISpecTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields {
  /**
   * @schema KafkaConnectS2ISpecTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields#key
   */
  readonly key?: string;

  /**
   * @schema KafkaConnectS2ISpecTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields#operator
   */
  readonly operator?: string;

  /**
   * @schema KafkaConnectS2ISpecTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields#values
   */
  readonly values?: string[];

}

/**
 * @schema KafkaConnectS2ISpecTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions
 */
export interface KafkaConnectS2ISpecTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions {
  /**
   * @schema KafkaConnectS2ISpecTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions#key
   */
  readonly key?: string;

  /**
   * @schema KafkaConnectS2ISpecTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions#operator
   */
  readonly operator?: string;

  /**
   * @schema KafkaConnectS2ISpecTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions#values
   */
  readonly values?: string[];

}

/**
 * @schema KafkaConnectS2ISpecTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields
 */
export interface KafkaConnectS2ISpecTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields {
  /**
   * @schema KafkaConnectS2ISpecTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields#key
   */
  readonly key?: string;

  /**
   * @schema KafkaConnectS2ISpecTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields#operator
   */
  readonly operator?: string;

  /**
   * @schema KafkaConnectS2ISpecTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields#values
   */
  readonly values?: string[];

}

/**
 * @schema KafkaConnectS2ISpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector
 */
export interface KafkaConnectS2ISpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
  /**
   * @schema KafkaConnectS2ISpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector#matchExpressions
   */
  readonly matchExpressions?: KafkaConnectS2ISpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions[];

  /**
   * @schema KafkaConnectS2ISpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector#matchLabels
   */
  readonly matchLabels?: any;

}

/**
 * @schema KafkaConnectS2ISpecTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions
 */
export interface KafkaConnectS2ISpecTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
  /**
   * @schema KafkaConnectS2ISpecTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions#key
   */
  readonly key?: string;

  /**
   * @schema KafkaConnectS2ISpecTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions#operator
   */
  readonly operator?: string;

  /**
   * @schema KafkaConnectS2ISpecTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions#values
   */
  readonly values?: string[];

}

/**
 * @schema KafkaConnectS2ISpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector
 */
export interface KafkaConnectS2ISpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
  /**
   * @schema KafkaConnectS2ISpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector#matchExpressions
   */
  readonly matchExpressions?: KafkaConnectS2ISpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions[];

  /**
   * @schema KafkaConnectS2ISpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector#matchLabels
   */
  readonly matchLabels?: any;

}

/**
 * @schema KafkaConnectS2ISpecTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions
 */
export interface KafkaConnectS2ISpecTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
  /**
   * @schema KafkaConnectS2ISpecTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions#key
   */
  readonly key?: string;

  /**
   * @schema KafkaConnectS2ISpecTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions#operator
   */
  readonly operator?: string;

  /**
   * @schema KafkaConnectS2ISpecTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions#values
   */
  readonly values?: string[];

}

/**
 * @schema KafkaConnectS2ISpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions
 */
export interface KafkaConnectS2ISpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
  /**
   * @schema KafkaConnectS2ISpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions#key
   */
  readonly key?: string;

  /**
   * @schema KafkaConnectS2ISpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions#operator
   */
  readonly operator?: string;

  /**
   * @schema KafkaConnectS2ISpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions#values
   */
  readonly values?: string[];

}

/**
 * @schema KafkaConnectS2ISpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions
 */
export interface KafkaConnectS2ISpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
  /**
   * @schema KafkaConnectS2ISpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions#key
   */
  readonly key?: string;

  /**
   * @schema KafkaConnectS2ISpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions#operator
   */
  readonly operator?: string;

  /**
   * @schema KafkaConnectS2ISpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions#values
   */
  readonly values?: string[];

}

