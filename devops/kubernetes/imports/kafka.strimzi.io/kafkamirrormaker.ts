// generated by cdk8s
import { ApiObject } from 'cdk8s';
import { Construct } from 'constructs';

/**
 * 
 *
 * @schema KafkaMirrorMaker
 */
export class KafkaMirrorMaker extends ApiObject {
  /**
   * Defines a "KafkaMirrorMaker" API object
   * @param scope the scope in which to define this object
   * @param name a scope-local name for the object
   * @param options configuration options
   */
  public constructor(scope: Construct, name: string, options: KafkaMirrorMakerOptions = {}) {
    super(scope, name, {
      ...options,
      kind: 'KafkaMirrorMaker',
      apiVersion: 'kafka.strimzi.io/v1beta1',
    });
  }
}

/**
 * @schema KafkaMirrorMaker
 */
export interface KafkaMirrorMakerOptions {
  /**
   * The specification of Kafka MirrorMaker.
   *
   * @schema KafkaMirrorMaker#spec
   */
  readonly spec?: KafkaMirrorMakerSpec;

}

/**
 * The specification of Kafka MirrorMaker.
 *
 * @schema KafkaMirrorMakerSpec
 */
export interface KafkaMirrorMakerSpec {
  /**
   * The number of pods in the `Deployment`.
   *
   * @schema KafkaMirrorMakerSpec#replicas
   */
  readonly replicas: number;

  /**
   * The docker image for the pods.
   *
   * @schema KafkaMirrorMakerSpec#image
   */
  readonly image?: string;

  /**
   * List of topics which are included for mirroring. This option allows any regular expression using Java-style regular expressions. Mirroring two topics named A and B is achieved by using the whitelist `'A\|B'`. Or, as a special case, you can mirror all topics using the whitelist '*'. You can also specify multiple regular expressions separated by commas.
   *
   * @schema KafkaMirrorMakerSpec#whitelist
   */
  readonly whitelist: string;

  /**
   * Configuration of source cluster.
   *
   * @schema KafkaMirrorMakerSpec#consumer
   */
  readonly consumer: KafkaMirrorMakerSpecConsumer;

  /**
   * Configuration of target cluster.
   *
   * @schema KafkaMirrorMakerSpec#producer
   */
  readonly producer: KafkaMirrorMakerSpecProducer;

  /**
   * CPU and memory resources to reserve.
   *
   * @schema KafkaMirrorMakerSpec#resources
   */
  readonly resources?: KafkaMirrorMakerSpecResources;

  /**
   * The pod's affinity rules.
   *
   * @schema KafkaMirrorMakerSpec#affinity
   */
  readonly affinity?: KafkaMirrorMakerSpecAffinity;

  /**
   * The pod's tolerations.
   *
   * @schema KafkaMirrorMakerSpec#tolerations
   */
  readonly tolerations?: KafkaMirrorMakerSpecTolerations[];

  /**
   * JVM Options for pods.
   *
   * @schema KafkaMirrorMakerSpec#jvmOptions
   */
  readonly jvmOptions?: KafkaMirrorMakerSpecJvmOptions;

  /**
   * Logging configuration for MirrorMaker.
   *
   * @schema KafkaMirrorMakerSpec#logging
   */
  readonly logging?: KafkaMirrorMakerSpecLogging;

  /**
   * The Prometheus JMX Exporter configuration. See {JMXExporter} for details of the structure of this configuration.
   *
   * @schema KafkaMirrorMakerSpec#metrics
   */
  readonly metrics?: any;

  /**
   * The configuration of tracing in Kafka MirrorMaker.
   *
   * @schema KafkaMirrorMakerSpec#tracing
   */
  readonly tracing?: KafkaMirrorMakerSpecTracing;

  /**
   * Template to specify how Kafka MirrorMaker resources, `Deployments` and `Pods`, are generated.
   *
   * @schema KafkaMirrorMakerSpec#template
   */
  readonly template?: KafkaMirrorMakerSpecTemplate;

  /**
   * Pod liveness checking.
   *
   * @schema KafkaMirrorMakerSpec#livenessProbe
   */
  readonly livenessProbe?: KafkaMirrorMakerSpecLivenessProbe;

  /**
   * Pod readiness checking.
   *
   * @schema KafkaMirrorMakerSpec#readinessProbe
   */
  readonly readinessProbe?: KafkaMirrorMakerSpecReadinessProbe;

  /**
   * The Kafka MirrorMaker version. Defaults to {DefaultKafkaVersion}. Consult the documentation to understand the process required to upgrade or downgrade the version.
   *
   * @default DefaultKafkaVersion}. Consult the documentation to understand the process required to upgrade or downgrade the version.
   * @schema KafkaMirrorMakerSpec#version
   */
  readonly version?: string;

}

/**
 * Configuration of source cluster.
 *
 * @schema KafkaMirrorMakerSpecConsumer
 */
export interface KafkaMirrorMakerSpecConsumer {
  /**
   * Specifies the number of consumer stream threads to create.
   *
   * @schema KafkaMirrorMakerSpecConsumer#numStreams
   */
  readonly numStreams?: number;

  /**
   * Specifies the offset auto-commit interval in ms. Default value is 60000.
   *
   * @schema KafkaMirrorMakerSpecConsumer#offsetCommitInterval
   */
  readonly offsetCommitInterval?: number;

  /**
   * A unique string that identifies the consumer group this consumer belongs to.
   *
   * @schema KafkaMirrorMakerSpecConsumer#groupId
   */
  readonly groupId: string;

  /**
   * A list of host:port pairs for establishing the initial connection to the Kafka cluster.
   *
   * @schema KafkaMirrorMakerSpecConsumer#bootstrapServers
   */
  readonly bootstrapServers: string;

  /**
   * Authentication configuration for connecting to the cluster.
   *
   * @schema KafkaMirrorMakerSpecConsumer#authentication
   */
  readonly authentication?: KafkaMirrorMakerSpecConsumerAuthentication;

  /**
   * The MirrorMaker consumer config. Properties with the following prefixes cannot be set: ssl., bootstrap.servers, group.id, sasl., security., interceptor.classes (with the exception of: ssl.endpoint.identification.algorithm, ssl.cipher.suites, ssl.protocol, ssl.enabled.protocols).
   *
   * @schema KafkaMirrorMakerSpecConsumer#config
   */
  readonly config?: any;

  /**
   * TLS configuration for connecting MirrorMaker to the cluster.
   *
   * @schema KafkaMirrorMakerSpecConsumer#tls
   */
  readonly tls?: KafkaMirrorMakerSpecConsumerTls;

}

/**
 * Configuration of target cluster.
 *
 * @schema KafkaMirrorMakerSpecProducer
 */
export interface KafkaMirrorMakerSpecProducer {
  /**
   * A list of host:port pairs for establishing the initial connection to the Kafka cluster.
   *
   * @schema KafkaMirrorMakerSpecProducer#bootstrapServers
   */
  readonly bootstrapServers: string;

  /**
   * Flag to set the MirrorMaker to exit on a failed send. Default value is `true`.
   *
   * @schema KafkaMirrorMakerSpecProducer#abortOnSendFailure
   */
  readonly abortOnSendFailure?: boolean;

  /**
   * Authentication configuration for connecting to the cluster.
   *
   * @schema KafkaMirrorMakerSpecProducer#authentication
   */
  readonly authentication?: KafkaMirrorMakerSpecProducerAuthentication;

  /**
   * The MirrorMaker producer config. Properties with the following prefixes cannot be set: ssl., bootstrap.servers, sasl., security., interceptor.classes (with the exception of: ssl.endpoint.identification.algorithm, ssl.cipher.suites, ssl.protocol, ssl.enabled.protocols).
   *
   * @schema KafkaMirrorMakerSpecProducer#config
   */
  readonly config?: any;

  /**
   * TLS configuration for connecting MirrorMaker to the cluster.
   *
   * @schema KafkaMirrorMakerSpecProducer#tls
   */
  readonly tls?: KafkaMirrorMakerSpecProducerTls;

}

/**
 * CPU and memory resources to reserve.
 *
 * @schema KafkaMirrorMakerSpecResources
 */
export interface KafkaMirrorMakerSpecResources {
  /**
   * @schema KafkaMirrorMakerSpecResources#limits
   */
  readonly limits?: any;

  /**
   * @schema KafkaMirrorMakerSpecResources#requests
   */
  readonly requests?: any;

}

/**
 * The pod's affinity rules.
 *
 * @schema KafkaMirrorMakerSpecAffinity
 */
export interface KafkaMirrorMakerSpecAffinity {
  /**
   * @schema KafkaMirrorMakerSpecAffinity#nodeAffinity
   */
  readonly nodeAffinity?: KafkaMirrorMakerSpecAffinityNodeAffinity;

  /**
   * @schema KafkaMirrorMakerSpecAffinity#podAffinity
   */
  readonly podAffinity?: KafkaMirrorMakerSpecAffinityPodAffinity;

  /**
   * @schema KafkaMirrorMakerSpecAffinity#podAntiAffinity
   */
  readonly podAntiAffinity?: KafkaMirrorMakerSpecAffinityPodAntiAffinity;

}

/**
 * @schema KafkaMirrorMakerSpecTolerations
 */
export interface KafkaMirrorMakerSpecTolerations {
  /**
   * @schema KafkaMirrorMakerSpecTolerations#effect
   */
  readonly effect?: string;

  /**
   * @schema KafkaMirrorMakerSpecTolerations#key
   */
  readonly key?: string;

  /**
   * @schema KafkaMirrorMakerSpecTolerations#operator
   */
  readonly operator?: string;

  /**
   * @schema KafkaMirrorMakerSpecTolerations#tolerationSeconds
   */
  readonly tolerationSeconds?: number;

  /**
   * @schema KafkaMirrorMakerSpecTolerations#value
   */
  readonly value?: string;

}

/**
 * JVM Options for pods.
 *
 * @schema KafkaMirrorMakerSpecJvmOptions
 */
export interface KafkaMirrorMakerSpecJvmOptions {
  /**
   * A map of -XX options to the JVM.
   *
   * @schema KafkaMirrorMakerSpecJvmOptions#-XX
   */
  readonly xx?: any;

  /**
   * -Xms option to to the JVM.
   *
   * @schema KafkaMirrorMakerSpecJvmOptions#-Xms
   */
  readonly xms?: string;

  /**
   * -Xmx option to to the JVM.
   *
   * @schema KafkaMirrorMakerSpecJvmOptions#-Xmx
   */
  readonly xmx?: string;

  /**
   * Specifies whether the Garbage Collection logging is enabled. The default is false.
   *
   * @schema KafkaMirrorMakerSpecJvmOptions#gcLoggingEnabled
   */
  readonly gcLoggingEnabled?: boolean;

  /**
   * A map of additional system properties which will be passed using the `-D` option to the JVM.
   *
   * @schema KafkaMirrorMakerSpecJvmOptions#javaSystemProperties
   */
  readonly javaSystemProperties?: KafkaMirrorMakerSpecJvmOptionsJavaSystemProperties[];

}

/**
 * Logging configuration for MirrorMaker.
 *
 * @schema KafkaMirrorMakerSpecLogging
 */
export interface KafkaMirrorMakerSpecLogging {
  /**
   * A Map from logger name to logger level.
   *
   * @schema KafkaMirrorMakerSpecLogging#loggers
   */
  readonly loggers?: any;

  /**
   * The name of the `ConfigMap` from which to get the logging configuration.
   *
   * @schema KafkaMirrorMakerSpecLogging#name
   */
  readonly name?: string;

  /**
   * Logging type, must be either 'inline' or 'external'.
   *
   * @schema KafkaMirrorMakerSpecLogging#type
   */
  readonly type: KafkaMirrorMakerSpecLoggingType;

}

/**
 * The configuration of tracing in Kafka MirrorMaker.
 *
 * @schema KafkaMirrorMakerSpecTracing
 */
export interface KafkaMirrorMakerSpecTracing {
  /**
   * Type of the tracing used. Currently the only supported type is `jaeger` for Jaeger tracing.
   *
   * @schema KafkaMirrorMakerSpecTracing#type
   */
  readonly type: KafkaMirrorMakerSpecTracingType;

}

/**
 * Template to specify how Kafka MirrorMaker resources, `Deployments` and `Pods`, are generated.
 *
 * @schema KafkaMirrorMakerSpecTemplate
 */
export interface KafkaMirrorMakerSpecTemplate {
  /**
   * Template for Kafka MirrorMaker `Deployment`.
   *
   * @schema KafkaMirrorMakerSpecTemplate#deployment
   */
  readonly deployment?: KafkaMirrorMakerSpecTemplateDeployment;

  /**
   * Template for Kafka MirrorMaker `Pods`.
   *
   * @schema KafkaMirrorMakerSpecTemplate#pod
   */
  readonly pod?: KafkaMirrorMakerSpecTemplatePod;

  /**
   * Template for Kafka MirrorMaker container.
   *
   * @schema KafkaMirrorMakerSpecTemplate#mirrorMakerContainer
   */
  readonly mirrorMakerContainer?: KafkaMirrorMakerSpecTemplateMirrorMakerContainer;

  /**
   * Template for Kafka MirrorMaker `PodDisruptionBudget`.
   *
   * @schema KafkaMirrorMakerSpecTemplate#podDisruptionBudget
   */
  readonly podDisruptionBudget?: KafkaMirrorMakerSpecTemplatePodDisruptionBudget;

}

/**
 * Pod liveness checking.
 *
 * @schema KafkaMirrorMakerSpecLivenessProbe
 */
export interface KafkaMirrorMakerSpecLivenessProbe {
  /**
   * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
   *
   * @default 3. Minimum value is 1.
   * @schema KafkaMirrorMakerSpecLivenessProbe#failureThreshold
   */
  readonly failureThreshold?: number;

  /**
   * The initial delay before first the health is first checked.
   *
   * @schema KafkaMirrorMakerSpecLivenessProbe#initialDelaySeconds
   */
  readonly initialDelaySeconds?: number;

  /**
   * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
   *
   * @default 10 seconds. Minimum value is 1.
   * @schema KafkaMirrorMakerSpecLivenessProbe#periodSeconds
   */
  readonly periodSeconds?: number;

  /**
   * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.
   *
   * @default 1. Must be 1 for liveness. Minimum value is 1.
   * @schema KafkaMirrorMakerSpecLivenessProbe#successThreshold
   */
  readonly successThreshold?: number;

  /**
   * The timeout for each attempted health check.
   *
   * @schema KafkaMirrorMakerSpecLivenessProbe#timeoutSeconds
   */
  readonly timeoutSeconds?: number;

}

/**
 * Pod readiness checking.
 *
 * @schema KafkaMirrorMakerSpecReadinessProbe
 */
export interface KafkaMirrorMakerSpecReadinessProbe {
  /**
   * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
   *
   * @default 3. Minimum value is 1.
   * @schema KafkaMirrorMakerSpecReadinessProbe#failureThreshold
   */
  readonly failureThreshold?: number;

  /**
   * The initial delay before first the health is first checked.
   *
   * @schema KafkaMirrorMakerSpecReadinessProbe#initialDelaySeconds
   */
  readonly initialDelaySeconds?: number;

  /**
   * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
   *
   * @default 10 seconds. Minimum value is 1.
   * @schema KafkaMirrorMakerSpecReadinessProbe#periodSeconds
   */
  readonly periodSeconds?: number;

  /**
   * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.
   *
   * @default 1. Must be 1 for liveness. Minimum value is 1.
   * @schema KafkaMirrorMakerSpecReadinessProbe#successThreshold
   */
  readonly successThreshold?: number;

  /**
   * The timeout for each attempted health check.
   *
   * @schema KafkaMirrorMakerSpecReadinessProbe#timeoutSeconds
   */
  readonly timeoutSeconds?: number;

}

/**
 * Authentication configuration for connecting to the cluster.
 *
 * @schema KafkaMirrorMakerSpecConsumerAuthentication
 */
export interface KafkaMirrorMakerSpecConsumerAuthentication {
  /**
   * Link to Kubernetes Secret containing the access token which was obtained from the authorization server.
   *
   * @schema KafkaMirrorMakerSpecConsumerAuthentication#accessToken
   */
  readonly accessToken?: KafkaMirrorMakerSpecConsumerAuthenticationAccessToken;

  /**
   * Configure whether access token should be treated as JWT. This should be set to `false` if the authorization server returns opaque tokens. Defaults to `true`.
   *
   * @default true`.
   * @schema KafkaMirrorMakerSpecConsumerAuthentication#accessTokenIsJwt
   */
  readonly accessTokenIsJwt?: boolean;

  /**
   * Reference to the `Secret` which holds the certificate and private key pair.
   *
   * @schema KafkaMirrorMakerSpecConsumerAuthentication#certificateAndKey
   */
  readonly certificateAndKey?: KafkaMirrorMakerSpecConsumerAuthenticationCertificateAndKey;

  /**
   * OAuth Client ID which the Kafka client can use to authenticate against the OAuth server and use the token endpoint URI.
   *
   * @schema KafkaMirrorMakerSpecConsumerAuthentication#clientId
   */
  readonly clientId?: string;

  /**
   * Link to Kubernetes Secret containing the OAuth client secret which the Kafka client can use to authenticate against the OAuth server and use the token endpoint URI.
   *
   * @schema KafkaMirrorMakerSpecConsumerAuthentication#clientSecret
   */
  readonly clientSecret?: KafkaMirrorMakerSpecConsumerAuthenticationClientSecret;

  /**
   * Enable or disable TLS hostname verification. Default value is `false`.
   *
   * @schema KafkaMirrorMakerSpecConsumerAuthentication#disableTlsHostnameVerification
   */
  readonly disableTlsHostnameVerification?: boolean;

  /**
   * Set or limit time-to-live of the access tokens to the specified number of seconds. This should be set if the authorization server returns opaque tokens.
   *
   * @schema KafkaMirrorMakerSpecConsumerAuthentication#maxTokenExpirySeconds
   */
  readonly maxTokenExpirySeconds?: number;

  /**
   * Reference to the `Secret` which holds the password.
   *
   * @schema KafkaMirrorMakerSpecConsumerAuthentication#passwordSecret
   */
  readonly passwordSecret?: KafkaMirrorMakerSpecConsumerAuthenticationPasswordSecret;

  /**
   * Link to Kubernetes Secret containing the refresh token which can be used to obtain access token from the authorization server.
   *
   * @schema KafkaMirrorMakerSpecConsumerAuthentication#refreshToken
   */
  readonly refreshToken?: KafkaMirrorMakerSpecConsumerAuthenticationRefreshToken;

  /**
   * OAuth scope to use when authenticating against the authorization server. Some authorization servers require this to be set. The possible values depend on how authorization server is configured. By default `scope` is not specified when doing the token endpoint request.
   *
   * @schema KafkaMirrorMakerSpecConsumerAuthentication#scope
   */
  readonly scope?: string;

  /**
   * Trusted certificates for TLS connection to the OAuth server.
   *
   * @schema KafkaMirrorMakerSpecConsumerAuthentication#tlsTrustedCertificates
   */
  readonly tlsTrustedCertificates?: KafkaMirrorMakerSpecConsumerAuthenticationTlsTrustedCertificates[];

  /**
   * Authorization server token endpoint URI.
   *
   * @schema KafkaMirrorMakerSpecConsumerAuthentication#tokenEndpointUri
   */
  readonly tokenEndpointUri?: string;

  /**
   * Authentication type. Currently the only supported types are `tls`, `scram-sha-512`, and `plain`. `scram-sha-512` type uses SASL SCRAM-SHA-512 Authentication. `plain` type uses SASL PLAIN Authentication. `oauth` type uses SASL OAUTHBEARER Authentication. The `tls` type uses TLS Client Authentication. The `tls` type is supported only over TLS connections.
   *
   * @schema KafkaMirrorMakerSpecConsumerAuthentication#type
   */
  readonly type: KafkaMirrorMakerSpecConsumerAuthenticationType;

  /**
   * Username used for the authentication.
   *
   * @schema KafkaMirrorMakerSpecConsumerAuthentication#username
   */
  readonly username?: string;

}

/**
 * TLS configuration for connecting MirrorMaker to the cluster.
 *
 * @schema KafkaMirrorMakerSpecConsumerTls
 */
export interface KafkaMirrorMakerSpecConsumerTls {
  /**
   * Trusted certificates for TLS connection.
   *
   * @schema KafkaMirrorMakerSpecConsumerTls#trustedCertificates
   */
  readonly trustedCertificates?: KafkaMirrorMakerSpecConsumerTlsTrustedCertificates[];

}

/**
 * Authentication configuration for connecting to the cluster.
 *
 * @schema KafkaMirrorMakerSpecProducerAuthentication
 */
export interface KafkaMirrorMakerSpecProducerAuthentication {
  /**
   * Link to Kubernetes Secret containing the access token which was obtained from the authorization server.
   *
   * @schema KafkaMirrorMakerSpecProducerAuthentication#accessToken
   */
  readonly accessToken?: KafkaMirrorMakerSpecProducerAuthenticationAccessToken;

  /**
   * Configure whether access token should be treated as JWT. This should be set to `false` if the authorization server returns opaque tokens. Defaults to `true`.
   *
   * @default true`.
   * @schema KafkaMirrorMakerSpecProducerAuthentication#accessTokenIsJwt
   */
  readonly accessTokenIsJwt?: boolean;

  /**
   * Reference to the `Secret` which holds the certificate and private key pair.
   *
   * @schema KafkaMirrorMakerSpecProducerAuthentication#certificateAndKey
   */
  readonly certificateAndKey?: KafkaMirrorMakerSpecProducerAuthenticationCertificateAndKey;

  /**
   * OAuth Client ID which the Kafka client can use to authenticate against the OAuth server and use the token endpoint URI.
   *
   * @schema KafkaMirrorMakerSpecProducerAuthentication#clientId
   */
  readonly clientId?: string;

  /**
   * Link to Kubernetes Secret containing the OAuth client secret which the Kafka client can use to authenticate against the OAuth server and use the token endpoint URI.
   *
   * @schema KafkaMirrorMakerSpecProducerAuthentication#clientSecret
   */
  readonly clientSecret?: KafkaMirrorMakerSpecProducerAuthenticationClientSecret;

  /**
   * Enable or disable TLS hostname verification. Default value is `false`.
   *
   * @schema KafkaMirrorMakerSpecProducerAuthentication#disableTlsHostnameVerification
   */
  readonly disableTlsHostnameVerification?: boolean;

  /**
   * Set or limit time-to-live of the access tokens to the specified number of seconds. This should be set if the authorization server returns opaque tokens.
   *
   * @schema KafkaMirrorMakerSpecProducerAuthentication#maxTokenExpirySeconds
   */
  readonly maxTokenExpirySeconds?: number;

  /**
   * Reference to the `Secret` which holds the password.
   *
   * @schema KafkaMirrorMakerSpecProducerAuthentication#passwordSecret
   */
  readonly passwordSecret?: KafkaMirrorMakerSpecProducerAuthenticationPasswordSecret;

  /**
   * Link to Kubernetes Secret containing the refresh token which can be used to obtain access token from the authorization server.
   *
   * @schema KafkaMirrorMakerSpecProducerAuthentication#refreshToken
   */
  readonly refreshToken?: KafkaMirrorMakerSpecProducerAuthenticationRefreshToken;

  /**
   * OAuth scope to use when authenticating against the authorization server. Some authorization servers require this to be set. The possible values depend on how authorization server is configured. By default `scope` is not specified when doing the token endpoint request.
   *
   * @schema KafkaMirrorMakerSpecProducerAuthentication#scope
   */
  readonly scope?: string;

  /**
   * Trusted certificates for TLS connection to the OAuth server.
   *
   * @schema KafkaMirrorMakerSpecProducerAuthentication#tlsTrustedCertificates
   */
  readonly tlsTrustedCertificates?: KafkaMirrorMakerSpecProducerAuthenticationTlsTrustedCertificates[];

  /**
   * Authorization server token endpoint URI.
   *
   * @schema KafkaMirrorMakerSpecProducerAuthentication#tokenEndpointUri
   */
  readonly tokenEndpointUri?: string;

  /**
   * Authentication type. Currently the only supported types are `tls`, `scram-sha-512`, and `plain`. `scram-sha-512` type uses SASL SCRAM-SHA-512 Authentication. `plain` type uses SASL PLAIN Authentication. `oauth` type uses SASL OAUTHBEARER Authentication. The `tls` type uses TLS Client Authentication. The `tls` type is supported only over TLS connections.
   *
   * @schema KafkaMirrorMakerSpecProducerAuthentication#type
   */
  readonly type: KafkaMirrorMakerSpecProducerAuthenticationType;

  /**
   * Username used for the authentication.
   *
   * @schema KafkaMirrorMakerSpecProducerAuthentication#username
   */
  readonly username?: string;

}

/**
 * TLS configuration for connecting MirrorMaker to the cluster.
 *
 * @schema KafkaMirrorMakerSpecProducerTls
 */
export interface KafkaMirrorMakerSpecProducerTls {
  /**
   * Trusted certificates for TLS connection.
   *
   * @schema KafkaMirrorMakerSpecProducerTls#trustedCertificates
   */
  readonly trustedCertificates?: KafkaMirrorMakerSpecProducerTlsTrustedCertificates[];

}

/**
 * @schema KafkaMirrorMakerSpecAffinityNodeAffinity
 */
export interface KafkaMirrorMakerSpecAffinityNodeAffinity {
  /**
   * @schema KafkaMirrorMakerSpecAffinityNodeAffinity#preferredDuringSchedulingIgnoredDuringExecution
   */
  readonly preferredDuringSchedulingIgnoredDuringExecution?: KafkaMirrorMakerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution[];

  /**
   * @schema KafkaMirrorMakerSpecAffinityNodeAffinity#requiredDuringSchedulingIgnoredDuringExecution
   */
  readonly requiredDuringSchedulingIgnoredDuringExecution?: KafkaMirrorMakerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution;

}

/**
 * @schema KafkaMirrorMakerSpecAffinityPodAffinity
 */
export interface KafkaMirrorMakerSpecAffinityPodAffinity {
  /**
   * @schema KafkaMirrorMakerSpecAffinityPodAffinity#preferredDuringSchedulingIgnoredDuringExecution
   */
  readonly preferredDuringSchedulingIgnoredDuringExecution?: KafkaMirrorMakerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution[];

  /**
   * @schema KafkaMirrorMakerSpecAffinityPodAffinity#requiredDuringSchedulingIgnoredDuringExecution
   */
  readonly requiredDuringSchedulingIgnoredDuringExecution?: KafkaMirrorMakerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution[];

}

/**
 * @schema KafkaMirrorMakerSpecAffinityPodAntiAffinity
 */
export interface KafkaMirrorMakerSpecAffinityPodAntiAffinity {
  /**
   * @schema KafkaMirrorMakerSpecAffinityPodAntiAffinity#preferredDuringSchedulingIgnoredDuringExecution
   */
  readonly preferredDuringSchedulingIgnoredDuringExecution?: KafkaMirrorMakerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution[];

  /**
   * @schema KafkaMirrorMakerSpecAffinityPodAntiAffinity#requiredDuringSchedulingIgnoredDuringExecution
   */
  readonly requiredDuringSchedulingIgnoredDuringExecution?: KafkaMirrorMakerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution[];

}

/**
 * @schema KafkaMirrorMakerSpecJvmOptionsJavaSystemProperties
 */
export interface KafkaMirrorMakerSpecJvmOptionsJavaSystemProperties {
  /**
   * The system property name.
   *
   * @schema KafkaMirrorMakerSpecJvmOptionsJavaSystemProperties#name
   */
  readonly name?: string;

  /**
   * The system property value.
   *
   * @schema KafkaMirrorMakerSpecJvmOptionsJavaSystemProperties#value
   */
  readonly value?: string;

}

/**
 * Logging type, must be either 'inline' or 'external'.
 *
 * @schema KafkaMirrorMakerSpecLoggingType
 */
export enum KafkaMirrorMakerSpecLoggingType {
  /** inline */
  INLINE = "inline",
  /** external */
  EXTERNAL = "external",
}

/**
 * Type of the tracing used. Currently the only supported type is `jaeger` for Jaeger tracing.
 *
 * @schema KafkaMirrorMakerSpecTracingType
 */
export enum KafkaMirrorMakerSpecTracingType {
  /** jaeger */
  JAEGER = "jaeger",
}

/**
 * Template for Kafka MirrorMaker `Deployment`.
 *
 * @schema KafkaMirrorMakerSpecTemplateDeployment
 */
export interface KafkaMirrorMakerSpecTemplateDeployment {
  /**
   * Metadata which should be applied to the resource.
   *
   * @schema KafkaMirrorMakerSpecTemplateDeployment#metadata
   */
  readonly metadata?: KafkaMirrorMakerSpecTemplateDeploymentMetadata;

}

/**
 * Template for Kafka MirrorMaker `Pods`.
 *
 * @schema KafkaMirrorMakerSpecTemplatePod
 */
export interface KafkaMirrorMakerSpecTemplatePod {
  /**
   * Metadata applied to the resource.
   *
   * @schema KafkaMirrorMakerSpecTemplatePod#metadata
   */
  readonly metadata?: KafkaMirrorMakerSpecTemplatePodMetadata;

  /**
   * List of references to secrets in the same namespace to use for pulling any of the images used by this Pod.
   *
   * @schema KafkaMirrorMakerSpecTemplatePod#imagePullSecrets
   */
  readonly imagePullSecrets?: KafkaMirrorMakerSpecTemplatePodImagePullSecrets[];

  /**
   * Configures pod-level security attributes and common container settings.
   *
   * @schema KafkaMirrorMakerSpecTemplatePod#securityContext
   */
  readonly securityContext?: KafkaMirrorMakerSpecTemplatePodSecurityContext;

  /**
   * The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process.Value must be non-negative integer. The value zero indicates delete immediately. Defaults to 30 seconds.
   *
   * @default 30 seconds.
   * @schema KafkaMirrorMakerSpecTemplatePod#terminationGracePeriodSeconds
   */
  readonly terminationGracePeriodSeconds?: number;

  /**
   * The pod's affinity rules.
   *
   * @schema KafkaMirrorMakerSpecTemplatePod#affinity
   */
  readonly affinity?: KafkaMirrorMakerSpecTemplatePodAffinity;

  /**
   * The name of the Priority Class to which these pods will be assigned.
   *
   * @schema KafkaMirrorMakerSpecTemplatePod#priorityClassName
   */
  readonly priorityClassName?: string;

  /**
   * The name of the scheduler used to dispatch this `Pod`. If not specified, the default scheduler will be used.
   *
   * @schema KafkaMirrorMakerSpecTemplatePod#schedulerName
   */
  readonly schedulerName?: string;

  /**
   * The pod's tolerations.
   *
   * @schema KafkaMirrorMakerSpecTemplatePod#tolerations
   */
  readonly tolerations?: KafkaMirrorMakerSpecTemplatePodTolerations[];

}

/**
 * Template for Kafka MirrorMaker container.
 *
 * @schema KafkaMirrorMakerSpecTemplateMirrorMakerContainer
 */
export interface KafkaMirrorMakerSpecTemplateMirrorMakerContainer {
  /**
   * Environment variables which should be applied to the container.
   *
   * @schema KafkaMirrorMakerSpecTemplateMirrorMakerContainer#env
   */
  readonly env?: KafkaMirrorMakerSpecTemplateMirrorMakerContainerEnv[];

  /**
   * Security context for the container.
   *
   * @schema KafkaMirrorMakerSpecTemplateMirrorMakerContainer#securityContext
   */
  readonly securityContext?: KafkaMirrorMakerSpecTemplateMirrorMakerContainerSecurityContext;

}

/**
 * Template for Kafka MirrorMaker `PodDisruptionBudget`.
 *
 * @schema KafkaMirrorMakerSpecTemplatePodDisruptionBudget
 */
export interface KafkaMirrorMakerSpecTemplatePodDisruptionBudget {
  /**
   * Metadata to apply to the `PodDistruptionBugetTemplate` resource.
   *
   * @schema KafkaMirrorMakerSpecTemplatePodDisruptionBudget#metadata
   */
  readonly metadata?: KafkaMirrorMakerSpecTemplatePodDisruptionBudgetMetadata;

  /**
   * Maximum number of unavailable pods to allow automatic Pod eviction. A Pod eviction is allowed when the `maxUnavailable` number of pods or fewer are unavailable after the eviction. Setting this value to 0 prevents all voluntary evictions, so the pods must be evicted manually. Defaults to 1.
   *
   * @default 1.
   * @schema KafkaMirrorMakerSpecTemplatePodDisruptionBudget#maxUnavailable
   */
  readonly maxUnavailable?: number;

}

/**
 * Link to Kubernetes Secret containing the access token which was obtained from the authorization server.
 *
 * @schema KafkaMirrorMakerSpecConsumerAuthenticationAccessToken
 */
export interface KafkaMirrorMakerSpecConsumerAuthenticationAccessToken {
  /**
   * The key under which the secret value is stored in the Kubernetes Secret.
   *
   * @schema KafkaMirrorMakerSpecConsumerAuthenticationAccessToken#key
   */
  readonly key: string;

  /**
   * The name of the Kubernetes Secret containing the secret value.
   *
   * @schema KafkaMirrorMakerSpecConsumerAuthenticationAccessToken#secretName
   */
  readonly secretName: string;

}

/**
 * Reference to the `Secret` which holds the certificate and private key pair.
 *
 * @schema KafkaMirrorMakerSpecConsumerAuthenticationCertificateAndKey
 */
export interface KafkaMirrorMakerSpecConsumerAuthenticationCertificateAndKey {
  /**
   * The name of the file certificate in the Secret.
   *
   * @schema KafkaMirrorMakerSpecConsumerAuthenticationCertificateAndKey#certificate
   */
  readonly certificate: string;

  /**
   * The name of the private key in the Secret.
   *
   * @schema KafkaMirrorMakerSpecConsumerAuthenticationCertificateAndKey#key
   */
  readonly key: string;

  /**
   * The name of the Secret containing the certificate.
   *
   * @schema KafkaMirrorMakerSpecConsumerAuthenticationCertificateAndKey#secretName
   */
  readonly secretName: string;

}

/**
 * Link to Kubernetes Secret containing the OAuth client secret which the Kafka client can use to authenticate against the OAuth server and use the token endpoint URI.
 *
 * @schema KafkaMirrorMakerSpecConsumerAuthenticationClientSecret
 */
export interface KafkaMirrorMakerSpecConsumerAuthenticationClientSecret {
  /**
   * The key under which the secret value is stored in the Kubernetes Secret.
   *
   * @schema KafkaMirrorMakerSpecConsumerAuthenticationClientSecret#key
   */
  readonly key: string;

  /**
   * The name of the Kubernetes Secret containing the secret value.
   *
   * @schema KafkaMirrorMakerSpecConsumerAuthenticationClientSecret#secretName
   */
  readonly secretName: string;

}

/**
 * Reference to the `Secret` which holds the password.
 *
 * @schema KafkaMirrorMakerSpecConsumerAuthenticationPasswordSecret
 */
export interface KafkaMirrorMakerSpecConsumerAuthenticationPasswordSecret {
  /**
   * The name of the key in the Secret under which the password is stored.
   *
   * @schema KafkaMirrorMakerSpecConsumerAuthenticationPasswordSecret#password
   */
  readonly password: string;

  /**
   * The name of the Secret containing the password.
   *
   * @schema KafkaMirrorMakerSpecConsumerAuthenticationPasswordSecret#secretName
   */
  readonly secretName: string;

}

/**
 * Link to Kubernetes Secret containing the refresh token which can be used to obtain access token from the authorization server.
 *
 * @schema KafkaMirrorMakerSpecConsumerAuthenticationRefreshToken
 */
export interface KafkaMirrorMakerSpecConsumerAuthenticationRefreshToken {
  /**
   * The key under which the secret value is stored in the Kubernetes Secret.
   *
   * @schema KafkaMirrorMakerSpecConsumerAuthenticationRefreshToken#key
   */
  readonly key: string;

  /**
   * The name of the Kubernetes Secret containing the secret value.
   *
   * @schema KafkaMirrorMakerSpecConsumerAuthenticationRefreshToken#secretName
   */
  readonly secretName: string;

}

/**
 * @schema KafkaMirrorMakerSpecConsumerAuthenticationTlsTrustedCertificates
 */
export interface KafkaMirrorMakerSpecConsumerAuthenticationTlsTrustedCertificates {
  /**
   * The name of the file certificate in the Secret.
   *
   * @schema KafkaMirrorMakerSpecConsumerAuthenticationTlsTrustedCertificates#certificate
   */
  readonly certificate: string;

  /**
   * The name of the Secret containing the certificate.
   *
   * @schema KafkaMirrorMakerSpecConsumerAuthenticationTlsTrustedCertificates#secretName
   */
  readonly secretName: string;

}

/**
 * Authentication type. Currently the only supported types are `tls`, `scram-sha-512`, and `plain`. `scram-sha-512` type uses SASL SCRAM-SHA-512 Authentication. `plain` type uses SASL PLAIN Authentication. `oauth` type uses SASL OAUTHBEARER Authentication. The `tls` type uses TLS Client Authentication. The `tls` type is supported only over TLS connections.
 *
 * @schema KafkaMirrorMakerSpecConsumerAuthenticationType
 */
export enum KafkaMirrorMakerSpecConsumerAuthenticationType {
  /** tls */
  TLS = "tls",
  /** scram-sha-512 */
  SCRAM_SHA_512 = "scram-sha-512",
  /** plain */
  PLAIN = "plain",
  /** oauth */
  OAUTH = "oauth",
}

/**
 * @schema KafkaMirrorMakerSpecConsumerTlsTrustedCertificates
 */
export interface KafkaMirrorMakerSpecConsumerTlsTrustedCertificates {
  /**
   * The name of the file certificate in the Secret.
   *
   * @schema KafkaMirrorMakerSpecConsumerTlsTrustedCertificates#certificate
   */
  readonly certificate: string;

  /**
   * The name of the Secret containing the certificate.
   *
   * @schema KafkaMirrorMakerSpecConsumerTlsTrustedCertificates#secretName
   */
  readonly secretName: string;

}

/**
 * Link to Kubernetes Secret containing the access token which was obtained from the authorization server.
 *
 * @schema KafkaMirrorMakerSpecProducerAuthenticationAccessToken
 */
export interface KafkaMirrorMakerSpecProducerAuthenticationAccessToken {
  /**
   * The key under which the secret value is stored in the Kubernetes Secret.
   *
   * @schema KafkaMirrorMakerSpecProducerAuthenticationAccessToken#key
   */
  readonly key: string;

  /**
   * The name of the Kubernetes Secret containing the secret value.
   *
   * @schema KafkaMirrorMakerSpecProducerAuthenticationAccessToken#secretName
   */
  readonly secretName: string;

}

/**
 * Reference to the `Secret` which holds the certificate and private key pair.
 *
 * @schema KafkaMirrorMakerSpecProducerAuthenticationCertificateAndKey
 */
export interface KafkaMirrorMakerSpecProducerAuthenticationCertificateAndKey {
  /**
   * The name of the file certificate in the Secret.
   *
   * @schema KafkaMirrorMakerSpecProducerAuthenticationCertificateAndKey#certificate
   */
  readonly certificate: string;

  /**
   * The name of the private key in the Secret.
   *
   * @schema KafkaMirrorMakerSpecProducerAuthenticationCertificateAndKey#key
   */
  readonly key: string;

  /**
   * The name of the Secret containing the certificate.
   *
   * @schema KafkaMirrorMakerSpecProducerAuthenticationCertificateAndKey#secretName
   */
  readonly secretName: string;

}

/**
 * Link to Kubernetes Secret containing the OAuth client secret which the Kafka client can use to authenticate against the OAuth server and use the token endpoint URI.
 *
 * @schema KafkaMirrorMakerSpecProducerAuthenticationClientSecret
 */
export interface KafkaMirrorMakerSpecProducerAuthenticationClientSecret {
  /**
   * The key under which the secret value is stored in the Kubernetes Secret.
   *
   * @schema KafkaMirrorMakerSpecProducerAuthenticationClientSecret#key
   */
  readonly key: string;

  /**
   * The name of the Kubernetes Secret containing the secret value.
   *
   * @schema KafkaMirrorMakerSpecProducerAuthenticationClientSecret#secretName
   */
  readonly secretName: string;

}

/**
 * Reference to the `Secret` which holds the password.
 *
 * @schema KafkaMirrorMakerSpecProducerAuthenticationPasswordSecret
 */
export interface KafkaMirrorMakerSpecProducerAuthenticationPasswordSecret {
  /**
   * The name of the key in the Secret under which the password is stored.
   *
   * @schema KafkaMirrorMakerSpecProducerAuthenticationPasswordSecret#password
   */
  readonly password: string;

  /**
   * The name of the Secret containing the password.
   *
   * @schema KafkaMirrorMakerSpecProducerAuthenticationPasswordSecret#secretName
   */
  readonly secretName: string;

}

/**
 * Link to Kubernetes Secret containing the refresh token which can be used to obtain access token from the authorization server.
 *
 * @schema KafkaMirrorMakerSpecProducerAuthenticationRefreshToken
 */
export interface KafkaMirrorMakerSpecProducerAuthenticationRefreshToken {
  /**
   * The key under which the secret value is stored in the Kubernetes Secret.
   *
   * @schema KafkaMirrorMakerSpecProducerAuthenticationRefreshToken#key
   */
  readonly key: string;

  /**
   * The name of the Kubernetes Secret containing the secret value.
   *
   * @schema KafkaMirrorMakerSpecProducerAuthenticationRefreshToken#secretName
   */
  readonly secretName: string;

}

/**
 * @schema KafkaMirrorMakerSpecProducerAuthenticationTlsTrustedCertificates
 */
export interface KafkaMirrorMakerSpecProducerAuthenticationTlsTrustedCertificates {
  /**
   * The name of the file certificate in the Secret.
   *
   * @schema KafkaMirrorMakerSpecProducerAuthenticationTlsTrustedCertificates#certificate
   */
  readonly certificate: string;

  /**
   * The name of the Secret containing the certificate.
   *
   * @schema KafkaMirrorMakerSpecProducerAuthenticationTlsTrustedCertificates#secretName
   */
  readonly secretName: string;

}

/**
 * Authentication type. Currently the only supported types are `tls`, `scram-sha-512`, and `plain`. `scram-sha-512` type uses SASL SCRAM-SHA-512 Authentication. `plain` type uses SASL PLAIN Authentication. `oauth` type uses SASL OAUTHBEARER Authentication. The `tls` type uses TLS Client Authentication. The `tls` type is supported only over TLS connections.
 *
 * @schema KafkaMirrorMakerSpecProducerAuthenticationType
 */
export enum KafkaMirrorMakerSpecProducerAuthenticationType {
  /** tls */
  TLS = "tls",
  /** scram-sha-512 */
  SCRAM_SHA_512 = "scram-sha-512",
  /** plain */
  PLAIN = "plain",
  /** oauth */
  OAUTH = "oauth",
}

/**
 * @schema KafkaMirrorMakerSpecProducerTlsTrustedCertificates
 */
export interface KafkaMirrorMakerSpecProducerTlsTrustedCertificates {
  /**
   * The name of the file certificate in the Secret.
   *
   * @schema KafkaMirrorMakerSpecProducerTlsTrustedCertificates#certificate
   */
  readonly certificate: string;

  /**
   * The name of the Secret containing the certificate.
   *
   * @schema KafkaMirrorMakerSpecProducerTlsTrustedCertificates#secretName
   */
  readonly secretName: string;

}

/**
 * @schema KafkaMirrorMakerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution
 */
export interface KafkaMirrorMakerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution {
  /**
   * @schema KafkaMirrorMakerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution#preference
   */
  readonly preference?: KafkaMirrorMakerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference;

  /**
   * @schema KafkaMirrorMakerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution#weight
   */
  readonly weight?: number;

}

/**
 * @schema KafkaMirrorMakerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution
 */
export interface KafkaMirrorMakerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution {
  /**
   * @schema KafkaMirrorMakerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution#nodeSelectorTerms
   */
  readonly nodeSelectorTerms?: KafkaMirrorMakerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms[];

}

/**
 * @schema KafkaMirrorMakerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution
 */
export interface KafkaMirrorMakerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution {
  /**
   * @schema KafkaMirrorMakerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution#podAffinityTerm
   */
  readonly podAffinityTerm?: KafkaMirrorMakerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm;

  /**
   * @schema KafkaMirrorMakerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution#weight
   */
  readonly weight?: number;

}

/**
 * @schema KafkaMirrorMakerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution
 */
export interface KafkaMirrorMakerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution {
  /**
   * @schema KafkaMirrorMakerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution#labelSelector
   */
  readonly labelSelector?: KafkaMirrorMakerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector;

  /**
   * @schema KafkaMirrorMakerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution#namespaces
   */
  readonly namespaces?: string[];

  /**
   * @schema KafkaMirrorMakerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution#topologyKey
   */
  readonly topologyKey?: string;

}

/**
 * @schema KafkaMirrorMakerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution
 */
export interface KafkaMirrorMakerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution {
  /**
   * @schema KafkaMirrorMakerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution#podAffinityTerm
   */
  readonly podAffinityTerm?: KafkaMirrorMakerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm;

  /**
   * @schema KafkaMirrorMakerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution#weight
   */
  readonly weight?: number;

}

/**
 * @schema KafkaMirrorMakerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution
 */
export interface KafkaMirrorMakerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution {
  /**
   * @schema KafkaMirrorMakerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution#labelSelector
   */
  readonly labelSelector?: KafkaMirrorMakerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector;

  /**
   * @schema KafkaMirrorMakerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution#namespaces
   */
  readonly namespaces?: string[];

  /**
   * @schema KafkaMirrorMakerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution#topologyKey
   */
  readonly topologyKey?: string;

}

/**
 * Metadata which should be applied to the resource.
 *
 * @schema KafkaMirrorMakerSpecTemplateDeploymentMetadata
 */
export interface KafkaMirrorMakerSpecTemplateDeploymentMetadata {
  /**
   * Labels which should be added to the resource template. Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
   *
   * @schema KafkaMirrorMakerSpecTemplateDeploymentMetadata#labels
   */
  readonly labels?: any;

  /**
   * Annotations which should be added to the resource template. Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
   *
   * @schema KafkaMirrorMakerSpecTemplateDeploymentMetadata#annotations
   */
  readonly annotations?: any;

}

/**
 * Metadata applied to the resource.
 *
 * @schema KafkaMirrorMakerSpecTemplatePodMetadata
 */
export interface KafkaMirrorMakerSpecTemplatePodMetadata {
  /**
   * Labels which should be added to the resource template. Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
   *
   * @schema KafkaMirrorMakerSpecTemplatePodMetadata#labels
   */
  readonly labels?: any;

  /**
   * Annotations which should be added to the resource template. Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
   *
   * @schema KafkaMirrorMakerSpecTemplatePodMetadata#annotations
   */
  readonly annotations?: any;

}

/**
 * @schema KafkaMirrorMakerSpecTemplatePodImagePullSecrets
 */
export interface KafkaMirrorMakerSpecTemplatePodImagePullSecrets {
  /**
   * @schema KafkaMirrorMakerSpecTemplatePodImagePullSecrets#name
   */
  readonly name?: string;

}

/**
 * Configures pod-level security attributes and common container settings.
 *
 * @schema KafkaMirrorMakerSpecTemplatePodSecurityContext
 */
export interface KafkaMirrorMakerSpecTemplatePodSecurityContext {
  /**
   * @schema KafkaMirrorMakerSpecTemplatePodSecurityContext#fsGroup
   */
  readonly fsGroup?: number;

  /**
   * @schema KafkaMirrorMakerSpecTemplatePodSecurityContext#runAsGroup
   */
  readonly runAsGroup?: number;

  /**
   * @schema KafkaMirrorMakerSpecTemplatePodSecurityContext#runAsNonRoot
   */
  readonly runAsNonRoot?: boolean;

  /**
   * @schema KafkaMirrorMakerSpecTemplatePodSecurityContext#runAsUser
   */
  readonly runAsUser?: number;

  /**
   * @schema KafkaMirrorMakerSpecTemplatePodSecurityContext#seLinuxOptions
   */
  readonly seLinuxOptions?: KafkaMirrorMakerSpecTemplatePodSecurityContextSeLinuxOptions;

  /**
   * @schema KafkaMirrorMakerSpecTemplatePodSecurityContext#supplementalGroups
   */
  readonly supplementalGroups?: number[];

  /**
   * @schema KafkaMirrorMakerSpecTemplatePodSecurityContext#sysctls
   */
  readonly sysctls?: KafkaMirrorMakerSpecTemplatePodSecurityContextSysctls[];

  /**
   * @schema KafkaMirrorMakerSpecTemplatePodSecurityContext#windowsOptions
   */
  readonly windowsOptions?: KafkaMirrorMakerSpecTemplatePodSecurityContextWindowsOptions;

}

/**
 * The pod's affinity rules.
 *
 * @schema KafkaMirrorMakerSpecTemplatePodAffinity
 */
export interface KafkaMirrorMakerSpecTemplatePodAffinity {
  /**
   * @schema KafkaMirrorMakerSpecTemplatePodAffinity#nodeAffinity
   */
  readonly nodeAffinity?: KafkaMirrorMakerSpecTemplatePodAffinityNodeAffinity;

  /**
   * @schema KafkaMirrorMakerSpecTemplatePodAffinity#podAffinity
   */
  readonly podAffinity?: KafkaMirrorMakerSpecTemplatePodAffinityPodAffinity;

  /**
   * @schema KafkaMirrorMakerSpecTemplatePodAffinity#podAntiAffinity
   */
  readonly podAntiAffinity?: KafkaMirrorMakerSpecTemplatePodAffinityPodAntiAffinity;

}

/**
 * @schema KafkaMirrorMakerSpecTemplatePodTolerations
 */
export interface KafkaMirrorMakerSpecTemplatePodTolerations {
  /**
   * @schema KafkaMirrorMakerSpecTemplatePodTolerations#effect
   */
  readonly effect?: string;

  /**
   * @schema KafkaMirrorMakerSpecTemplatePodTolerations#key
   */
  readonly key?: string;

  /**
   * @schema KafkaMirrorMakerSpecTemplatePodTolerations#operator
   */
  readonly operator?: string;

  /**
   * @schema KafkaMirrorMakerSpecTemplatePodTolerations#tolerationSeconds
   */
  readonly tolerationSeconds?: number;

  /**
   * @schema KafkaMirrorMakerSpecTemplatePodTolerations#value
   */
  readonly value?: string;

}

/**
 * @schema KafkaMirrorMakerSpecTemplateMirrorMakerContainerEnv
 */
export interface KafkaMirrorMakerSpecTemplateMirrorMakerContainerEnv {
  /**
   * The environment variable key.
   *
   * @schema KafkaMirrorMakerSpecTemplateMirrorMakerContainerEnv#name
   */
  readonly name?: string;

  /**
   * The environment variable value.
   *
   * @schema KafkaMirrorMakerSpecTemplateMirrorMakerContainerEnv#value
   */
  readonly value?: string;

}

/**
 * Security context for the container.
 *
 * @schema KafkaMirrorMakerSpecTemplateMirrorMakerContainerSecurityContext
 */
export interface KafkaMirrorMakerSpecTemplateMirrorMakerContainerSecurityContext {
  /**
   * @schema KafkaMirrorMakerSpecTemplateMirrorMakerContainerSecurityContext#allowPrivilegeEscalation
   */
  readonly allowPrivilegeEscalation?: boolean;

  /**
   * @schema KafkaMirrorMakerSpecTemplateMirrorMakerContainerSecurityContext#capabilities
   */
  readonly capabilities?: KafkaMirrorMakerSpecTemplateMirrorMakerContainerSecurityContextCapabilities;

  /**
   * @schema KafkaMirrorMakerSpecTemplateMirrorMakerContainerSecurityContext#privileged
   */
  readonly privileged?: boolean;

  /**
   * @schema KafkaMirrorMakerSpecTemplateMirrorMakerContainerSecurityContext#procMount
   */
  readonly procMount?: string;

  /**
   * @schema KafkaMirrorMakerSpecTemplateMirrorMakerContainerSecurityContext#readOnlyRootFilesystem
   */
  readonly readOnlyRootFilesystem?: boolean;

  /**
   * @schema KafkaMirrorMakerSpecTemplateMirrorMakerContainerSecurityContext#runAsGroup
   */
  readonly runAsGroup?: number;

  /**
   * @schema KafkaMirrorMakerSpecTemplateMirrorMakerContainerSecurityContext#runAsNonRoot
   */
  readonly runAsNonRoot?: boolean;

  /**
   * @schema KafkaMirrorMakerSpecTemplateMirrorMakerContainerSecurityContext#runAsUser
   */
  readonly runAsUser?: number;

  /**
   * @schema KafkaMirrorMakerSpecTemplateMirrorMakerContainerSecurityContext#seLinuxOptions
   */
  readonly seLinuxOptions?: KafkaMirrorMakerSpecTemplateMirrorMakerContainerSecurityContextSeLinuxOptions;

  /**
   * @schema KafkaMirrorMakerSpecTemplateMirrorMakerContainerSecurityContext#windowsOptions
   */
  readonly windowsOptions?: KafkaMirrorMakerSpecTemplateMirrorMakerContainerSecurityContextWindowsOptions;

}

/**
 * Metadata to apply to the `PodDistruptionBugetTemplate` resource.
 *
 * @schema KafkaMirrorMakerSpecTemplatePodDisruptionBudgetMetadata
 */
export interface KafkaMirrorMakerSpecTemplatePodDisruptionBudgetMetadata {
  /**
   * Labels which should be added to the resource template. Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
   *
   * @schema KafkaMirrorMakerSpecTemplatePodDisruptionBudgetMetadata#labels
   */
  readonly labels?: any;

  /**
   * Annotations which should be added to the resource template. Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
   *
   * @schema KafkaMirrorMakerSpecTemplatePodDisruptionBudgetMetadata#annotations
   */
  readonly annotations?: any;

}

/**
 * @schema KafkaMirrorMakerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference
 */
export interface KafkaMirrorMakerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference {
  /**
   * @schema KafkaMirrorMakerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference#matchExpressions
   */
  readonly matchExpressions?: KafkaMirrorMakerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions[];

  /**
   * @schema KafkaMirrorMakerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference#matchFields
   */
  readonly matchFields?: KafkaMirrorMakerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields[];

}

/**
 * @schema KafkaMirrorMakerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms
 */
export interface KafkaMirrorMakerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms {
  /**
   * @schema KafkaMirrorMakerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms#matchExpressions
   */
  readonly matchExpressions?: KafkaMirrorMakerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions[];

  /**
   * @schema KafkaMirrorMakerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms#matchFields
   */
  readonly matchFields?: KafkaMirrorMakerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields[];

}

/**
 * @schema KafkaMirrorMakerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm
 */
export interface KafkaMirrorMakerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
  /**
   * @schema KafkaMirrorMakerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm#labelSelector
   */
  readonly labelSelector?: KafkaMirrorMakerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector;

  /**
   * @schema KafkaMirrorMakerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm#namespaces
   */
  readonly namespaces?: string[];

  /**
   * @schema KafkaMirrorMakerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm#topologyKey
   */
  readonly topologyKey?: string;

}

/**
 * @schema KafkaMirrorMakerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector
 */
export interface KafkaMirrorMakerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
  /**
   * @schema KafkaMirrorMakerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector#matchExpressions
   */
  readonly matchExpressions?: KafkaMirrorMakerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions[];

  /**
   * @schema KafkaMirrorMakerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector#matchLabels
   */
  readonly matchLabels?: any;

}

/**
 * @schema KafkaMirrorMakerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm
 */
export interface KafkaMirrorMakerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
  /**
   * @schema KafkaMirrorMakerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm#labelSelector
   */
  readonly labelSelector?: KafkaMirrorMakerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector;

  /**
   * @schema KafkaMirrorMakerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm#namespaces
   */
  readonly namespaces?: string[];

  /**
   * @schema KafkaMirrorMakerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm#topologyKey
   */
  readonly topologyKey?: string;

}

/**
 * @schema KafkaMirrorMakerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector
 */
export interface KafkaMirrorMakerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
  /**
   * @schema KafkaMirrorMakerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector#matchExpressions
   */
  readonly matchExpressions?: KafkaMirrorMakerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions[];

  /**
   * @schema KafkaMirrorMakerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector#matchLabels
   */
  readonly matchLabels?: any;

}

/**
 * @schema KafkaMirrorMakerSpecTemplatePodSecurityContextSeLinuxOptions
 */
export interface KafkaMirrorMakerSpecTemplatePodSecurityContextSeLinuxOptions {
  /**
   * @schema KafkaMirrorMakerSpecTemplatePodSecurityContextSeLinuxOptions#level
   */
  readonly level?: string;

  /**
   * @schema KafkaMirrorMakerSpecTemplatePodSecurityContextSeLinuxOptions#role
   */
  readonly role?: string;

  /**
   * @schema KafkaMirrorMakerSpecTemplatePodSecurityContextSeLinuxOptions#type
   */
  readonly type?: string;

  /**
   * @schema KafkaMirrorMakerSpecTemplatePodSecurityContextSeLinuxOptions#user
   */
  readonly user?: string;

}

/**
 * @schema KafkaMirrorMakerSpecTemplatePodSecurityContextSysctls
 */
export interface KafkaMirrorMakerSpecTemplatePodSecurityContextSysctls {
  /**
   * @schema KafkaMirrorMakerSpecTemplatePodSecurityContextSysctls#name
   */
  readonly name?: string;

  /**
   * @schema KafkaMirrorMakerSpecTemplatePodSecurityContextSysctls#value
   */
  readonly value?: string;

}

/**
 * @schema KafkaMirrorMakerSpecTemplatePodSecurityContextWindowsOptions
 */
export interface KafkaMirrorMakerSpecTemplatePodSecurityContextWindowsOptions {
  /**
   * @schema KafkaMirrorMakerSpecTemplatePodSecurityContextWindowsOptions#gmsaCredentialSpec
   */
  readonly gmsaCredentialSpec?: string;

  /**
   * @schema KafkaMirrorMakerSpecTemplatePodSecurityContextWindowsOptions#gmsaCredentialSpecName
   */
  readonly gmsaCredentialSpecName?: string;

}

/**
 * @schema KafkaMirrorMakerSpecTemplatePodAffinityNodeAffinity
 */
export interface KafkaMirrorMakerSpecTemplatePodAffinityNodeAffinity {
  /**
   * @schema KafkaMirrorMakerSpecTemplatePodAffinityNodeAffinity#preferredDuringSchedulingIgnoredDuringExecution
   */
  readonly preferredDuringSchedulingIgnoredDuringExecution?: KafkaMirrorMakerSpecTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution[];

  /**
   * @schema KafkaMirrorMakerSpecTemplatePodAffinityNodeAffinity#requiredDuringSchedulingIgnoredDuringExecution
   */
  readonly requiredDuringSchedulingIgnoredDuringExecution?: KafkaMirrorMakerSpecTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution;

}

/**
 * @schema KafkaMirrorMakerSpecTemplatePodAffinityPodAffinity
 */
export interface KafkaMirrorMakerSpecTemplatePodAffinityPodAffinity {
  /**
   * @schema KafkaMirrorMakerSpecTemplatePodAffinityPodAffinity#preferredDuringSchedulingIgnoredDuringExecution
   */
  readonly preferredDuringSchedulingIgnoredDuringExecution?: KafkaMirrorMakerSpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution[];

  /**
   * @schema KafkaMirrorMakerSpecTemplatePodAffinityPodAffinity#requiredDuringSchedulingIgnoredDuringExecution
   */
  readonly requiredDuringSchedulingIgnoredDuringExecution?: KafkaMirrorMakerSpecTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution[];

}

/**
 * @schema KafkaMirrorMakerSpecTemplatePodAffinityPodAntiAffinity
 */
export interface KafkaMirrorMakerSpecTemplatePodAffinityPodAntiAffinity {
  /**
   * @schema KafkaMirrorMakerSpecTemplatePodAffinityPodAntiAffinity#preferredDuringSchedulingIgnoredDuringExecution
   */
  readonly preferredDuringSchedulingIgnoredDuringExecution?: KafkaMirrorMakerSpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution[];

  /**
   * @schema KafkaMirrorMakerSpecTemplatePodAffinityPodAntiAffinity#requiredDuringSchedulingIgnoredDuringExecution
   */
  readonly requiredDuringSchedulingIgnoredDuringExecution?: KafkaMirrorMakerSpecTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution[];

}

/**
 * @schema KafkaMirrorMakerSpecTemplateMirrorMakerContainerSecurityContextCapabilities
 */
export interface KafkaMirrorMakerSpecTemplateMirrorMakerContainerSecurityContextCapabilities {
  /**
   * @schema KafkaMirrorMakerSpecTemplateMirrorMakerContainerSecurityContextCapabilities#add
   */
  readonly add?: string[];

  /**
   * @schema KafkaMirrorMakerSpecTemplateMirrorMakerContainerSecurityContextCapabilities#drop
   */
  readonly drop?: string[];

}

/**
 * @schema KafkaMirrorMakerSpecTemplateMirrorMakerContainerSecurityContextSeLinuxOptions
 */
export interface KafkaMirrorMakerSpecTemplateMirrorMakerContainerSecurityContextSeLinuxOptions {
  /**
   * @schema KafkaMirrorMakerSpecTemplateMirrorMakerContainerSecurityContextSeLinuxOptions#level
   */
  readonly level?: string;

  /**
   * @schema KafkaMirrorMakerSpecTemplateMirrorMakerContainerSecurityContextSeLinuxOptions#role
   */
  readonly role?: string;

  /**
   * @schema KafkaMirrorMakerSpecTemplateMirrorMakerContainerSecurityContextSeLinuxOptions#type
   */
  readonly type?: string;

  /**
   * @schema KafkaMirrorMakerSpecTemplateMirrorMakerContainerSecurityContextSeLinuxOptions#user
   */
  readonly user?: string;

}

/**
 * @schema KafkaMirrorMakerSpecTemplateMirrorMakerContainerSecurityContextWindowsOptions
 */
export interface KafkaMirrorMakerSpecTemplateMirrorMakerContainerSecurityContextWindowsOptions {
  /**
   * @schema KafkaMirrorMakerSpecTemplateMirrorMakerContainerSecurityContextWindowsOptions#gmsaCredentialSpec
   */
  readonly gmsaCredentialSpec?: string;

  /**
   * @schema KafkaMirrorMakerSpecTemplateMirrorMakerContainerSecurityContextWindowsOptions#gmsaCredentialSpecName
   */
  readonly gmsaCredentialSpecName?: string;

}

/**
 * @schema KafkaMirrorMakerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions
 */
export interface KafkaMirrorMakerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions {
  /**
   * @schema KafkaMirrorMakerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions#key
   */
  readonly key?: string;

  /**
   * @schema KafkaMirrorMakerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions#operator
   */
  readonly operator?: string;

  /**
   * @schema KafkaMirrorMakerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions#values
   */
  readonly values?: string[];

}

/**
 * @schema KafkaMirrorMakerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields
 */
export interface KafkaMirrorMakerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields {
  /**
   * @schema KafkaMirrorMakerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields#key
   */
  readonly key?: string;

  /**
   * @schema KafkaMirrorMakerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields#operator
   */
  readonly operator?: string;

  /**
   * @schema KafkaMirrorMakerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields#values
   */
  readonly values?: string[];

}

/**
 * @schema KafkaMirrorMakerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions
 */
export interface KafkaMirrorMakerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions {
  /**
   * @schema KafkaMirrorMakerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions#key
   */
  readonly key?: string;

  /**
   * @schema KafkaMirrorMakerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions#operator
   */
  readonly operator?: string;

  /**
   * @schema KafkaMirrorMakerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions#values
   */
  readonly values?: string[];

}

/**
 * @schema KafkaMirrorMakerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields
 */
export interface KafkaMirrorMakerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields {
  /**
   * @schema KafkaMirrorMakerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields#key
   */
  readonly key?: string;

  /**
   * @schema KafkaMirrorMakerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields#operator
   */
  readonly operator?: string;

  /**
   * @schema KafkaMirrorMakerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields#values
   */
  readonly values?: string[];

}

/**
 * @schema KafkaMirrorMakerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector
 */
export interface KafkaMirrorMakerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
  /**
   * @schema KafkaMirrorMakerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector#matchExpressions
   */
  readonly matchExpressions?: KafkaMirrorMakerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions[];

  /**
   * @schema KafkaMirrorMakerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector#matchLabels
   */
  readonly matchLabels?: any;

}

/**
 * @schema KafkaMirrorMakerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions
 */
export interface KafkaMirrorMakerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
  /**
   * @schema KafkaMirrorMakerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions#key
   */
  readonly key?: string;

  /**
   * @schema KafkaMirrorMakerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions#operator
   */
  readonly operator?: string;

  /**
   * @schema KafkaMirrorMakerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions#values
   */
  readonly values?: string[];

}

/**
 * @schema KafkaMirrorMakerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector
 */
export interface KafkaMirrorMakerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
  /**
   * @schema KafkaMirrorMakerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector#matchExpressions
   */
  readonly matchExpressions?: KafkaMirrorMakerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions[];

  /**
   * @schema KafkaMirrorMakerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector#matchLabels
   */
  readonly matchLabels?: any;

}

/**
 * @schema KafkaMirrorMakerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions
 */
export interface KafkaMirrorMakerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
  /**
   * @schema KafkaMirrorMakerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions#key
   */
  readonly key?: string;

  /**
   * @schema KafkaMirrorMakerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions#operator
   */
  readonly operator?: string;

  /**
   * @schema KafkaMirrorMakerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions#values
   */
  readonly values?: string[];

}

/**
 * @schema KafkaMirrorMakerSpecTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution
 */
export interface KafkaMirrorMakerSpecTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution {
  /**
   * @schema KafkaMirrorMakerSpecTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution#preference
   */
  readonly preference?: KafkaMirrorMakerSpecTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference;

  /**
   * @schema KafkaMirrorMakerSpecTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution#weight
   */
  readonly weight?: number;

}

/**
 * @schema KafkaMirrorMakerSpecTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution
 */
export interface KafkaMirrorMakerSpecTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution {
  /**
   * @schema KafkaMirrorMakerSpecTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution#nodeSelectorTerms
   */
  readonly nodeSelectorTerms?: KafkaMirrorMakerSpecTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms[];

}

/**
 * @schema KafkaMirrorMakerSpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution
 */
export interface KafkaMirrorMakerSpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution {
  /**
   * @schema KafkaMirrorMakerSpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution#podAffinityTerm
   */
  readonly podAffinityTerm?: KafkaMirrorMakerSpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm;

  /**
   * @schema KafkaMirrorMakerSpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution#weight
   */
  readonly weight?: number;

}

/**
 * @schema KafkaMirrorMakerSpecTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution
 */
export interface KafkaMirrorMakerSpecTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution {
  /**
   * @schema KafkaMirrorMakerSpecTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution#labelSelector
   */
  readonly labelSelector?: KafkaMirrorMakerSpecTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector;

  /**
   * @schema KafkaMirrorMakerSpecTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution#namespaces
   */
  readonly namespaces?: string[];

  /**
   * @schema KafkaMirrorMakerSpecTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution#topologyKey
   */
  readonly topologyKey?: string;

}

/**
 * @schema KafkaMirrorMakerSpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution
 */
export interface KafkaMirrorMakerSpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution {
  /**
   * @schema KafkaMirrorMakerSpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution#podAffinityTerm
   */
  readonly podAffinityTerm?: KafkaMirrorMakerSpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm;

  /**
   * @schema KafkaMirrorMakerSpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution#weight
   */
  readonly weight?: number;

}

/**
 * @schema KafkaMirrorMakerSpecTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution
 */
export interface KafkaMirrorMakerSpecTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution {
  /**
   * @schema KafkaMirrorMakerSpecTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution#labelSelector
   */
  readonly labelSelector?: KafkaMirrorMakerSpecTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector;

  /**
   * @schema KafkaMirrorMakerSpecTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution#namespaces
   */
  readonly namespaces?: string[];

  /**
   * @schema KafkaMirrorMakerSpecTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution#topologyKey
   */
  readonly topologyKey?: string;

}

/**
 * @schema KafkaMirrorMakerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions
 */
export interface KafkaMirrorMakerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
  /**
   * @schema KafkaMirrorMakerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions#key
   */
  readonly key?: string;

  /**
   * @schema KafkaMirrorMakerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions#operator
   */
  readonly operator?: string;

  /**
   * @schema KafkaMirrorMakerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions#values
   */
  readonly values?: string[];

}

/**
 * @schema KafkaMirrorMakerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions
 */
export interface KafkaMirrorMakerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
  /**
   * @schema KafkaMirrorMakerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions#key
   */
  readonly key?: string;

  /**
   * @schema KafkaMirrorMakerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions#operator
   */
  readonly operator?: string;

  /**
   * @schema KafkaMirrorMakerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions#values
   */
  readonly values?: string[];

}

/**
 * @schema KafkaMirrorMakerSpecTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference
 */
export interface KafkaMirrorMakerSpecTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference {
  /**
   * @schema KafkaMirrorMakerSpecTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference#matchExpressions
   */
  readonly matchExpressions?: KafkaMirrorMakerSpecTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions[];

  /**
   * @schema KafkaMirrorMakerSpecTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference#matchFields
   */
  readonly matchFields?: KafkaMirrorMakerSpecTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields[];

}

/**
 * @schema KafkaMirrorMakerSpecTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms
 */
export interface KafkaMirrorMakerSpecTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms {
  /**
   * @schema KafkaMirrorMakerSpecTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms#matchExpressions
   */
  readonly matchExpressions?: KafkaMirrorMakerSpecTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions[];

  /**
   * @schema KafkaMirrorMakerSpecTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms#matchFields
   */
  readonly matchFields?: KafkaMirrorMakerSpecTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields[];

}

/**
 * @schema KafkaMirrorMakerSpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm
 */
export interface KafkaMirrorMakerSpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
  /**
   * @schema KafkaMirrorMakerSpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm#labelSelector
   */
  readonly labelSelector?: KafkaMirrorMakerSpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector;

  /**
   * @schema KafkaMirrorMakerSpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm#namespaces
   */
  readonly namespaces?: string[];

  /**
   * @schema KafkaMirrorMakerSpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm#topologyKey
   */
  readonly topologyKey?: string;

}

/**
 * @schema KafkaMirrorMakerSpecTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector
 */
export interface KafkaMirrorMakerSpecTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
  /**
   * @schema KafkaMirrorMakerSpecTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector#matchExpressions
   */
  readonly matchExpressions?: KafkaMirrorMakerSpecTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions[];

  /**
   * @schema KafkaMirrorMakerSpecTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector#matchLabels
   */
  readonly matchLabels?: any;

}

/**
 * @schema KafkaMirrorMakerSpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm
 */
export interface KafkaMirrorMakerSpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
  /**
   * @schema KafkaMirrorMakerSpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm#labelSelector
   */
  readonly labelSelector?: KafkaMirrorMakerSpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector;

  /**
   * @schema KafkaMirrorMakerSpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm#namespaces
   */
  readonly namespaces?: string[];

  /**
   * @schema KafkaMirrorMakerSpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm#topologyKey
   */
  readonly topologyKey?: string;

}

/**
 * @schema KafkaMirrorMakerSpecTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector
 */
export interface KafkaMirrorMakerSpecTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
  /**
   * @schema KafkaMirrorMakerSpecTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector#matchExpressions
   */
  readonly matchExpressions?: KafkaMirrorMakerSpecTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions[];

  /**
   * @schema KafkaMirrorMakerSpecTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector#matchLabels
   */
  readonly matchLabels?: any;

}

/**
 * @schema KafkaMirrorMakerSpecTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions
 */
export interface KafkaMirrorMakerSpecTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions {
  /**
   * @schema KafkaMirrorMakerSpecTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions#key
   */
  readonly key?: string;

  /**
   * @schema KafkaMirrorMakerSpecTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions#operator
   */
  readonly operator?: string;

  /**
   * @schema KafkaMirrorMakerSpecTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions#values
   */
  readonly values?: string[];

}

/**
 * @schema KafkaMirrorMakerSpecTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields
 */
export interface KafkaMirrorMakerSpecTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields {
  /**
   * @schema KafkaMirrorMakerSpecTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields#key
   */
  readonly key?: string;

  /**
   * @schema KafkaMirrorMakerSpecTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields#operator
   */
  readonly operator?: string;

  /**
   * @schema KafkaMirrorMakerSpecTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields#values
   */
  readonly values?: string[];

}

/**
 * @schema KafkaMirrorMakerSpecTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions
 */
export interface KafkaMirrorMakerSpecTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions {
  /**
   * @schema KafkaMirrorMakerSpecTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions#key
   */
  readonly key?: string;

  /**
   * @schema KafkaMirrorMakerSpecTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions#operator
   */
  readonly operator?: string;

  /**
   * @schema KafkaMirrorMakerSpecTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions#values
   */
  readonly values?: string[];

}

/**
 * @schema KafkaMirrorMakerSpecTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields
 */
export interface KafkaMirrorMakerSpecTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields {
  /**
   * @schema KafkaMirrorMakerSpecTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields#key
   */
  readonly key?: string;

  /**
   * @schema KafkaMirrorMakerSpecTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields#operator
   */
  readonly operator?: string;

  /**
   * @schema KafkaMirrorMakerSpecTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields#values
   */
  readonly values?: string[];

}

/**
 * @schema KafkaMirrorMakerSpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector
 */
export interface KafkaMirrorMakerSpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
  /**
   * @schema KafkaMirrorMakerSpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector#matchExpressions
   */
  readonly matchExpressions?: KafkaMirrorMakerSpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions[];

  /**
   * @schema KafkaMirrorMakerSpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector#matchLabels
   */
  readonly matchLabels?: any;

}

/**
 * @schema KafkaMirrorMakerSpecTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions
 */
export interface KafkaMirrorMakerSpecTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
  /**
   * @schema KafkaMirrorMakerSpecTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions#key
   */
  readonly key?: string;

  /**
   * @schema KafkaMirrorMakerSpecTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions#operator
   */
  readonly operator?: string;

  /**
   * @schema KafkaMirrorMakerSpecTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions#values
   */
  readonly values?: string[];

}

/**
 * @schema KafkaMirrorMakerSpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector
 */
export interface KafkaMirrorMakerSpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
  /**
   * @schema KafkaMirrorMakerSpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector#matchExpressions
   */
  readonly matchExpressions?: KafkaMirrorMakerSpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions[];

  /**
   * @schema KafkaMirrorMakerSpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector#matchLabels
   */
  readonly matchLabels?: any;

}

/**
 * @schema KafkaMirrorMakerSpecTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions
 */
export interface KafkaMirrorMakerSpecTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
  /**
   * @schema KafkaMirrorMakerSpecTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions#key
   */
  readonly key?: string;

  /**
   * @schema KafkaMirrorMakerSpecTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions#operator
   */
  readonly operator?: string;

  /**
   * @schema KafkaMirrorMakerSpecTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions#values
   */
  readonly values?: string[];

}

/**
 * @schema KafkaMirrorMakerSpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions
 */
export interface KafkaMirrorMakerSpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
  /**
   * @schema KafkaMirrorMakerSpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions#key
   */
  readonly key?: string;

  /**
   * @schema KafkaMirrorMakerSpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions#operator
   */
  readonly operator?: string;

  /**
   * @schema KafkaMirrorMakerSpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions#values
   */
  readonly values?: string[];

}

/**
 * @schema KafkaMirrorMakerSpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions
 */
export interface KafkaMirrorMakerSpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
  /**
   * @schema KafkaMirrorMakerSpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions#key
   */
  readonly key?: string;

  /**
   * @schema KafkaMirrorMakerSpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions#operator
   */
  readonly operator?: string;

  /**
   * @schema KafkaMirrorMakerSpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions#values
   */
  readonly values?: string[];

}

