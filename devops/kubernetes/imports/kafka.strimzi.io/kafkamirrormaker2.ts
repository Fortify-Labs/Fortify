// generated by cdk8s
import { ApiObject } from 'cdk8s';
import { Construct } from 'constructs';

/**
 * 
 *
 * @schema KafkaMirrorMaker2
 */
export class KafkaMirrorMaker2 extends ApiObject {
  /**
   * Defines a "KafkaMirrorMaker2" API object
   * @param scope the scope in which to define this object
   * @param name a scope-local name for the object
   * @param options configuration options
   */
  public constructor(scope: Construct, name: string, options: KafkaMirrorMaker2Options = {}) {
    super(scope, name, {
      ...options,
      kind: 'KafkaMirrorMaker2',
      apiVersion: 'kafka.strimzi.io/v1alpha1',
    });
  }
}

/**
 * @schema KafkaMirrorMaker2
 */
export interface KafkaMirrorMaker2Options {
  /**
   * The specification of the Kafka MirrorMaker 2.0 cluster.
   *
   * @schema KafkaMirrorMaker2#spec
   */
  readonly spec?: KafkaMirrorMaker2Spec;

}

/**
 * The specification of the Kafka MirrorMaker 2.0 cluster.
 *
 * @schema KafkaMirrorMaker2Spec
 */
export interface KafkaMirrorMaker2Spec {
  /**
   * The number of pods in the Kafka Connect group.
   *
   * @schema KafkaMirrorMaker2Spec#replicas
   */
  readonly replicas?: number;

  /**
   * The Kafka Connect version. Defaults to {DefaultKafkaVersion}. Consult the user documentation to understand the process required to upgrade or downgrade the version.
   *
   * @default DefaultKafkaVersion}. Consult the user documentation to understand the process required to upgrade or downgrade the version.
   * @schema KafkaMirrorMaker2Spec#version
   */
  readonly version?: string;

  /**
   * The docker image for the pods.
   *
   * @schema KafkaMirrorMaker2Spec#image
   */
  readonly image?: string;

  /**
   * The cluster alias used for Kafka Connect. The alias must match a cluster in the list at `spec.clusters`.
   *
   * @schema KafkaMirrorMaker2Spec#connectCluster
   */
  readonly connectCluster: string;

  /**
   * Kafka clusters for mirroring.
   *
   * @schema KafkaMirrorMaker2Spec#clusters
   */
  readonly clusters?: KafkaMirrorMaker2SpecClusters[];

  /**
   * Configuration of the MirrorMaker 2.0 connectors.
   *
   * @schema KafkaMirrorMaker2Spec#mirrors
   */
  readonly mirrors?: KafkaMirrorMaker2SpecMirrors[];

  /**
   * The maximum limits for CPU and memory resources and the requested initial resources.
   *
   * @schema KafkaMirrorMaker2Spec#resources
   */
  readonly resources?: KafkaMirrorMaker2SpecResources;

  /**
   * Pod liveness checking.
   *
   * @schema KafkaMirrorMaker2Spec#livenessProbe
   */
  readonly livenessProbe?: KafkaMirrorMaker2SpecLivenessProbe;

  /**
   * Pod readiness checking.
   *
   * @schema KafkaMirrorMaker2Spec#readinessProbe
   */
  readonly readinessProbe?: KafkaMirrorMaker2SpecReadinessProbe;

  /**
   * JVM Options for pods.
   *
   * @schema KafkaMirrorMaker2Spec#jvmOptions
   */
  readonly jvmOptions?: KafkaMirrorMaker2SpecJvmOptions;

  /**
   * The pod's affinity rules.
   *
   * @schema KafkaMirrorMaker2Spec#affinity
   */
  readonly affinity?: KafkaMirrorMaker2SpecAffinity;

  /**
   * The pod's tolerations.
   *
   * @schema KafkaMirrorMaker2Spec#tolerations
   */
  readonly tolerations?: KafkaMirrorMaker2SpecTolerations[];

  /**
   * Logging configuration for Kafka Connect.
   *
   * @schema KafkaMirrorMaker2Spec#logging
   */
  readonly logging?: KafkaMirrorMaker2SpecLogging;

  /**
   * The Prometheus JMX Exporter configuration. See https://github.com/prometheus/jmx_exporter for details of the structure of this configuration.
   *
   * @schema KafkaMirrorMaker2Spec#metrics
   */
  readonly metrics?: any;

  /**
   * The configuration of tracing in Kafka Connect.
   *
   * @schema KafkaMirrorMaker2Spec#tracing
   */
  readonly tracing?: KafkaMirrorMaker2SpecTracing;

  /**
   * Template for Kafka Connect and Kafka Connect S2I resources. The template allows users to specify how the `Deployment`, `Pods` and `Service` are generated.
   *
   * @schema KafkaMirrorMaker2Spec#template
   */
  readonly template?: KafkaMirrorMaker2SpecTemplate;

  /**
   * Pass data from Secrets or ConfigMaps to the Kafka Connect pods and use them to configure connectors.
   *
   * @schema KafkaMirrorMaker2Spec#externalConfiguration
   */
  readonly externalConfiguration?: KafkaMirrorMaker2SpecExternalConfiguration;

}

/**
 * @schema KafkaMirrorMaker2SpecClusters
 */
export interface KafkaMirrorMaker2SpecClusters {
  /**
   * Alias used to reference the Kafka cluster.
   *
   * @schema KafkaMirrorMaker2SpecClusters#alias
   */
  readonly alias: string;

  /**
   * A comma-separated list of `host:port` pairs for establishing the connection to the Kafka cluster.
   *
   * @schema KafkaMirrorMaker2SpecClusters#bootstrapServers
   */
  readonly bootstrapServers: string;

  /**
   * The MirrorMaker 2.0 cluster config. Properties with the following prefixes cannot be set: ssl., sasl., security., listeners, plugin.path, rest., bootstrap.servers, consumer.interceptor.classes, producer.interceptor.classes (with the exception of: ssl.endpoint.identification.algorithm, ssl.cipher.suites, ssl.protocol, ssl.enabled.protocols).
   *
   * @schema KafkaMirrorMaker2SpecClusters#config
   */
  readonly config?: any;

  /**
   * TLS configuration for connecting MirrorMaker 2.0 connectors to a cluster.
   *
   * @schema KafkaMirrorMaker2SpecClusters#tls
   */
  readonly tls?: KafkaMirrorMaker2SpecClustersTls;

  /**
   * Authentication configuration for connecting to the cluster.
   *
   * @schema KafkaMirrorMaker2SpecClusters#authentication
   */
  readonly authentication?: KafkaMirrorMaker2SpecClustersAuthentication;

}

/**
 * @schema KafkaMirrorMaker2SpecMirrors
 */
export interface KafkaMirrorMaker2SpecMirrors {
  /**
   * The alias of the source cluster used by the Kafka MirrorMaker 2.0 connectors. The alias must match a cluster in the list at `spec.clusters`.
   *
   * @schema KafkaMirrorMaker2SpecMirrors#sourceCluster
   */
  readonly sourceCluster: string;

  /**
   * The alias of the target cluster used by the Kafka MirrorMaker 2.0 connectors. The alias must match a cluster in the list at `spec.clusters`.
   *
   * @schema KafkaMirrorMaker2SpecMirrors#targetCluster
   */
  readonly targetCluster: string;

  /**
   * The specification of the Kafka MirrorMaker 2.0 source connector.
   *
   * @schema KafkaMirrorMaker2SpecMirrors#sourceConnector
   */
  readonly sourceConnector?: KafkaMirrorMaker2SpecMirrorsSourceConnector;

  /**
   * The specification of the Kafka MirrorMaker 2.0 checkpoint connector.
   *
   * @schema KafkaMirrorMaker2SpecMirrors#checkpointConnector
   */
  readonly checkpointConnector?: KafkaMirrorMaker2SpecMirrorsCheckpointConnector;

  /**
   * The specification of the Kafka MirrorMaker 2.0 heartbeat connector.
   *
   * @schema KafkaMirrorMaker2SpecMirrors#heartbeatConnector
   */
  readonly heartbeatConnector?: KafkaMirrorMaker2SpecMirrorsHeartbeatConnector;

  /**
   * A regular expression matching the topics to be mirrored, for example, "topic1\|topic2\|topic3". Comma-separated lists are also supported.
   *
   * @schema KafkaMirrorMaker2SpecMirrors#topicsPattern
   */
  readonly topicsPattern?: string;

  /**
   * A regular expression matching the topics to exclude from mirroring. Comma-separated lists are also supported.
   *
   * @schema KafkaMirrorMaker2SpecMirrors#topicsBlacklistPattern
   */
  readonly topicsBlacklistPattern?: string;

  /**
   * A regular expression matching the consumer groups to be mirrored. Comma-separated lists are also supported.
   *
   * @schema KafkaMirrorMaker2SpecMirrors#groupsPattern
   */
  readonly groupsPattern?: string;

  /**
   * A regular expression matching the consumer groups to exclude from mirroring. Comma-separated lists are also supported.
   *
   * @schema KafkaMirrorMaker2SpecMirrors#groupsBlacklistPattern
   */
  readonly groupsBlacklistPattern?: string;

}

/**
 * The maximum limits for CPU and memory resources and the requested initial resources.
 *
 * @schema KafkaMirrorMaker2SpecResources
 */
export interface KafkaMirrorMaker2SpecResources {
  /**
   * @schema KafkaMirrorMaker2SpecResources#limits
   */
  readonly limits?: any;

  /**
   * @schema KafkaMirrorMaker2SpecResources#requests
   */
  readonly requests?: any;

}

/**
 * Pod liveness checking.
 *
 * @schema KafkaMirrorMaker2SpecLivenessProbe
 */
export interface KafkaMirrorMaker2SpecLivenessProbe {
  /**
   * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
   *
   * @default 3. Minimum value is 1.
   * @schema KafkaMirrorMaker2SpecLivenessProbe#failureThreshold
   */
  readonly failureThreshold?: number;

  /**
   * The initial delay before first the health is first checked.
   *
   * @schema KafkaMirrorMaker2SpecLivenessProbe#initialDelaySeconds
   */
  readonly initialDelaySeconds?: number;

  /**
   * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
   *
   * @default 10 seconds. Minimum value is 1.
   * @schema KafkaMirrorMaker2SpecLivenessProbe#periodSeconds
   */
  readonly periodSeconds?: number;

  /**
   * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.
   *
   * @default 1. Must be 1 for liveness. Minimum value is 1.
   * @schema KafkaMirrorMaker2SpecLivenessProbe#successThreshold
   */
  readonly successThreshold?: number;

  /**
   * The timeout for each attempted health check.
   *
   * @schema KafkaMirrorMaker2SpecLivenessProbe#timeoutSeconds
   */
  readonly timeoutSeconds?: number;

}

/**
 * Pod readiness checking.
 *
 * @schema KafkaMirrorMaker2SpecReadinessProbe
 */
export interface KafkaMirrorMaker2SpecReadinessProbe {
  /**
   * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
   *
   * @default 3. Minimum value is 1.
   * @schema KafkaMirrorMaker2SpecReadinessProbe#failureThreshold
   */
  readonly failureThreshold?: number;

  /**
   * The initial delay before first the health is first checked.
   *
   * @schema KafkaMirrorMaker2SpecReadinessProbe#initialDelaySeconds
   */
  readonly initialDelaySeconds?: number;

  /**
   * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
   *
   * @default 10 seconds. Minimum value is 1.
   * @schema KafkaMirrorMaker2SpecReadinessProbe#periodSeconds
   */
  readonly periodSeconds?: number;

  /**
   * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.
   *
   * @default 1. Must be 1 for liveness. Minimum value is 1.
   * @schema KafkaMirrorMaker2SpecReadinessProbe#successThreshold
   */
  readonly successThreshold?: number;

  /**
   * The timeout for each attempted health check.
   *
   * @schema KafkaMirrorMaker2SpecReadinessProbe#timeoutSeconds
   */
  readonly timeoutSeconds?: number;

}

/**
 * JVM Options for pods.
 *
 * @schema KafkaMirrorMaker2SpecJvmOptions
 */
export interface KafkaMirrorMaker2SpecJvmOptions {
  /**
   * A map of -XX options to the JVM.
   *
   * @schema KafkaMirrorMaker2SpecJvmOptions#-XX
   */
  readonly xx?: any;

  /**
   * -Xms option to to the JVM.
   *
   * @schema KafkaMirrorMaker2SpecJvmOptions#-Xms
   */
  readonly xms?: string;

  /**
   * -Xmx option to to the JVM.
   *
   * @schema KafkaMirrorMaker2SpecJvmOptions#-Xmx
   */
  readonly xmx?: string;

  /**
   * Specifies whether the Garbage Collection logging is enabled. The default is false.
   *
   * @schema KafkaMirrorMaker2SpecJvmOptions#gcLoggingEnabled
   */
  readonly gcLoggingEnabled?: boolean;

  /**
   * A map of additional system properties which will be passed using the `-D` option to the JVM.
   *
   * @schema KafkaMirrorMaker2SpecJvmOptions#javaSystemProperties
   */
  readonly javaSystemProperties?: KafkaMirrorMaker2SpecJvmOptionsJavaSystemProperties[];

}

/**
 * The pod's affinity rules.
 *
 * @schema KafkaMirrorMaker2SpecAffinity
 */
export interface KafkaMirrorMaker2SpecAffinity {
  /**
   * @schema KafkaMirrorMaker2SpecAffinity#nodeAffinity
   */
  readonly nodeAffinity?: KafkaMirrorMaker2SpecAffinityNodeAffinity;

  /**
   * @schema KafkaMirrorMaker2SpecAffinity#podAffinity
   */
  readonly podAffinity?: KafkaMirrorMaker2SpecAffinityPodAffinity;

  /**
   * @schema KafkaMirrorMaker2SpecAffinity#podAntiAffinity
   */
  readonly podAntiAffinity?: KafkaMirrorMaker2SpecAffinityPodAntiAffinity;

}

/**
 * @schema KafkaMirrorMaker2SpecTolerations
 */
export interface KafkaMirrorMaker2SpecTolerations {
  /**
   * @schema KafkaMirrorMaker2SpecTolerations#effect
   */
  readonly effect?: string;

  /**
   * @schema KafkaMirrorMaker2SpecTolerations#key
   */
  readonly key?: string;

  /**
   * @schema KafkaMirrorMaker2SpecTolerations#operator
   */
  readonly operator?: string;

  /**
   * @schema KafkaMirrorMaker2SpecTolerations#tolerationSeconds
   */
  readonly tolerationSeconds?: number;

  /**
   * @schema KafkaMirrorMaker2SpecTolerations#value
   */
  readonly value?: string;

}

/**
 * Logging configuration for Kafka Connect.
 *
 * @schema KafkaMirrorMaker2SpecLogging
 */
export interface KafkaMirrorMaker2SpecLogging {
  /**
   * A Map from logger name to logger level.
   *
   * @schema KafkaMirrorMaker2SpecLogging#loggers
   */
  readonly loggers?: any;

  /**
   * The name of the `ConfigMap` from which to get the logging configuration.
   *
   * @schema KafkaMirrorMaker2SpecLogging#name
   */
  readonly name?: string;

  /**
   * Logging type, must be either 'inline' or 'external'.
   *
   * @schema KafkaMirrorMaker2SpecLogging#type
   */
  readonly type: KafkaMirrorMaker2SpecLoggingType;

}

/**
 * The configuration of tracing in Kafka Connect.
 *
 * @schema KafkaMirrorMaker2SpecTracing
 */
export interface KafkaMirrorMaker2SpecTracing {
  /**
   * Type of the tracing used. Currently the only supported type is `jaeger` for Jaeger tracing.
   *
   * @schema KafkaMirrorMaker2SpecTracing#type
   */
  readonly type: KafkaMirrorMaker2SpecTracingType;

}

/**
 * Template for Kafka Connect and Kafka Connect S2I resources. The template allows users to specify how the `Deployment`, `Pods` and `Service` are generated.
 *
 * @schema KafkaMirrorMaker2SpecTemplate
 */
export interface KafkaMirrorMaker2SpecTemplate {
  /**
   * Template for Kafka Connect `Deployment`.
   *
   * @schema KafkaMirrorMaker2SpecTemplate#deployment
   */
  readonly deployment?: KafkaMirrorMaker2SpecTemplateDeployment;

  /**
   * Template for Kafka Connect `Pods`.
   *
   * @schema KafkaMirrorMaker2SpecTemplate#pod
   */
  readonly pod?: KafkaMirrorMaker2SpecTemplatePod;

  /**
   * Template for Kafka Connect API `Service`.
   *
   * @schema KafkaMirrorMaker2SpecTemplate#apiService
   */
  readonly apiService?: KafkaMirrorMaker2SpecTemplateApiService;

  /**
   * Template for the Kafka Connect container.
   *
   * @schema KafkaMirrorMaker2SpecTemplate#connectContainer
   */
  readonly connectContainer?: KafkaMirrorMaker2SpecTemplateConnectContainer;

  /**
   * Template for Kafka Connect `PodDisruptionBudget`.
   *
   * @schema KafkaMirrorMaker2SpecTemplate#podDisruptionBudget
   */
  readonly podDisruptionBudget?: KafkaMirrorMaker2SpecTemplatePodDisruptionBudget;

}

/**
 * Pass data from Secrets or ConfigMaps to the Kafka Connect pods and use them to configure connectors.
 *
 * @schema KafkaMirrorMaker2SpecExternalConfiguration
 */
export interface KafkaMirrorMaker2SpecExternalConfiguration {
  /**
   * Allows to pass data from Secret or ConfigMap to the Kafka Connect pods as environment variables.
   *
   * @schema KafkaMirrorMaker2SpecExternalConfiguration#env
   */
  readonly env?: KafkaMirrorMaker2SpecExternalConfigurationEnv[];

  /**
   * Allows to pass data from Secret or ConfigMap to the Kafka Connect pods as volumes.
   *
   * @schema KafkaMirrorMaker2SpecExternalConfiguration#volumes
   */
  readonly volumes?: KafkaMirrorMaker2SpecExternalConfigurationVolumes[];

}

/**
 * TLS configuration for connecting MirrorMaker 2.0 connectors to a cluster.
 *
 * @schema KafkaMirrorMaker2SpecClustersTls
 */
export interface KafkaMirrorMaker2SpecClustersTls {
  /**
   * Trusted certificates for TLS connection.
   *
   * @schema KafkaMirrorMaker2SpecClustersTls#trustedCertificates
   */
  readonly trustedCertificates?: KafkaMirrorMaker2SpecClustersTlsTrustedCertificates[];

}

/**
 * Authentication configuration for connecting to the cluster.
 *
 * @schema KafkaMirrorMaker2SpecClustersAuthentication
 */
export interface KafkaMirrorMaker2SpecClustersAuthentication {
  /**
   * Link to Kubernetes Secret containing the access token which was obtained from the authorization server.
   *
   * @schema KafkaMirrorMaker2SpecClustersAuthentication#accessToken
   */
  readonly accessToken?: KafkaMirrorMaker2SpecClustersAuthenticationAccessToken;

  /**
   * Configure whether access token should be treated as JWT. This should be set to `false` if the authorization server returns opaque tokens. Defaults to `true`.
   *
   * @default true`.
   * @schema KafkaMirrorMaker2SpecClustersAuthentication#accessTokenIsJwt
   */
  readonly accessTokenIsJwt?: boolean;

  /**
   * Reference to the `Secret` which holds the certificate and private key pair.
   *
   * @schema KafkaMirrorMaker2SpecClustersAuthentication#certificateAndKey
   */
  readonly certificateAndKey?: KafkaMirrorMaker2SpecClustersAuthenticationCertificateAndKey;

  /**
   * OAuth Client ID which the Kafka client can use to authenticate against the OAuth server and use the token endpoint URI.
   *
   * @schema KafkaMirrorMaker2SpecClustersAuthentication#clientId
   */
  readonly clientId?: string;

  /**
   * Link to Kubernetes Secret containing the OAuth client secret which the Kafka client can use to authenticate against the OAuth server and use the token endpoint URI.
   *
   * @schema KafkaMirrorMaker2SpecClustersAuthentication#clientSecret
   */
  readonly clientSecret?: KafkaMirrorMaker2SpecClustersAuthenticationClientSecret;

  /**
   * Enable or disable TLS hostname verification. Default value is `false`.
   *
   * @schema KafkaMirrorMaker2SpecClustersAuthentication#disableTlsHostnameVerification
   */
  readonly disableTlsHostnameVerification?: boolean;

  /**
   * Set or limit time-to-live of the access tokens to the specified number of seconds. This should be set if the authorization server returns opaque tokens.
   *
   * @schema KafkaMirrorMaker2SpecClustersAuthentication#maxTokenExpirySeconds
   */
  readonly maxTokenExpirySeconds?: number;

  /**
   * Reference to the `Secret` which holds the password.
   *
   * @schema KafkaMirrorMaker2SpecClustersAuthentication#passwordSecret
   */
  readonly passwordSecret?: KafkaMirrorMaker2SpecClustersAuthenticationPasswordSecret;

  /**
   * Link to Kubernetes Secret containing the refresh token which can be used to obtain access token from the authorization server.
   *
   * @schema KafkaMirrorMaker2SpecClustersAuthentication#refreshToken
   */
  readonly refreshToken?: KafkaMirrorMaker2SpecClustersAuthenticationRefreshToken;

  /**
   * OAuth scope to use when authenticating against the authorization server. Some authorization servers require this to be set. The possible values depend on how authorization server is configured. By default `scope` is not specified when doing the token endpoint request.
   *
   * @schema KafkaMirrorMaker2SpecClustersAuthentication#scope
   */
  readonly scope?: string;

  /**
   * Trusted certificates for TLS connection to the OAuth server.
   *
   * @schema KafkaMirrorMaker2SpecClustersAuthentication#tlsTrustedCertificates
   */
  readonly tlsTrustedCertificates?: KafkaMirrorMaker2SpecClustersAuthenticationTlsTrustedCertificates[];

  /**
   * Authorization server token endpoint URI.
   *
   * @schema KafkaMirrorMaker2SpecClustersAuthentication#tokenEndpointUri
   */
  readonly tokenEndpointUri?: string;

  /**
   * Authentication type. Currently the only supported types are `tls`, `scram-sha-512`, and `plain`. `scram-sha-512` type uses SASL SCRAM-SHA-512 Authentication. `plain` type uses SASL PLAIN Authentication. `oauth` type uses SASL OAUTHBEARER Authentication. The `tls` type uses TLS Client Authentication. The `tls` type is supported only over TLS connections.
   *
   * @schema KafkaMirrorMaker2SpecClustersAuthentication#type
   */
  readonly type: KafkaMirrorMaker2SpecClustersAuthenticationType;

  /**
   * Username used for the authentication.
   *
   * @schema KafkaMirrorMaker2SpecClustersAuthentication#username
   */
  readonly username?: string;

}

/**
 * The specification of the Kafka MirrorMaker 2.0 source connector.
 *
 * @schema KafkaMirrorMaker2SpecMirrorsSourceConnector
 */
export interface KafkaMirrorMaker2SpecMirrorsSourceConnector {
  /**
   * The maximum number of tasks for the Kafka Connector.
   *
   * @schema KafkaMirrorMaker2SpecMirrorsSourceConnector#tasksMax
   */
  readonly tasksMax?: number;

  /**
   * The Kafka Connector configuration. The following properties cannot be set: connector.class, tasks.max.
   *
   * @schema KafkaMirrorMaker2SpecMirrorsSourceConnector#config
   */
  readonly config?: any;

  /**
   * Whether the connector should be paused. Defaults to false.
   *
   * @default false.
   * @schema KafkaMirrorMaker2SpecMirrorsSourceConnector#pause
   */
  readonly pause?: boolean;

}

/**
 * The specification of the Kafka MirrorMaker 2.0 checkpoint connector.
 *
 * @schema KafkaMirrorMaker2SpecMirrorsCheckpointConnector
 */
export interface KafkaMirrorMaker2SpecMirrorsCheckpointConnector {
  /**
   * The maximum number of tasks for the Kafka Connector.
   *
   * @schema KafkaMirrorMaker2SpecMirrorsCheckpointConnector#tasksMax
   */
  readonly tasksMax?: number;

  /**
   * The Kafka Connector configuration. The following properties cannot be set: connector.class, tasks.max.
   *
   * @schema KafkaMirrorMaker2SpecMirrorsCheckpointConnector#config
   */
  readonly config?: any;

  /**
   * Whether the connector should be paused. Defaults to false.
   *
   * @default false.
   * @schema KafkaMirrorMaker2SpecMirrorsCheckpointConnector#pause
   */
  readonly pause?: boolean;

}

/**
 * The specification of the Kafka MirrorMaker 2.0 heartbeat connector.
 *
 * @schema KafkaMirrorMaker2SpecMirrorsHeartbeatConnector
 */
export interface KafkaMirrorMaker2SpecMirrorsHeartbeatConnector {
  /**
   * The maximum number of tasks for the Kafka Connector.
   *
   * @schema KafkaMirrorMaker2SpecMirrorsHeartbeatConnector#tasksMax
   */
  readonly tasksMax?: number;

  /**
   * The Kafka Connector configuration. The following properties cannot be set: connector.class, tasks.max.
   *
   * @schema KafkaMirrorMaker2SpecMirrorsHeartbeatConnector#config
   */
  readonly config?: any;

  /**
   * Whether the connector should be paused. Defaults to false.
   *
   * @default false.
   * @schema KafkaMirrorMaker2SpecMirrorsHeartbeatConnector#pause
   */
  readonly pause?: boolean;

}

/**
 * @schema KafkaMirrorMaker2SpecJvmOptionsJavaSystemProperties
 */
export interface KafkaMirrorMaker2SpecJvmOptionsJavaSystemProperties {
  /**
   * The system property name.
   *
   * @schema KafkaMirrorMaker2SpecJvmOptionsJavaSystemProperties#name
   */
  readonly name?: string;

  /**
   * The system property value.
   *
   * @schema KafkaMirrorMaker2SpecJvmOptionsJavaSystemProperties#value
   */
  readonly value?: string;

}

/**
 * @schema KafkaMirrorMaker2SpecAffinityNodeAffinity
 */
export interface KafkaMirrorMaker2SpecAffinityNodeAffinity {
  /**
   * @schema KafkaMirrorMaker2SpecAffinityNodeAffinity#preferredDuringSchedulingIgnoredDuringExecution
   */
  readonly preferredDuringSchedulingIgnoredDuringExecution?: KafkaMirrorMaker2SpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution[];

  /**
   * @schema KafkaMirrorMaker2SpecAffinityNodeAffinity#requiredDuringSchedulingIgnoredDuringExecution
   */
  readonly requiredDuringSchedulingIgnoredDuringExecution?: KafkaMirrorMaker2SpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution;

}

/**
 * @schema KafkaMirrorMaker2SpecAffinityPodAffinity
 */
export interface KafkaMirrorMaker2SpecAffinityPodAffinity {
  /**
   * @schema KafkaMirrorMaker2SpecAffinityPodAffinity#preferredDuringSchedulingIgnoredDuringExecution
   */
  readonly preferredDuringSchedulingIgnoredDuringExecution?: KafkaMirrorMaker2SpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution[];

  /**
   * @schema KafkaMirrorMaker2SpecAffinityPodAffinity#requiredDuringSchedulingIgnoredDuringExecution
   */
  readonly requiredDuringSchedulingIgnoredDuringExecution?: KafkaMirrorMaker2SpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution[];

}

/**
 * @schema KafkaMirrorMaker2SpecAffinityPodAntiAffinity
 */
export interface KafkaMirrorMaker2SpecAffinityPodAntiAffinity {
  /**
   * @schema KafkaMirrorMaker2SpecAffinityPodAntiAffinity#preferredDuringSchedulingIgnoredDuringExecution
   */
  readonly preferredDuringSchedulingIgnoredDuringExecution?: KafkaMirrorMaker2SpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution[];

  /**
   * @schema KafkaMirrorMaker2SpecAffinityPodAntiAffinity#requiredDuringSchedulingIgnoredDuringExecution
   */
  readonly requiredDuringSchedulingIgnoredDuringExecution?: KafkaMirrorMaker2SpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution[];

}

/**
 * Logging type, must be either 'inline' or 'external'.
 *
 * @schema KafkaMirrorMaker2SpecLoggingType
 */
export enum KafkaMirrorMaker2SpecLoggingType {
  /** inline */
  INLINE = "inline",
  /** external */
  EXTERNAL = "external",
}

/**
 * Type of the tracing used. Currently the only supported type is `jaeger` for Jaeger tracing.
 *
 * @schema KafkaMirrorMaker2SpecTracingType
 */
export enum KafkaMirrorMaker2SpecTracingType {
  /** jaeger */
  JAEGER = "jaeger",
}

/**
 * Template for Kafka Connect `Deployment`.
 *
 * @schema KafkaMirrorMaker2SpecTemplateDeployment
 */
export interface KafkaMirrorMaker2SpecTemplateDeployment {
  /**
   * Metadata applied to the resource.
   *
   * @schema KafkaMirrorMaker2SpecTemplateDeployment#metadata
   */
  readonly metadata?: KafkaMirrorMaker2SpecTemplateDeploymentMetadata;

}

/**
 * Template for Kafka Connect `Pods`.
 *
 * @schema KafkaMirrorMaker2SpecTemplatePod
 */
export interface KafkaMirrorMaker2SpecTemplatePod {
  /**
   * Metadata applied to the resource.
   *
   * @schema KafkaMirrorMaker2SpecTemplatePod#metadata
   */
  readonly metadata?: KafkaMirrorMaker2SpecTemplatePodMetadata;

  /**
   * List of references to secrets in the same namespace to use for pulling any of the images used by this Pod. When the `STRIMZI_IMAGE_PULL_SECRETS` environment variable in Cluster Operator and the `imagePullSecrets` option are specified, only the `imagePullSecrets` variable is used and the `STRIMZI_IMAGE_PULL_SECRETS` variable is ignored.
   *
   * @schema KafkaMirrorMaker2SpecTemplatePod#imagePullSecrets
   */
  readonly imagePullSecrets?: KafkaMirrorMaker2SpecTemplatePodImagePullSecrets[];

  /**
   * Configures pod-level security attributes and common container settings.
   *
   * @schema KafkaMirrorMaker2SpecTemplatePod#securityContext
   */
  readonly securityContext?: KafkaMirrorMaker2SpecTemplatePodSecurityContext;

  /**
   * The grace period is the duration in seconds after the processes running in the pod are sent a termination signal, and the time when the processes are forcibly halted with a kill signal. Set this value to longer than the expected cleanup time for your process. Value must be a non-negative integer. A zero value indicates delete immediately. You might need to increase the grace period for very large Kafka clusters, so that the Kafka brokers have enough time to transfer their work to another broker before they are terminated. Defaults to 30 seconds.
   *
   * @default 30 seconds.
   * @schema KafkaMirrorMaker2SpecTemplatePod#terminationGracePeriodSeconds
   */
  readonly terminationGracePeriodSeconds?: number;

  /**
   * The pod's affinity rules.
   *
   * @schema KafkaMirrorMaker2SpecTemplatePod#affinity
   */
  readonly affinity?: KafkaMirrorMaker2SpecTemplatePodAffinity;

  /**
   * The name of the priority class used to assign priority to the pods. For more information about priority classes, see {K8sPriorityClass}.
   *
   * @schema KafkaMirrorMaker2SpecTemplatePod#priorityClassName
   */
  readonly priorityClassName?: string;

  /**
   * The name of the scheduler used to dispatch this `Pod`. If not specified, the default scheduler will be used.
   *
   * @schema KafkaMirrorMaker2SpecTemplatePod#schedulerName
   */
  readonly schedulerName?: string;

  /**
   * The pod's tolerations.
   *
   * @schema KafkaMirrorMaker2SpecTemplatePod#tolerations
   */
  readonly tolerations?: KafkaMirrorMaker2SpecTemplatePodTolerations[];

}

/**
 * Template for Kafka Connect API `Service`.
 *
 * @schema KafkaMirrorMaker2SpecTemplateApiService
 */
export interface KafkaMirrorMaker2SpecTemplateApiService {
  /**
   * Metadata applied to the resource.
   *
   * @schema KafkaMirrorMaker2SpecTemplateApiService#metadata
   */
  readonly metadata?: KafkaMirrorMaker2SpecTemplateApiServiceMetadata;

}

/**
 * Template for the Kafka Connect container.
 *
 * @schema KafkaMirrorMaker2SpecTemplateConnectContainer
 */
export interface KafkaMirrorMaker2SpecTemplateConnectContainer {
  /**
   * Environment variables which should be applied to the container.
   *
   * @schema KafkaMirrorMaker2SpecTemplateConnectContainer#env
   */
  readonly env?: KafkaMirrorMaker2SpecTemplateConnectContainerEnv[];

  /**
   * Security context for the container.
   *
   * @schema KafkaMirrorMaker2SpecTemplateConnectContainer#securityContext
   */
  readonly securityContext?: KafkaMirrorMaker2SpecTemplateConnectContainerSecurityContext;

}

/**
 * Template for Kafka Connect `PodDisruptionBudget`.
 *
 * @schema KafkaMirrorMaker2SpecTemplatePodDisruptionBudget
 */
export interface KafkaMirrorMaker2SpecTemplatePodDisruptionBudget {
  /**
   * Metadata to apply to the `PodDistruptionBugetTemplate` resource.
   *
   * @schema KafkaMirrorMaker2SpecTemplatePodDisruptionBudget#metadata
   */
  readonly metadata?: KafkaMirrorMaker2SpecTemplatePodDisruptionBudgetMetadata;

  /**
   * Maximum number of unavailable pods to allow automatic Pod eviction. A Pod eviction is allowed when the `maxUnavailable` number of pods or fewer are unavailable after the eviction. Setting this value to 0 prevents all voluntary evictions, so the pods must be evicted manually. Defaults to 1.
   *
   * @default 1.
   * @schema KafkaMirrorMaker2SpecTemplatePodDisruptionBudget#maxUnavailable
   */
  readonly maxUnavailable?: number;

}

/**
 * @schema KafkaMirrorMaker2SpecExternalConfigurationEnv
 */
export interface KafkaMirrorMaker2SpecExternalConfigurationEnv {
  /**
   * Name of the environment variable which will be passed to the Kafka Connect pods. The name of the environment variable cannot start with `KAFKA_` or `STRIMZI_`.
   *
   * @schema KafkaMirrorMaker2SpecExternalConfigurationEnv#name
   */
  readonly name: string;

  /**
   * Value of the environment variable which will be passed to the Kafka Connect pods. It can be passed either as a reference to Secret or ConfigMap field. The field has to specify exactly one Secret or ConfigMap.
   *
   * @schema KafkaMirrorMaker2SpecExternalConfigurationEnv#valueFrom
   */
  readonly valueFrom: KafkaMirrorMaker2SpecExternalConfigurationEnvValueFrom;

}

/**
 * @schema KafkaMirrorMaker2SpecExternalConfigurationVolumes
 */
export interface KafkaMirrorMaker2SpecExternalConfigurationVolumes {
  /**
   * Reference to a key in a ConfigMap. Exactly one Secret or ConfigMap has to be specified.
   *
   * @schema KafkaMirrorMaker2SpecExternalConfigurationVolumes#configMap
   */
  readonly configMap?: KafkaMirrorMaker2SpecExternalConfigurationVolumesConfigMap;

  /**
   * Name of the volume which will be added to the Kafka Connect pods.
   *
   * @schema KafkaMirrorMaker2SpecExternalConfigurationVolumes#name
   */
  readonly name: string;

  /**
   * Reference to a key in a Secret. Exactly one Secret or ConfigMap has to be specified.
   *
   * @schema KafkaMirrorMaker2SpecExternalConfigurationVolumes#secret
   */
  readonly secret?: KafkaMirrorMaker2SpecExternalConfigurationVolumesSecret;

}

/**
 * @schema KafkaMirrorMaker2SpecClustersTlsTrustedCertificates
 */
export interface KafkaMirrorMaker2SpecClustersTlsTrustedCertificates {
  /**
   * The name of the file certificate in the Secret.
   *
   * @schema KafkaMirrorMaker2SpecClustersTlsTrustedCertificates#certificate
   */
  readonly certificate: string;

  /**
   * The name of the Secret containing the certificate.
   *
   * @schema KafkaMirrorMaker2SpecClustersTlsTrustedCertificates#secretName
   */
  readonly secretName: string;

}

/**
 * Link to Kubernetes Secret containing the access token which was obtained from the authorization server.
 *
 * @schema KafkaMirrorMaker2SpecClustersAuthenticationAccessToken
 */
export interface KafkaMirrorMaker2SpecClustersAuthenticationAccessToken {
  /**
   * The key under which the secret value is stored in the Kubernetes Secret.
   *
   * @schema KafkaMirrorMaker2SpecClustersAuthenticationAccessToken#key
   */
  readonly key: string;

  /**
   * The name of the Kubernetes Secret containing the secret value.
   *
   * @schema KafkaMirrorMaker2SpecClustersAuthenticationAccessToken#secretName
   */
  readonly secretName: string;

}

/**
 * Reference to the `Secret` which holds the certificate and private key pair.
 *
 * @schema KafkaMirrorMaker2SpecClustersAuthenticationCertificateAndKey
 */
export interface KafkaMirrorMaker2SpecClustersAuthenticationCertificateAndKey {
  /**
   * The name of the file certificate in the Secret.
   *
   * @schema KafkaMirrorMaker2SpecClustersAuthenticationCertificateAndKey#certificate
   */
  readonly certificate: string;

  /**
   * The name of the private key in the Secret.
   *
   * @schema KafkaMirrorMaker2SpecClustersAuthenticationCertificateAndKey#key
   */
  readonly key: string;

  /**
   * The name of the Secret containing the certificate.
   *
   * @schema KafkaMirrorMaker2SpecClustersAuthenticationCertificateAndKey#secretName
   */
  readonly secretName: string;

}

/**
 * Link to Kubernetes Secret containing the OAuth client secret which the Kafka client can use to authenticate against the OAuth server and use the token endpoint URI.
 *
 * @schema KafkaMirrorMaker2SpecClustersAuthenticationClientSecret
 */
export interface KafkaMirrorMaker2SpecClustersAuthenticationClientSecret {
  /**
   * The key under which the secret value is stored in the Kubernetes Secret.
   *
   * @schema KafkaMirrorMaker2SpecClustersAuthenticationClientSecret#key
   */
  readonly key: string;

  /**
   * The name of the Kubernetes Secret containing the secret value.
   *
   * @schema KafkaMirrorMaker2SpecClustersAuthenticationClientSecret#secretName
   */
  readonly secretName: string;

}

/**
 * Reference to the `Secret` which holds the password.
 *
 * @schema KafkaMirrorMaker2SpecClustersAuthenticationPasswordSecret
 */
export interface KafkaMirrorMaker2SpecClustersAuthenticationPasswordSecret {
  /**
   * The name of the key in the Secret under which the password is stored.
   *
   * @schema KafkaMirrorMaker2SpecClustersAuthenticationPasswordSecret#password
   */
  readonly password: string;

  /**
   * The name of the Secret containing the password.
   *
   * @schema KafkaMirrorMaker2SpecClustersAuthenticationPasswordSecret#secretName
   */
  readonly secretName: string;

}

/**
 * Link to Kubernetes Secret containing the refresh token which can be used to obtain access token from the authorization server.
 *
 * @schema KafkaMirrorMaker2SpecClustersAuthenticationRefreshToken
 */
export interface KafkaMirrorMaker2SpecClustersAuthenticationRefreshToken {
  /**
   * The key under which the secret value is stored in the Kubernetes Secret.
   *
   * @schema KafkaMirrorMaker2SpecClustersAuthenticationRefreshToken#key
   */
  readonly key: string;

  /**
   * The name of the Kubernetes Secret containing the secret value.
   *
   * @schema KafkaMirrorMaker2SpecClustersAuthenticationRefreshToken#secretName
   */
  readonly secretName: string;

}

/**
 * @schema KafkaMirrorMaker2SpecClustersAuthenticationTlsTrustedCertificates
 */
export interface KafkaMirrorMaker2SpecClustersAuthenticationTlsTrustedCertificates {
  /**
   * The name of the file certificate in the Secret.
   *
   * @schema KafkaMirrorMaker2SpecClustersAuthenticationTlsTrustedCertificates#certificate
   */
  readonly certificate: string;

  /**
   * The name of the Secret containing the certificate.
   *
   * @schema KafkaMirrorMaker2SpecClustersAuthenticationTlsTrustedCertificates#secretName
   */
  readonly secretName: string;

}

/**
 * Authentication type. Currently the only supported types are `tls`, `scram-sha-512`, and `plain`. `scram-sha-512` type uses SASL SCRAM-SHA-512 Authentication. `plain` type uses SASL PLAIN Authentication. `oauth` type uses SASL OAUTHBEARER Authentication. The `tls` type uses TLS Client Authentication. The `tls` type is supported only over TLS connections.
 *
 * @schema KafkaMirrorMaker2SpecClustersAuthenticationType
 */
export enum KafkaMirrorMaker2SpecClustersAuthenticationType {
  /** tls */
  TLS = "tls",
  /** scram-sha-512 */
  SCRAM_SHA_512 = "scram-sha-512",
  /** plain */
  PLAIN = "plain",
  /** oauth */
  OAUTH = "oauth",
}

/**
 * @schema KafkaMirrorMaker2SpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution
 */
export interface KafkaMirrorMaker2SpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution {
  /**
   * @schema KafkaMirrorMaker2SpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution#preference
   */
  readonly preference?: KafkaMirrorMaker2SpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference;

  /**
   * @schema KafkaMirrorMaker2SpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution#weight
   */
  readonly weight?: number;

}

/**
 * @schema KafkaMirrorMaker2SpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution
 */
export interface KafkaMirrorMaker2SpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution {
  /**
   * @schema KafkaMirrorMaker2SpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution#nodeSelectorTerms
   */
  readonly nodeSelectorTerms?: KafkaMirrorMaker2SpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms[];

}

/**
 * @schema KafkaMirrorMaker2SpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution
 */
export interface KafkaMirrorMaker2SpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution {
  /**
   * @schema KafkaMirrorMaker2SpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution#podAffinityTerm
   */
  readonly podAffinityTerm?: KafkaMirrorMaker2SpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm;

  /**
   * @schema KafkaMirrorMaker2SpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution#weight
   */
  readonly weight?: number;

}

/**
 * @schema KafkaMirrorMaker2SpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution
 */
export interface KafkaMirrorMaker2SpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution {
  /**
   * @schema KafkaMirrorMaker2SpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution#labelSelector
   */
  readonly labelSelector?: KafkaMirrorMaker2SpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector;

  /**
   * @schema KafkaMirrorMaker2SpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution#namespaces
   */
  readonly namespaces?: string[];

  /**
   * @schema KafkaMirrorMaker2SpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution#topologyKey
   */
  readonly topologyKey?: string;

}

/**
 * @schema KafkaMirrorMaker2SpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution
 */
export interface KafkaMirrorMaker2SpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution {
  /**
   * @schema KafkaMirrorMaker2SpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution#podAffinityTerm
   */
  readonly podAffinityTerm?: KafkaMirrorMaker2SpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm;

  /**
   * @schema KafkaMirrorMaker2SpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution#weight
   */
  readonly weight?: number;

}

/**
 * @schema KafkaMirrorMaker2SpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution
 */
export interface KafkaMirrorMaker2SpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution {
  /**
   * @schema KafkaMirrorMaker2SpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution#labelSelector
   */
  readonly labelSelector?: KafkaMirrorMaker2SpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector;

  /**
   * @schema KafkaMirrorMaker2SpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution#namespaces
   */
  readonly namespaces?: string[];

  /**
   * @schema KafkaMirrorMaker2SpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution#topologyKey
   */
  readonly topologyKey?: string;

}

/**
 * Metadata applied to the resource.
 *
 * @schema KafkaMirrorMaker2SpecTemplateDeploymentMetadata
 */
export interface KafkaMirrorMaker2SpecTemplateDeploymentMetadata {
  /**
   * Labels added to the resource template. Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
   *
   * @schema KafkaMirrorMaker2SpecTemplateDeploymentMetadata#labels
   */
  readonly labels?: any;

  /**
   * Annotations added to the resource template. Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
   *
   * @schema KafkaMirrorMaker2SpecTemplateDeploymentMetadata#annotations
   */
  readonly annotations?: any;

}

/**
 * Metadata applied to the resource.
 *
 * @schema KafkaMirrorMaker2SpecTemplatePodMetadata
 */
export interface KafkaMirrorMaker2SpecTemplatePodMetadata {
  /**
   * Labels added to the resource template. Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
   *
   * @schema KafkaMirrorMaker2SpecTemplatePodMetadata#labels
   */
  readonly labels?: any;

  /**
   * Annotations added to the resource template. Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
   *
   * @schema KafkaMirrorMaker2SpecTemplatePodMetadata#annotations
   */
  readonly annotations?: any;

}

/**
 * @schema KafkaMirrorMaker2SpecTemplatePodImagePullSecrets
 */
export interface KafkaMirrorMaker2SpecTemplatePodImagePullSecrets {
  /**
   * @schema KafkaMirrorMaker2SpecTemplatePodImagePullSecrets#name
   */
  readonly name?: string;

}

/**
 * Configures pod-level security attributes and common container settings.
 *
 * @schema KafkaMirrorMaker2SpecTemplatePodSecurityContext
 */
export interface KafkaMirrorMaker2SpecTemplatePodSecurityContext {
  /**
   * @schema KafkaMirrorMaker2SpecTemplatePodSecurityContext#fsGroup
   */
  readonly fsGroup?: number;

  /**
   * @schema KafkaMirrorMaker2SpecTemplatePodSecurityContext#runAsGroup
   */
  readonly runAsGroup?: number;

  /**
   * @schema KafkaMirrorMaker2SpecTemplatePodSecurityContext#runAsNonRoot
   */
  readonly runAsNonRoot?: boolean;

  /**
   * @schema KafkaMirrorMaker2SpecTemplatePodSecurityContext#runAsUser
   */
  readonly runAsUser?: number;

  /**
   * @schema KafkaMirrorMaker2SpecTemplatePodSecurityContext#seLinuxOptions
   */
  readonly seLinuxOptions?: KafkaMirrorMaker2SpecTemplatePodSecurityContextSeLinuxOptions;

  /**
   * @schema KafkaMirrorMaker2SpecTemplatePodSecurityContext#supplementalGroups
   */
  readonly supplementalGroups?: number[];

  /**
   * @schema KafkaMirrorMaker2SpecTemplatePodSecurityContext#sysctls
   */
  readonly sysctls?: KafkaMirrorMaker2SpecTemplatePodSecurityContextSysctls[];

  /**
   * @schema KafkaMirrorMaker2SpecTemplatePodSecurityContext#windowsOptions
   */
  readonly windowsOptions?: KafkaMirrorMaker2SpecTemplatePodSecurityContextWindowsOptions;

}

/**
 * The pod's affinity rules.
 *
 * @schema KafkaMirrorMaker2SpecTemplatePodAffinity
 */
export interface KafkaMirrorMaker2SpecTemplatePodAffinity {
  /**
   * @schema KafkaMirrorMaker2SpecTemplatePodAffinity#nodeAffinity
   */
  readonly nodeAffinity?: KafkaMirrorMaker2SpecTemplatePodAffinityNodeAffinity;

  /**
   * @schema KafkaMirrorMaker2SpecTemplatePodAffinity#podAffinity
   */
  readonly podAffinity?: KafkaMirrorMaker2SpecTemplatePodAffinityPodAffinity;

  /**
   * @schema KafkaMirrorMaker2SpecTemplatePodAffinity#podAntiAffinity
   */
  readonly podAntiAffinity?: KafkaMirrorMaker2SpecTemplatePodAffinityPodAntiAffinity;

}

/**
 * @schema KafkaMirrorMaker2SpecTemplatePodTolerations
 */
export interface KafkaMirrorMaker2SpecTemplatePodTolerations {
  /**
   * @schema KafkaMirrorMaker2SpecTemplatePodTolerations#effect
   */
  readonly effect?: string;

  /**
   * @schema KafkaMirrorMaker2SpecTemplatePodTolerations#key
   */
  readonly key?: string;

  /**
   * @schema KafkaMirrorMaker2SpecTemplatePodTolerations#operator
   */
  readonly operator?: string;

  /**
   * @schema KafkaMirrorMaker2SpecTemplatePodTolerations#tolerationSeconds
   */
  readonly tolerationSeconds?: number;

  /**
   * @schema KafkaMirrorMaker2SpecTemplatePodTolerations#value
   */
  readonly value?: string;

}

/**
 * Metadata applied to the resource.
 *
 * @schema KafkaMirrorMaker2SpecTemplateApiServiceMetadata
 */
export interface KafkaMirrorMaker2SpecTemplateApiServiceMetadata {
  /**
   * Labels added to the resource template. Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
   *
   * @schema KafkaMirrorMaker2SpecTemplateApiServiceMetadata#labels
   */
  readonly labels?: any;

  /**
   * Annotations added to the resource template. Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
   *
   * @schema KafkaMirrorMaker2SpecTemplateApiServiceMetadata#annotations
   */
  readonly annotations?: any;

}

/**
 * @schema KafkaMirrorMaker2SpecTemplateConnectContainerEnv
 */
export interface KafkaMirrorMaker2SpecTemplateConnectContainerEnv {
  /**
   * The environment variable key.
   *
   * @schema KafkaMirrorMaker2SpecTemplateConnectContainerEnv#name
   */
  readonly name?: string;

  /**
   * The environment variable value.
   *
   * @schema KafkaMirrorMaker2SpecTemplateConnectContainerEnv#value
   */
  readonly value?: string;

}

/**
 * Security context for the container.
 *
 * @schema KafkaMirrorMaker2SpecTemplateConnectContainerSecurityContext
 */
export interface KafkaMirrorMaker2SpecTemplateConnectContainerSecurityContext {
  /**
   * @schema KafkaMirrorMaker2SpecTemplateConnectContainerSecurityContext#allowPrivilegeEscalation
   */
  readonly allowPrivilegeEscalation?: boolean;

  /**
   * @schema KafkaMirrorMaker2SpecTemplateConnectContainerSecurityContext#capabilities
   */
  readonly capabilities?: KafkaMirrorMaker2SpecTemplateConnectContainerSecurityContextCapabilities;

  /**
   * @schema KafkaMirrorMaker2SpecTemplateConnectContainerSecurityContext#privileged
   */
  readonly privileged?: boolean;

  /**
   * @schema KafkaMirrorMaker2SpecTemplateConnectContainerSecurityContext#procMount
   */
  readonly procMount?: string;

  /**
   * @schema KafkaMirrorMaker2SpecTemplateConnectContainerSecurityContext#readOnlyRootFilesystem
   */
  readonly readOnlyRootFilesystem?: boolean;

  /**
   * @schema KafkaMirrorMaker2SpecTemplateConnectContainerSecurityContext#runAsGroup
   */
  readonly runAsGroup?: number;

  /**
   * @schema KafkaMirrorMaker2SpecTemplateConnectContainerSecurityContext#runAsNonRoot
   */
  readonly runAsNonRoot?: boolean;

  /**
   * @schema KafkaMirrorMaker2SpecTemplateConnectContainerSecurityContext#runAsUser
   */
  readonly runAsUser?: number;

  /**
   * @schema KafkaMirrorMaker2SpecTemplateConnectContainerSecurityContext#seLinuxOptions
   */
  readonly seLinuxOptions?: KafkaMirrorMaker2SpecTemplateConnectContainerSecurityContextSeLinuxOptions;

  /**
   * @schema KafkaMirrorMaker2SpecTemplateConnectContainerSecurityContext#windowsOptions
   */
  readonly windowsOptions?: KafkaMirrorMaker2SpecTemplateConnectContainerSecurityContextWindowsOptions;

}

/**
 * Metadata to apply to the `PodDistruptionBugetTemplate` resource.
 *
 * @schema KafkaMirrorMaker2SpecTemplatePodDisruptionBudgetMetadata
 */
export interface KafkaMirrorMaker2SpecTemplatePodDisruptionBudgetMetadata {
  /**
   * Labels added to the resource template. Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
   *
   * @schema KafkaMirrorMaker2SpecTemplatePodDisruptionBudgetMetadata#labels
   */
  readonly labels?: any;

  /**
   * Annotations added to the resource template. Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
   *
   * @schema KafkaMirrorMaker2SpecTemplatePodDisruptionBudgetMetadata#annotations
   */
  readonly annotations?: any;

}

/**
 * Value of the environment variable which will be passed to the Kafka Connect pods. It can be passed either as a reference to Secret or ConfigMap field. The field has to specify exactly one Secret or ConfigMap.
 *
 * @schema KafkaMirrorMaker2SpecExternalConfigurationEnvValueFrom
 */
export interface KafkaMirrorMaker2SpecExternalConfigurationEnvValueFrom {
  /**
   * Refernce to a key in a ConfigMap.
   *
   * @schema KafkaMirrorMaker2SpecExternalConfigurationEnvValueFrom#configMapKeyRef
   */
  readonly configMapKeyRef?: KafkaMirrorMaker2SpecExternalConfigurationEnvValueFromConfigMapKeyRef;

  /**
   * Reference to a key in a Secret.
   *
   * @schema KafkaMirrorMaker2SpecExternalConfigurationEnvValueFrom#secretKeyRef
   */
  readonly secretKeyRef?: KafkaMirrorMaker2SpecExternalConfigurationEnvValueFromSecretKeyRef;

}

/**
 * Reference to a key in a ConfigMap. Exactly one Secret or ConfigMap has to be specified.
 *
 * @schema KafkaMirrorMaker2SpecExternalConfigurationVolumesConfigMap
 */
export interface KafkaMirrorMaker2SpecExternalConfigurationVolumesConfigMap {
  /**
   * @schema KafkaMirrorMaker2SpecExternalConfigurationVolumesConfigMap#defaultMode
   */
  readonly defaultMode?: number;

  /**
   * @schema KafkaMirrorMaker2SpecExternalConfigurationVolumesConfigMap#items
   */
  readonly items?: KafkaMirrorMaker2SpecExternalConfigurationVolumesConfigMapItems[];

  /**
   * @schema KafkaMirrorMaker2SpecExternalConfigurationVolumesConfigMap#name
   */
  readonly name?: string;

  /**
   * @schema KafkaMirrorMaker2SpecExternalConfigurationVolumesConfigMap#optional
   */
  readonly optional?: boolean;

}

/**
 * Reference to a key in a Secret. Exactly one Secret or ConfigMap has to be specified.
 *
 * @schema KafkaMirrorMaker2SpecExternalConfigurationVolumesSecret
 */
export interface KafkaMirrorMaker2SpecExternalConfigurationVolumesSecret {
  /**
   * @schema KafkaMirrorMaker2SpecExternalConfigurationVolumesSecret#defaultMode
   */
  readonly defaultMode?: number;

  /**
   * @schema KafkaMirrorMaker2SpecExternalConfigurationVolumesSecret#items
   */
  readonly items?: KafkaMirrorMaker2SpecExternalConfigurationVolumesSecretItems[];

  /**
   * @schema KafkaMirrorMaker2SpecExternalConfigurationVolumesSecret#optional
   */
  readonly optional?: boolean;

  /**
   * @schema KafkaMirrorMaker2SpecExternalConfigurationVolumesSecret#secretName
   */
  readonly secretName?: string;

}

/**
 * @schema KafkaMirrorMaker2SpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference
 */
export interface KafkaMirrorMaker2SpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference {
  /**
   * @schema KafkaMirrorMaker2SpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference#matchExpressions
   */
  readonly matchExpressions?: KafkaMirrorMaker2SpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions[];

  /**
   * @schema KafkaMirrorMaker2SpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference#matchFields
   */
  readonly matchFields?: KafkaMirrorMaker2SpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields[];

}

/**
 * @schema KafkaMirrorMaker2SpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms
 */
export interface KafkaMirrorMaker2SpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms {
  /**
   * @schema KafkaMirrorMaker2SpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms#matchExpressions
   */
  readonly matchExpressions?: KafkaMirrorMaker2SpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions[];

  /**
   * @schema KafkaMirrorMaker2SpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms#matchFields
   */
  readonly matchFields?: KafkaMirrorMaker2SpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields[];

}

/**
 * @schema KafkaMirrorMaker2SpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm
 */
export interface KafkaMirrorMaker2SpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
  /**
   * @schema KafkaMirrorMaker2SpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm#labelSelector
   */
  readonly labelSelector?: KafkaMirrorMaker2SpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector;

  /**
   * @schema KafkaMirrorMaker2SpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm#namespaces
   */
  readonly namespaces?: string[];

  /**
   * @schema KafkaMirrorMaker2SpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm#topologyKey
   */
  readonly topologyKey?: string;

}

/**
 * @schema KafkaMirrorMaker2SpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector
 */
export interface KafkaMirrorMaker2SpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
  /**
   * @schema KafkaMirrorMaker2SpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector#matchExpressions
   */
  readonly matchExpressions?: KafkaMirrorMaker2SpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions[];

  /**
   * @schema KafkaMirrorMaker2SpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector#matchLabels
   */
  readonly matchLabels?: any;

}

/**
 * @schema KafkaMirrorMaker2SpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm
 */
export interface KafkaMirrorMaker2SpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
  /**
   * @schema KafkaMirrorMaker2SpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm#labelSelector
   */
  readonly labelSelector?: KafkaMirrorMaker2SpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector;

  /**
   * @schema KafkaMirrorMaker2SpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm#namespaces
   */
  readonly namespaces?: string[];

  /**
   * @schema KafkaMirrorMaker2SpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm#topologyKey
   */
  readonly topologyKey?: string;

}

/**
 * @schema KafkaMirrorMaker2SpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector
 */
export interface KafkaMirrorMaker2SpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
  /**
   * @schema KafkaMirrorMaker2SpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector#matchExpressions
   */
  readonly matchExpressions?: KafkaMirrorMaker2SpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions[];

  /**
   * @schema KafkaMirrorMaker2SpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector#matchLabels
   */
  readonly matchLabels?: any;

}

/**
 * @schema KafkaMirrorMaker2SpecTemplatePodSecurityContextSeLinuxOptions
 */
export interface KafkaMirrorMaker2SpecTemplatePodSecurityContextSeLinuxOptions {
  /**
   * @schema KafkaMirrorMaker2SpecTemplatePodSecurityContextSeLinuxOptions#level
   */
  readonly level?: string;

  /**
   * @schema KafkaMirrorMaker2SpecTemplatePodSecurityContextSeLinuxOptions#role
   */
  readonly role?: string;

  /**
   * @schema KafkaMirrorMaker2SpecTemplatePodSecurityContextSeLinuxOptions#type
   */
  readonly type?: string;

  /**
   * @schema KafkaMirrorMaker2SpecTemplatePodSecurityContextSeLinuxOptions#user
   */
  readonly user?: string;

}

/**
 * @schema KafkaMirrorMaker2SpecTemplatePodSecurityContextSysctls
 */
export interface KafkaMirrorMaker2SpecTemplatePodSecurityContextSysctls {
  /**
   * @schema KafkaMirrorMaker2SpecTemplatePodSecurityContextSysctls#name
   */
  readonly name?: string;

  /**
   * @schema KafkaMirrorMaker2SpecTemplatePodSecurityContextSysctls#value
   */
  readonly value?: string;

}

/**
 * @schema KafkaMirrorMaker2SpecTemplatePodSecurityContextWindowsOptions
 */
export interface KafkaMirrorMaker2SpecTemplatePodSecurityContextWindowsOptions {
  /**
   * @schema KafkaMirrorMaker2SpecTemplatePodSecurityContextWindowsOptions#gmsaCredentialSpec
   */
  readonly gmsaCredentialSpec?: string;

  /**
   * @schema KafkaMirrorMaker2SpecTemplatePodSecurityContextWindowsOptions#gmsaCredentialSpecName
   */
  readonly gmsaCredentialSpecName?: string;

}

/**
 * @schema KafkaMirrorMaker2SpecTemplatePodAffinityNodeAffinity
 */
export interface KafkaMirrorMaker2SpecTemplatePodAffinityNodeAffinity {
  /**
   * @schema KafkaMirrorMaker2SpecTemplatePodAffinityNodeAffinity#preferredDuringSchedulingIgnoredDuringExecution
   */
  readonly preferredDuringSchedulingIgnoredDuringExecution?: KafkaMirrorMaker2SpecTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution[];

  /**
   * @schema KafkaMirrorMaker2SpecTemplatePodAffinityNodeAffinity#requiredDuringSchedulingIgnoredDuringExecution
   */
  readonly requiredDuringSchedulingIgnoredDuringExecution?: KafkaMirrorMaker2SpecTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution;

}

/**
 * @schema KafkaMirrorMaker2SpecTemplatePodAffinityPodAffinity
 */
export interface KafkaMirrorMaker2SpecTemplatePodAffinityPodAffinity {
  /**
   * @schema KafkaMirrorMaker2SpecTemplatePodAffinityPodAffinity#preferredDuringSchedulingIgnoredDuringExecution
   */
  readonly preferredDuringSchedulingIgnoredDuringExecution?: KafkaMirrorMaker2SpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution[];

  /**
   * @schema KafkaMirrorMaker2SpecTemplatePodAffinityPodAffinity#requiredDuringSchedulingIgnoredDuringExecution
   */
  readonly requiredDuringSchedulingIgnoredDuringExecution?: KafkaMirrorMaker2SpecTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution[];

}

/**
 * @schema KafkaMirrorMaker2SpecTemplatePodAffinityPodAntiAffinity
 */
export interface KafkaMirrorMaker2SpecTemplatePodAffinityPodAntiAffinity {
  /**
   * @schema KafkaMirrorMaker2SpecTemplatePodAffinityPodAntiAffinity#preferredDuringSchedulingIgnoredDuringExecution
   */
  readonly preferredDuringSchedulingIgnoredDuringExecution?: KafkaMirrorMaker2SpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution[];

  /**
   * @schema KafkaMirrorMaker2SpecTemplatePodAffinityPodAntiAffinity#requiredDuringSchedulingIgnoredDuringExecution
   */
  readonly requiredDuringSchedulingIgnoredDuringExecution?: KafkaMirrorMaker2SpecTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution[];

}

/**
 * @schema KafkaMirrorMaker2SpecTemplateConnectContainerSecurityContextCapabilities
 */
export interface KafkaMirrorMaker2SpecTemplateConnectContainerSecurityContextCapabilities {
  /**
   * @schema KafkaMirrorMaker2SpecTemplateConnectContainerSecurityContextCapabilities#add
   */
  readonly add?: string[];

  /**
   * @schema KafkaMirrorMaker2SpecTemplateConnectContainerSecurityContextCapabilities#drop
   */
  readonly drop?: string[];

}

/**
 * @schema KafkaMirrorMaker2SpecTemplateConnectContainerSecurityContextSeLinuxOptions
 */
export interface KafkaMirrorMaker2SpecTemplateConnectContainerSecurityContextSeLinuxOptions {
  /**
   * @schema KafkaMirrorMaker2SpecTemplateConnectContainerSecurityContextSeLinuxOptions#level
   */
  readonly level?: string;

  /**
   * @schema KafkaMirrorMaker2SpecTemplateConnectContainerSecurityContextSeLinuxOptions#role
   */
  readonly role?: string;

  /**
   * @schema KafkaMirrorMaker2SpecTemplateConnectContainerSecurityContextSeLinuxOptions#type
   */
  readonly type?: string;

  /**
   * @schema KafkaMirrorMaker2SpecTemplateConnectContainerSecurityContextSeLinuxOptions#user
   */
  readonly user?: string;

}

/**
 * @schema KafkaMirrorMaker2SpecTemplateConnectContainerSecurityContextWindowsOptions
 */
export interface KafkaMirrorMaker2SpecTemplateConnectContainerSecurityContextWindowsOptions {
  /**
   * @schema KafkaMirrorMaker2SpecTemplateConnectContainerSecurityContextWindowsOptions#gmsaCredentialSpec
   */
  readonly gmsaCredentialSpec?: string;

  /**
   * @schema KafkaMirrorMaker2SpecTemplateConnectContainerSecurityContextWindowsOptions#gmsaCredentialSpecName
   */
  readonly gmsaCredentialSpecName?: string;

}

/**
 * Refernce to a key in a ConfigMap.
 *
 * @schema KafkaMirrorMaker2SpecExternalConfigurationEnvValueFromConfigMapKeyRef
 */
export interface KafkaMirrorMaker2SpecExternalConfigurationEnvValueFromConfigMapKeyRef {
  /**
   * @schema KafkaMirrorMaker2SpecExternalConfigurationEnvValueFromConfigMapKeyRef#key
   */
  readonly key?: string;

  /**
   * @schema KafkaMirrorMaker2SpecExternalConfigurationEnvValueFromConfigMapKeyRef#name
   */
  readonly name?: string;

  /**
   * @schema KafkaMirrorMaker2SpecExternalConfigurationEnvValueFromConfigMapKeyRef#optional
   */
  readonly optional?: boolean;

}

/**
 * Reference to a key in a Secret.
 *
 * @schema KafkaMirrorMaker2SpecExternalConfigurationEnvValueFromSecretKeyRef
 */
export interface KafkaMirrorMaker2SpecExternalConfigurationEnvValueFromSecretKeyRef {
  /**
   * @schema KafkaMirrorMaker2SpecExternalConfigurationEnvValueFromSecretKeyRef#key
   */
  readonly key?: string;

  /**
   * @schema KafkaMirrorMaker2SpecExternalConfigurationEnvValueFromSecretKeyRef#name
   */
  readonly name?: string;

  /**
   * @schema KafkaMirrorMaker2SpecExternalConfigurationEnvValueFromSecretKeyRef#optional
   */
  readonly optional?: boolean;

}

/**
 * @schema KafkaMirrorMaker2SpecExternalConfigurationVolumesConfigMapItems
 */
export interface KafkaMirrorMaker2SpecExternalConfigurationVolumesConfigMapItems {
  /**
   * @schema KafkaMirrorMaker2SpecExternalConfigurationVolumesConfigMapItems#key
   */
  readonly key?: string;

  /**
   * @schema KafkaMirrorMaker2SpecExternalConfigurationVolumesConfigMapItems#mode
   */
  readonly mode?: number;

  /**
   * @schema KafkaMirrorMaker2SpecExternalConfigurationVolumesConfigMapItems#path
   */
  readonly path?: string;

}

/**
 * @schema KafkaMirrorMaker2SpecExternalConfigurationVolumesSecretItems
 */
export interface KafkaMirrorMaker2SpecExternalConfigurationVolumesSecretItems {
  /**
   * @schema KafkaMirrorMaker2SpecExternalConfigurationVolumesSecretItems#key
   */
  readonly key?: string;

  /**
   * @schema KafkaMirrorMaker2SpecExternalConfigurationVolumesSecretItems#mode
   */
  readonly mode?: number;

  /**
   * @schema KafkaMirrorMaker2SpecExternalConfigurationVolumesSecretItems#path
   */
  readonly path?: string;

}

/**
 * @schema KafkaMirrorMaker2SpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions
 */
export interface KafkaMirrorMaker2SpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions {
  /**
   * @schema KafkaMirrorMaker2SpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions#key
   */
  readonly key?: string;

  /**
   * @schema KafkaMirrorMaker2SpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions#operator
   */
  readonly operator?: string;

  /**
   * @schema KafkaMirrorMaker2SpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions#values
   */
  readonly values?: string[];

}

/**
 * @schema KafkaMirrorMaker2SpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields
 */
export interface KafkaMirrorMaker2SpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields {
  /**
   * @schema KafkaMirrorMaker2SpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields#key
   */
  readonly key?: string;

  /**
   * @schema KafkaMirrorMaker2SpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields#operator
   */
  readonly operator?: string;

  /**
   * @schema KafkaMirrorMaker2SpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields#values
   */
  readonly values?: string[];

}

/**
 * @schema KafkaMirrorMaker2SpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions
 */
export interface KafkaMirrorMaker2SpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions {
  /**
   * @schema KafkaMirrorMaker2SpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions#key
   */
  readonly key?: string;

  /**
   * @schema KafkaMirrorMaker2SpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions#operator
   */
  readonly operator?: string;

  /**
   * @schema KafkaMirrorMaker2SpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions#values
   */
  readonly values?: string[];

}

/**
 * @schema KafkaMirrorMaker2SpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields
 */
export interface KafkaMirrorMaker2SpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields {
  /**
   * @schema KafkaMirrorMaker2SpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields#key
   */
  readonly key?: string;

  /**
   * @schema KafkaMirrorMaker2SpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields#operator
   */
  readonly operator?: string;

  /**
   * @schema KafkaMirrorMaker2SpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields#values
   */
  readonly values?: string[];

}

/**
 * @schema KafkaMirrorMaker2SpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector
 */
export interface KafkaMirrorMaker2SpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
  /**
   * @schema KafkaMirrorMaker2SpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector#matchExpressions
   */
  readonly matchExpressions?: KafkaMirrorMaker2SpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions[];

  /**
   * @schema KafkaMirrorMaker2SpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector#matchLabels
   */
  readonly matchLabels?: any;

}

/**
 * @schema KafkaMirrorMaker2SpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions
 */
export interface KafkaMirrorMaker2SpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
  /**
   * @schema KafkaMirrorMaker2SpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions#key
   */
  readonly key?: string;

  /**
   * @schema KafkaMirrorMaker2SpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions#operator
   */
  readonly operator?: string;

  /**
   * @schema KafkaMirrorMaker2SpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions#values
   */
  readonly values?: string[];

}

/**
 * @schema KafkaMirrorMaker2SpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector
 */
export interface KafkaMirrorMaker2SpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
  /**
   * @schema KafkaMirrorMaker2SpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector#matchExpressions
   */
  readonly matchExpressions?: KafkaMirrorMaker2SpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions[];

  /**
   * @schema KafkaMirrorMaker2SpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector#matchLabels
   */
  readonly matchLabels?: any;

}

/**
 * @schema KafkaMirrorMaker2SpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions
 */
export interface KafkaMirrorMaker2SpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
  /**
   * @schema KafkaMirrorMaker2SpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions#key
   */
  readonly key?: string;

  /**
   * @schema KafkaMirrorMaker2SpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions#operator
   */
  readonly operator?: string;

  /**
   * @schema KafkaMirrorMaker2SpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions#values
   */
  readonly values?: string[];

}

/**
 * @schema KafkaMirrorMaker2SpecTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution
 */
export interface KafkaMirrorMaker2SpecTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution {
  /**
   * @schema KafkaMirrorMaker2SpecTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution#preference
   */
  readonly preference?: KafkaMirrorMaker2SpecTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference;

  /**
   * @schema KafkaMirrorMaker2SpecTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution#weight
   */
  readonly weight?: number;

}

/**
 * @schema KafkaMirrorMaker2SpecTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution
 */
export interface KafkaMirrorMaker2SpecTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution {
  /**
   * @schema KafkaMirrorMaker2SpecTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution#nodeSelectorTerms
   */
  readonly nodeSelectorTerms?: KafkaMirrorMaker2SpecTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms[];

}

/**
 * @schema KafkaMirrorMaker2SpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution
 */
export interface KafkaMirrorMaker2SpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution {
  /**
   * @schema KafkaMirrorMaker2SpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution#podAffinityTerm
   */
  readonly podAffinityTerm?: KafkaMirrorMaker2SpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm;

  /**
   * @schema KafkaMirrorMaker2SpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution#weight
   */
  readonly weight?: number;

}

/**
 * @schema KafkaMirrorMaker2SpecTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution
 */
export interface KafkaMirrorMaker2SpecTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution {
  /**
   * @schema KafkaMirrorMaker2SpecTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution#labelSelector
   */
  readonly labelSelector?: KafkaMirrorMaker2SpecTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector;

  /**
   * @schema KafkaMirrorMaker2SpecTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution#namespaces
   */
  readonly namespaces?: string[];

  /**
   * @schema KafkaMirrorMaker2SpecTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution#topologyKey
   */
  readonly topologyKey?: string;

}

/**
 * @schema KafkaMirrorMaker2SpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution
 */
export interface KafkaMirrorMaker2SpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution {
  /**
   * @schema KafkaMirrorMaker2SpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution#podAffinityTerm
   */
  readonly podAffinityTerm?: KafkaMirrorMaker2SpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm;

  /**
   * @schema KafkaMirrorMaker2SpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution#weight
   */
  readonly weight?: number;

}

/**
 * @schema KafkaMirrorMaker2SpecTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution
 */
export interface KafkaMirrorMaker2SpecTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution {
  /**
   * @schema KafkaMirrorMaker2SpecTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution#labelSelector
   */
  readonly labelSelector?: KafkaMirrorMaker2SpecTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector;

  /**
   * @schema KafkaMirrorMaker2SpecTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution#namespaces
   */
  readonly namespaces?: string[];

  /**
   * @schema KafkaMirrorMaker2SpecTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution#topologyKey
   */
  readonly topologyKey?: string;

}

/**
 * @schema KafkaMirrorMaker2SpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions
 */
export interface KafkaMirrorMaker2SpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
  /**
   * @schema KafkaMirrorMaker2SpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions#key
   */
  readonly key?: string;

  /**
   * @schema KafkaMirrorMaker2SpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions#operator
   */
  readonly operator?: string;

  /**
   * @schema KafkaMirrorMaker2SpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions#values
   */
  readonly values?: string[];

}

/**
 * @schema KafkaMirrorMaker2SpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions
 */
export interface KafkaMirrorMaker2SpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
  /**
   * @schema KafkaMirrorMaker2SpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions#key
   */
  readonly key?: string;

  /**
   * @schema KafkaMirrorMaker2SpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions#operator
   */
  readonly operator?: string;

  /**
   * @schema KafkaMirrorMaker2SpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions#values
   */
  readonly values?: string[];

}

/**
 * @schema KafkaMirrorMaker2SpecTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference
 */
export interface KafkaMirrorMaker2SpecTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference {
  /**
   * @schema KafkaMirrorMaker2SpecTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference#matchExpressions
   */
  readonly matchExpressions?: KafkaMirrorMaker2SpecTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions[];

  /**
   * @schema KafkaMirrorMaker2SpecTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference#matchFields
   */
  readonly matchFields?: KafkaMirrorMaker2SpecTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields[];

}

/**
 * @schema KafkaMirrorMaker2SpecTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms
 */
export interface KafkaMirrorMaker2SpecTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms {
  /**
   * @schema KafkaMirrorMaker2SpecTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms#matchExpressions
   */
  readonly matchExpressions?: KafkaMirrorMaker2SpecTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions[];

  /**
   * @schema KafkaMirrorMaker2SpecTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms#matchFields
   */
  readonly matchFields?: KafkaMirrorMaker2SpecTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields[];

}

/**
 * @schema KafkaMirrorMaker2SpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm
 */
export interface KafkaMirrorMaker2SpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
  /**
   * @schema KafkaMirrorMaker2SpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm#labelSelector
   */
  readonly labelSelector?: KafkaMirrorMaker2SpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector;

  /**
   * @schema KafkaMirrorMaker2SpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm#namespaces
   */
  readonly namespaces?: string[];

  /**
   * @schema KafkaMirrorMaker2SpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm#topologyKey
   */
  readonly topologyKey?: string;

}

/**
 * @schema KafkaMirrorMaker2SpecTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector
 */
export interface KafkaMirrorMaker2SpecTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
  /**
   * @schema KafkaMirrorMaker2SpecTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector#matchExpressions
   */
  readonly matchExpressions?: KafkaMirrorMaker2SpecTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions[];

  /**
   * @schema KafkaMirrorMaker2SpecTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector#matchLabels
   */
  readonly matchLabels?: any;

}

/**
 * @schema KafkaMirrorMaker2SpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm
 */
export interface KafkaMirrorMaker2SpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
  /**
   * @schema KafkaMirrorMaker2SpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm#labelSelector
   */
  readonly labelSelector?: KafkaMirrorMaker2SpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector;

  /**
   * @schema KafkaMirrorMaker2SpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm#namespaces
   */
  readonly namespaces?: string[];

  /**
   * @schema KafkaMirrorMaker2SpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm#topologyKey
   */
  readonly topologyKey?: string;

}

/**
 * @schema KafkaMirrorMaker2SpecTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector
 */
export interface KafkaMirrorMaker2SpecTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
  /**
   * @schema KafkaMirrorMaker2SpecTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector#matchExpressions
   */
  readonly matchExpressions?: KafkaMirrorMaker2SpecTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions[];

  /**
   * @schema KafkaMirrorMaker2SpecTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector#matchLabels
   */
  readonly matchLabels?: any;

}

/**
 * @schema KafkaMirrorMaker2SpecTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions
 */
export interface KafkaMirrorMaker2SpecTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions {
  /**
   * @schema KafkaMirrorMaker2SpecTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions#key
   */
  readonly key?: string;

  /**
   * @schema KafkaMirrorMaker2SpecTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions#operator
   */
  readonly operator?: string;

  /**
   * @schema KafkaMirrorMaker2SpecTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions#values
   */
  readonly values?: string[];

}

/**
 * @schema KafkaMirrorMaker2SpecTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields
 */
export interface KafkaMirrorMaker2SpecTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields {
  /**
   * @schema KafkaMirrorMaker2SpecTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields#key
   */
  readonly key?: string;

  /**
   * @schema KafkaMirrorMaker2SpecTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields#operator
   */
  readonly operator?: string;

  /**
   * @schema KafkaMirrorMaker2SpecTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields#values
   */
  readonly values?: string[];

}

/**
 * @schema KafkaMirrorMaker2SpecTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions
 */
export interface KafkaMirrorMaker2SpecTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions {
  /**
   * @schema KafkaMirrorMaker2SpecTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions#key
   */
  readonly key?: string;

  /**
   * @schema KafkaMirrorMaker2SpecTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions#operator
   */
  readonly operator?: string;

  /**
   * @schema KafkaMirrorMaker2SpecTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions#values
   */
  readonly values?: string[];

}

/**
 * @schema KafkaMirrorMaker2SpecTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields
 */
export interface KafkaMirrorMaker2SpecTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields {
  /**
   * @schema KafkaMirrorMaker2SpecTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields#key
   */
  readonly key?: string;

  /**
   * @schema KafkaMirrorMaker2SpecTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields#operator
   */
  readonly operator?: string;

  /**
   * @schema KafkaMirrorMaker2SpecTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields#values
   */
  readonly values?: string[];

}

/**
 * @schema KafkaMirrorMaker2SpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector
 */
export interface KafkaMirrorMaker2SpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
  /**
   * @schema KafkaMirrorMaker2SpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector#matchExpressions
   */
  readonly matchExpressions?: KafkaMirrorMaker2SpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions[];

  /**
   * @schema KafkaMirrorMaker2SpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector#matchLabels
   */
  readonly matchLabels?: any;

}

/**
 * @schema KafkaMirrorMaker2SpecTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions
 */
export interface KafkaMirrorMaker2SpecTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
  /**
   * @schema KafkaMirrorMaker2SpecTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions#key
   */
  readonly key?: string;

  /**
   * @schema KafkaMirrorMaker2SpecTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions#operator
   */
  readonly operator?: string;

  /**
   * @schema KafkaMirrorMaker2SpecTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions#values
   */
  readonly values?: string[];

}

/**
 * @schema KafkaMirrorMaker2SpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector
 */
export interface KafkaMirrorMaker2SpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
  /**
   * @schema KafkaMirrorMaker2SpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector#matchExpressions
   */
  readonly matchExpressions?: KafkaMirrorMaker2SpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions[];

  /**
   * @schema KafkaMirrorMaker2SpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector#matchLabels
   */
  readonly matchLabels?: any;

}

/**
 * @schema KafkaMirrorMaker2SpecTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions
 */
export interface KafkaMirrorMaker2SpecTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
  /**
   * @schema KafkaMirrorMaker2SpecTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions#key
   */
  readonly key?: string;

  /**
   * @schema KafkaMirrorMaker2SpecTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions#operator
   */
  readonly operator?: string;

  /**
   * @schema KafkaMirrorMaker2SpecTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions#values
   */
  readonly values?: string[];

}

/**
 * @schema KafkaMirrorMaker2SpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions
 */
export interface KafkaMirrorMaker2SpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
  /**
   * @schema KafkaMirrorMaker2SpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions#key
   */
  readonly key?: string;

  /**
   * @schema KafkaMirrorMaker2SpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions#operator
   */
  readonly operator?: string;

  /**
   * @schema KafkaMirrorMaker2SpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions#values
   */
  readonly values?: string[];

}

/**
 * @schema KafkaMirrorMaker2SpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions
 */
export interface KafkaMirrorMaker2SpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
  /**
   * @schema KafkaMirrorMaker2SpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions#key
   */
  readonly key?: string;

  /**
   * @schema KafkaMirrorMaker2SpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions#operator
   */
  readonly operator?: string;

  /**
   * @schema KafkaMirrorMaker2SpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions#values
   */
  readonly values?: string[];

}

