// generated by cdk8s
import { ApiObject } from 'cdk8s';
import { Construct } from 'constructs';

/**
 * 
 *
 * @schema KafkaRebalance
 */
export class KafkaRebalance extends ApiObject {
  /**
   * Defines a "KafkaRebalance" API object
   * @param scope the scope in which to define this object
   * @param name a scope-local name for the object
   * @param options configuration options
   */
  public constructor(scope: Construct, name: string, options: KafkaRebalanceOptions = {}) {
    super(scope, name, {
      ...options,
      kind: 'KafkaRebalance',
      apiVersion: 'kafka.strimzi.io/v1alpha1',
    });
  }
}

/**
 * @schema KafkaRebalance
 */
export interface KafkaRebalanceOptions {
  /**
   * The specification of the Kafka rebalance.
   *
   * @schema KafkaRebalance#spec
   */
  readonly spec?: KafkaRebalanceSpec;

}

/**
 * The specification of the Kafka rebalance.
 *
 * @schema KafkaRebalanceSpec
 */
export interface KafkaRebalanceSpec {
  /**
   * A list of goals, ordered by decreasing priority, to use for generating and executing the rebalance proposal. The supported goals are available at https://github.com/linkedin/cruise-control#goals. If an empty goals list is provided, the goals declared in the default.goals Cruise Control configuration parameter are used.
   *
   * @schema KafkaRebalanceSpec#goals
   */
  readonly goals?: string[];

  /**
   * Whether to allow the hard goals specified in the Kafka CR to be skipped in optimization proposal generation. This can be useful when some of those hard goals are preventing a balance solution being found. Default is false.
   *
   * @default false.
   * @schema KafkaRebalanceSpec#skipHardGoalCheck
   */
  readonly skipHardGoalCheck?: boolean;

  /**
   * A regular expression where any matching topics will be excluded from the calculation of optimization proposals. This expression will be parsed by the java.util.regex.Pattern class; for more information on the supported formar consult the documentation for that class.
   *
   * @schema KafkaRebalanceSpec#excludedTopics
   */
  readonly excludedTopics?: string;

  /**
   * The upper bound of ongoing partition replica movements going into/out of each broker. Default is 5.
   *
   * @default 5.
   * @schema KafkaRebalanceSpec#concurrentPartitionMovementsPerBroker
   */
  readonly concurrentPartitionMovementsPerBroker?: number;

  /**
   * The upper bound of ongoing partition replica movements between disks within each broker. Default is 2.
   *
   * @default 2.
   * @schema KafkaRebalanceSpec#concurrentIntraBrokerPartitionMovements
   */
  readonly concurrentIntraBrokerPartitionMovements?: number;

  /**
   * The upper bound of ongoing partition leadership movements. Default is 1000.
   *
   * @default 1000.
   * @schema KafkaRebalanceSpec#concurrentLeaderMovements
   */
  readonly concurrentLeaderMovements?: number;

  /**
   * The upper bound, in bytes per second, on the bandwidth used to move replicas. There is no limit by default.
   *
   * @schema KafkaRebalanceSpec#replicationThrottle
   */
  readonly replicationThrottle?: number;

}

