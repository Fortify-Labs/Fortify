/* 83a3854d2e1f9f8fc992af7d1a2f1d2163aa27ba
 * This file is automatically generated by graphql-let. */

import { GraphQLResolveInfo, GraphQLScalarType, GraphQLScalarTypeConfig } from 'graphql';
export declare type Maybe<T> = T | null;
export declare type Exact<T extends {
    [key: string]: any;
}> = {
    [K in keyof T]: T[K];
};
export declare type RequireFields<T, K extends keyof T> = {
    [X in Exclude<keyof T, K>]?: T[X];
} & {
    [P in K]-?: NonNullable<T[P]>;
};
/** All built-in and custom scalars, mapped to their actual values */
export declare type Scalars = {
    ID: string;
    String: string;
    Boolean: boolean;
    Int: number;
    Float: number;
    /**
     * Custom scalar type for date.
     * A unix timestamp served as string.
     */
    Date: any;
};
export declare type Query = {
    __typename?: 'Query';
    /** Returns the current package.json version */
    version: Scalars['String'];
    /** Returns the current context */
    context: Scalars['String'];
    profile?: Maybe<UserProfile>;
    currentMatches?: Maybe<Array<Maybe<Match>>>;
    lobby?: Maybe<Lobby>;
};
export declare type QueryProfileArgs = {
    steamid?: Maybe<Scalars['ID']>;
};
export declare type QueryCurrentMatchesArgs = {
    limit?: Maybe<Scalars['Int']>;
    offset?: Maybe<Scalars['Int']>;
};
export declare type QueryLobbyArgs = {
    id?: Maybe<Scalars['ID']>;
};
export declare type Mutation = {
    __typename?: 'Mutation';
    /** Used as placeholder as empty types aren't currently supported. Also fires and event to the _base_ subscription. */
    _base_: Scalars['String'];
    addUser: Scalars['String'];
    removeUser: Scalars['Boolean'];
};
export declare type MutationAddUserArgs = {
    user: UserInput;
};
export declare type MutationRemoveUserArgs = {
    steamid: Scalars['String'];
};
export declare type Subscription = {
    __typename?: 'Subscription';
    /** Used as placeholder as empty types aren't currently supported. */
    _base_: Scalars['String'];
    lobby?: Maybe<Lobby>;
};
export declare type SubscriptionLobbyArgs = {
    id?: Maybe<Scalars['ID']>;
};
export declare type UserInput = {
    steamid: Scalars['String'];
    name: Scalars['String'];
    twitchName: Scalars['String'];
};
export declare type UserProfile = {
    __typename?: 'UserProfile';
    steamid: Scalars['ID'];
    name?: Maybe<Scalars['String']>;
    profilePicture?: Maybe<Scalars['String']>;
    mmr?: Maybe<Scalars['Int']>;
    leaderboardRank?: Maybe<Scalars['Int']>;
    rank?: Maybe<Scalars['String']>;
    twitchName?: Maybe<Scalars['String']>;
    discordName?: Maybe<Scalars['String']>;
    matches?: Maybe<Array<Maybe<MatchSlot>>>;
    mmrHistory?: Maybe<Array<Maybe<MmrHistory>>>;
};
export declare type UserProfileMatchesArgs = {
    limit?: Maybe<Scalars['Int']>;
    offset?: Maybe<Scalars['Int']>;
};
export declare type UserProfileMmrHistoryArgs = {
    startDate?: Maybe<Scalars['Date']>;
    endDate?: Maybe<Scalars['Date']>;
    duration?: Maybe<Scalars['Int']>;
};
export declare type MmrHistory = {
    __typename?: 'MMRHistory';
    date?: Maybe<Scalars['Date']>;
    mmr?: Maybe<Scalars['Int']>;
    rank?: Maybe<Scalars['Int']>;
};
export declare type Match = {
    __typename?: 'Match';
    id: Scalars['ID'];
    averageMMR?: Maybe<Scalars['Int']>;
    duration?: Maybe<Scalars['String']>;
    slots?: Maybe<Array<Maybe<MatchSlot>>>;
};
export declare type MatchSlot = {
    __typename?: 'MatchSlot';
    /** Format: matchid#slot */
    matchSlotID: Scalars['ID'];
    slot: Scalars['Int'];
    finalPlace: Scalars['Int'];
    duration?: Maybe<Scalars['String']>;
    match?: Maybe<Match>;
    /** If no user profile is returned, matchPlayer will be populated instead */
    user?: Maybe<UserProfile>;
    matchPlayer?: Maybe<MatchPlayer>;
};
export declare type MatchPlayer = {
    __typename?: 'MatchPlayer';
    steamid: Scalars['ID'];
};
export declare type Lobby = {
    __typename?: 'Lobby';
    id: Scalars['ID'];
    averageMMR?: Maybe<Scalars['Int']>;
    duration?: Maybe<Scalars['String']>;
    slots?: Maybe<Array<Maybe<LobbySlot>>>;
    /** Stringified pool snapshot */
    pool?: Maybe<Scalars['String']>;
};
export declare type LobbySlot = {
    __typename?: 'LobbySlot';
    lobbySlotId: Scalars['ID'];
    slot?: Maybe<Scalars['Int']>;
    /** If no user profile is returned, matchPlayer will be populated instead */
    user?: Maybe<UserProfile>;
    matchPlayer?: Maybe<MatchPlayer>;
};
export declare enum Scope {
    Admin = "ADMIN",
    User = "USER",
    GsiIngress = "GSI_INGRESS",
    Unknown = "UNKNOWN"
}
export declare type ResolverTypeWrapper<T> = Promise<T> | T;
export declare type LegacyStitchingResolver<TResult, TParent, TContext, TArgs> = {
    fragment: string;
    resolve: ResolverFn<TResult, TParent, TContext, TArgs>;
};
export declare type NewStitchingResolver<TResult, TParent, TContext, TArgs> = {
    selectionSet: string;
    resolve: ResolverFn<TResult, TParent, TContext, TArgs>;
};
export declare type StitchingResolver<TResult, TParent, TContext, TArgs> = LegacyStitchingResolver<TResult, TParent, TContext, TArgs> | NewStitchingResolver<TResult, TParent, TContext, TArgs>;
export declare type Resolver<TResult, TParent = {}, TContext = {}, TArgs = {}> = ResolverFn<TResult, TParent, TContext, TArgs> | StitchingResolver<TResult, TParent, TContext, TArgs>;
export declare type ResolverFn<TResult, TParent, TContext, TArgs> = (parent: TParent, args: TArgs, context: TContext, info: GraphQLResolveInfo) => Promise<TResult> | TResult;
export declare type SubscriptionSubscribeFn<TResult, TParent, TContext, TArgs> = (parent: TParent, args: TArgs, context: TContext, info: GraphQLResolveInfo) => AsyncIterator<TResult> | Promise<AsyncIterator<TResult>>;
export declare type SubscriptionResolveFn<TResult, TParent, TContext, TArgs> = (parent: TParent, args: TArgs, context: TContext, info: GraphQLResolveInfo) => TResult | Promise<TResult>;
export interface SubscriptionSubscriberObject<TResult, TKey extends string, TParent, TContext, TArgs> {
    subscribe: SubscriptionSubscribeFn<{
        [key in TKey]: TResult;
    }, TParent, TContext, TArgs>;
    resolve?: SubscriptionResolveFn<TResult, {
        [key in TKey]: TResult;
    }, TContext, TArgs>;
}
export interface SubscriptionResolverObject<TResult, TParent, TContext, TArgs> {
    subscribe: SubscriptionSubscribeFn<any, TParent, TContext, TArgs>;
    resolve: SubscriptionResolveFn<TResult, any, TContext, TArgs>;
}
export declare type SubscriptionObject<TResult, TKey extends string, TParent, TContext, TArgs> = SubscriptionSubscriberObject<TResult, TKey, TParent, TContext, TArgs> | SubscriptionResolverObject<TResult, TParent, TContext, TArgs>;
export declare type SubscriptionResolver<TResult, TKey extends string, TParent = {}, TContext = {}, TArgs = {}> = ((...args: any[]) => SubscriptionObject<TResult, TKey, TParent, TContext, TArgs>) | SubscriptionObject<TResult, TKey, TParent, TContext, TArgs>;
export declare type TypeResolveFn<TTypes, TParent = {}, TContext = {}> = (parent: TParent, context: TContext, info: GraphQLResolveInfo) => Maybe<TTypes> | Promise<Maybe<TTypes>>;
export declare type IsTypeOfResolverFn<T = {}> = (obj: T, info: GraphQLResolveInfo) => boolean | Promise<boolean>;
export declare type NextResolverFn<T> = () => Promise<T>;
export declare type DirectiveResolverFn<TResult = {}, TParent = {}, TContext = {}, TArgs = {}> = (next: NextResolverFn<TResult>, parent: TParent, args: TArgs, context: TContext, info: GraphQLResolveInfo) => TResult | Promise<TResult>;
/** Mapping between all available schema types and the resolvers types */
export declare type ResolversTypes = {
    Query: ResolverTypeWrapper<{}>;
    String: ResolverTypeWrapper<Scalars['String']>;
    ID: ResolverTypeWrapper<Scalars['ID']>;
    Int: ResolverTypeWrapper<Scalars['Int']>;
    Mutation: ResolverTypeWrapper<{}>;
    Boolean: ResolverTypeWrapper<Scalars['Boolean']>;
    Subscription: ResolverTypeWrapper<{}>;
    Date: ResolverTypeWrapper<Scalars['Date']>;
    UserInput: UserInput;
    UserProfile: ResolverTypeWrapper<UserProfile>;
    MMRHistory: ResolverTypeWrapper<MmrHistory>;
    Match: ResolverTypeWrapper<Match>;
    MatchSlot: ResolverTypeWrapper<MatchSlot>;
    MatchPlayer: ResolverTypeWrapper<MatchPlayer>;
    Lobby: ResolverTypeWrapper<Lobby>;
    LobbySlot: ResolverTypeWrapper<LobbySlot>;
    SCOPE: Scope;
};
/** Mapping between all available schema types and the resolvers parents */
export declare type ResolversParentTypes = {
    Query: {};
    String: Scalars['String'];
    ID: Scalars['ID'];
    Int: Scalars['Int'];
    Mutation: {};
    Boolean: Scalars['Boolean'];
    Subscription: {};
    Date: Scalars['Date'];
    UserInput: UserInput;
    UserProfile: UserProfile;
    MMRHistory: MmrHistory;
    Match: Match;
    MatchSlot: MatchSlot;
    MatchPlayer: MatchPlayer;
    Lobby: Lobby;
    LobbySlot: LobbySlot;
};
export declare type QueryResolvers<ContextType = any, ParentType extends ResolversParentTypes['Query'] = ResolversParentTypes['Query']> = {
    version?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    context?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    profile?: Resolver<Maybe<ResolversTypes['UserProfile']>, ParentType, ContextType, RequireFields<QueryProfileArgs, never>>;
    currentMatches?: Resolver<Maybe<Array<Maybe<ResolversTypes['Match']>>>, ParentType, ContextType, RequireFields<QueryCurrentMatchesArgs, never>>;
    lobby?: Resolver<Maybe<ResolversTypes['Lobby']>, ParentType, ContextType, RequireFields<QueryLobbyArgs, never>>;
};
export declare type MutationResolvers<ContextType = any, ParentType extends ResolversParentTypes['Mutation'] = ResolversParentTypes['Mutation']> = {
    _base_?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    addUser?: Resolver<ResolversTypes['String'], ParentType, ContextType, RequireFields<MutationAddUserArgs, 'user'>>;
    removeUser?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType, RequireFields<MutationRemoveUserArgs, 'steamid'>>;
};
export declare type SubscriptionResolvers<ContextType = any, ParentType extends ResolversParentTypes['Subscription'] = ResolversParentTypes['Subscription']> = {
    _base_?: SubscriptionResolver<ResolversTypes['String'], "_base_", ParentType, ContextType>;
    lobby?: SubscriptionResolver<Maybe<ResolversTypes['Lobby']>, "lobby", ParentType, ContextType, RequireFields<SubscriptionLobbyArgs, never>>;
};
export interface DateScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['Date'], any> {
    name: 'Date';
}
export declare type UserProfileResolvers<ContextType = any, ParentType extends ResolversParentTypes['UserProfile'] = ResolversParentTypes['UserProfile']> = {
    steamid?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
    name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    profilePicture?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    mmr?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    leaderboardRank?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    rank?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    twitchName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    discordName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    matches?: Resolver<Maybe<Array<Maybe<ResolversTypes['MatchSlot']>>>, ParentType, ContextType, RequireFields<UserProfileMatchesArgs, never>>;
    mmrHistory?: Resolver<Maybe<Array<Maybe<ResolversTypes['MMRHistory']>>>, ParentType, ContextType, RequireFields<UserProfileMmrHistoryArgs, never>>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType>;
};
export declare type MmrHistoryResolvers<ContextType = any, ParentType extends ResolversParentTypes['MMRHistory'] = ResolversParentTypes['MMRHistory']> = {
    date?: Resolver<Maybe<ResolversTypes['Date']>, ParentType, ContextType>;
    mmr?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    rank?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType>;
};
export declare type MatchResolvers<ContextType = any, ParentType extends ResolversParentTypes['Match'] = ResolversParentTypes['Match']> = {
    id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
    averageMMR?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    duration?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    slots?: Resolver<Maybe<Array<Maybe<ResolversTypes['MatchSlot']>>>, ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType>;
};
export declare type MatchSlotResolvers<ContextType = any, ParentType extends ResolversParentTypes['MatchSlot'] = ResolversParentTypes['MatchSlot']> = {
    matchSlotID?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
    slot?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    finalPlace?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    duration?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    match?: Resolver<Maybe<ResolversTypes['Match']>, ParentType, ContextType>;
    user?: Resolver<Maybe<ResolversTypes['UserProfile']>, ParentType, ContextType>;
    matchPlayer?: Resolver<Maybe<ResolversTypes['MatchPlayer']>, ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType>;
};
export declare type MatchPlayerResolvers<ContextType = any, ParentType extends ResolversParentTypes['MatchPlayer'] = ResolversParentTypes['MatchPlayer']> = {
    steamid?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType>;
};
export declare type LobbyResolvers<ContextType = any, ParentType extends ResolversParentTypes['Lobby'] = ResolversParentTypes['Lobby']> = {
    id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
    averageMMR?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    duration?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    slots?: Resolver<Maybe<Array<Maybe<ResolversTypes['LobbySlot']>>>, ParentType, ContextType>;
    pool?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType>;
};
export declare type LobbySlotResolvers<ContextType = any, ParentType extends ResolversParentTypes['LobbySlot'] = ResolversParentTypes['LobbySlot']> = {
    lobbySlotId?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
    slot?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    user?: Resolver<Maybe<ResolversTypes['UserProfile']>, ParentType, ContextType>;
    matchPlayer?: Resolver<Maybe<ResolversTypes['MatchPlayer']>, ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType>;
};
export declare type Resolvers<ContextType = any> = {
    Query?: QueryResolvers<ContextType>;
    Mutation?: MutationResolvers<ContextType>;
    Subscription?: SubscriptionResolvers<ContextType>;
    Date?: GraphQLScalarType;
    UserProfile?: UserProfileResolvers<ContextType>;
    MMRHistory?: MmrHistoryResolvers<ContextType>;
    Match?: MatchResolvers<ContextType>;
    MatchSlot?: MatchSlotResolvers<ContextType>;
    MatchPlayer?: MatchPlayerResolvers<ContextType>;
    Lobby?: LobbyResolvers<ContextType>;
    LobbySlot?: LobbySlotResolvers<ContextType>;
};
/**
 * @deprecated
 * Use "Resolvers" root object instead. If you wish to get "IResolvers", add "typesPrefix: I" to your config.
 */
export declare type IResolvers<ContextType = any> = Resolvers<ContextType>;

          
// This is an extra code in addition to what graphql-codegen makes.
// Users are likely to use 'graphql-tag/loader' with 'graphql-tag/schema/loader'
// in webpack. This code enables the result to be typed.
import { DocumentNode } from 'graphql'
export default typeof DocumentNode
